
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Item
 * 
 */
export type Item = $Result.DefaultSelection<Prisma.$ItemPayload>
/**
 * Model Location
 * 
 */
export type Location = $Result.DefaultSelection<Prisma.$LocationPayload>
/**
 * Model Stock
 * 
 */
export type Stock = $Result.DefaultSelection<Prisma.$StockPayload>
/**
 * Model Receipt
 * 
 */
export type Receipt = $Result.DefaultSelection<Prisma.$ReceiptPayload>
/**
 * Model ReceiptLine
 * 
 */
export type ReceiptLine = $Result.DefaultSelection<Prisma.$ReceiptLinePayload>
/**
 * Model Dispatch
 * 
 */
export type Dispatch = $Result.DefaultSelection<Prisma.$DispatchPayload>
/**
 * Model DispatchLine
 * 
 */
export type DispatchLine = $Result.DefaultSelection<Prisma.$DispatchLinePayload>
/**
 * Model Stocktake
 * 
 */
export type Stocktake = $Result.DefaultSelection<Prisma.$StocktakePayload>
/**
 * Model StocktakeLine
 * 
 */
export type StocktakeLine = $Result.DefaultSelection<Prisma.$StocktakeLinePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.item`: Exposes CRUD operations for the **Item** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Items
    * const items = await prisma.item.findMany()
    * ```
    */
  get item(): Prisma.ItemDelegate<ExtArgs>;

  /**
   * `prisma.location`: Exposes CRUD operations for the **Location** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Locations
    * const locations = await prisma.location.findMany()
    * ```
    */
  get location(): Prisma.LocationDelegate<ExtArgs>;

  /**
   * `prisma.stock`: Exposes CRUD operations for the **Stock** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stocks
    * const stocks = await prisma.stock.findMany()
    * ```
    */
  get stock(): Prisma.StockDelegate<ExtArgs>;

  /**
   * `prisma.receipt`: Exposes CRUD operations for the **Receipt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Receipts
    * const receipts = await prisma.receipt.findMany()
    * ```
    */
  get receipt(): Prisma.ReceiptDelegate<ExtArgs>;

  /**
   * `prisma.receiptLine`: Exposes CRUD operations for the **ReceiptLine** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReceiptLines
    * const receiptLines = await prisma.receiptLine.findMany()
    * ```
    */
  get receiptLine(): Prisma.ReceiptLineDelegate<ExtArgs>;

  /**
   * `prisma.dispatch`: Exposes CRUD operations for the **Dispatch** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dispatches
    * const dispatches = await prisma.dispatch.findMany()
    * ```
    */
  get dispatch(): Prisma.DispatchDelegate<ExtArgs>;

  /**
   * `prisma.dispatchLine`: Exposes CRUD operations for the **DispatchLine** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DispatchLines
    * const dispatchLines = await prisma.dispatchLine.findMany()
    * ```
    */
  get dispatchLine(): Prisma.DispatchLineDelegate<ExtArgs>;

  /**
   * `prisma.stocktake`: Exposes CRUD operations for the **Stocktake** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stocktakes
    * const stocktakes = await prisma.stocktake.findMany()
    * ```
    */
  get stocktake(): Prisma.StocktakeDelegate<ExtArgs>;

  /**
   * `prisma.stocktakeLine`: Exposes CRUD operations for the **StocktakeLine** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StocktakeLines
    * const stocktakeLines = await prisma.stocktakeLine.findMany()
    * ```
    */
  get stocktakeLine(): Prisma.StocktakeLineDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Item: 'Item',
    Location: 'Location',
    Stock: 'Stock',
    Receipt: 'Receipt',
    ReceiptLine: 'ReceiptLine',
    Dispatch: 'Dispatch',
    DispatchLine: 'DispatchLine',
    Stocktake: 'Stocktake',
    StocktakeLine: 'StocktakeLine'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "item" | "location" | "stock" | "receipt" | "receiptLine" | "dispatch" | "dispatchLine" | "stocktake" | "stocktakeLine"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Item: {
        payload: Prisma.$ItemPayload<ExtArgs>
        fields: Prisma.ItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          findFirst: {
            args: Prisma.ItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          findMany: {
            args: Prisma.ItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>[]
          }
          create: {
            args: Prisma.ItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          createMany: {
            args: Prisma.ItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          update: {
            args: Prisma.ItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          deleteMany: {
            args: Prisma.ItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          aggregate: {
            args: Prisma.ItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateItem>
          }
          groupBy: {
            args: Prisma.ItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.ItemCountArgs<ExtArgs>
            result: $Utils.Optional<ItemCountAggregateOutputType> | number
          }
        }
      }
      Location: {
        payload: Prisma.$LocationPayload<ExtArgs>
        fields: Prisma.LocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findFirst: {
            args: Prisma.LocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findMany: {
            args: Prisma.LocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          create: {
            args: Prisma.LocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          createMany: {
            args: Prisma.LocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.LocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          update: {
            args: Prisma.LocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          deleteMany: {
            args: Prisma.LocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          aggregate: {
            args: Prisma.LocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLocation>
          }
          groupBy: {
            args: Prisma.LocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<LocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationCountArgs<ExtArgs>
            result: $Utils.Optional<LocationCountAggregateOutputType> | number
          }
        }
      }
      Stock: {
        payload: Prisma.$StockPayload<ExtArgs>
        fields: Prisma.StockFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StockFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StockFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          findFirst: {
            args: Prisma.StockFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StockFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          findMany: {
            args: Prisma.StockFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>[]
          }
          create: {
            args: Prisma.StockCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          createMany: {
            args: Prisma.StockCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.StockDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          update: {
            args: Prisma.StockUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          deleteMany: {
            args: Prisma.StockDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StockUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StockUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          aggregate: {
            args: Prisma.StockAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStock>
          }
          groupBy: {
            args: Prisma.StockGroupByArgs<ExtArgs>
            result: $Utils.Optional<StockGroupByOutputType>[]
          }
          count: {
            args: Prisma.StockCountArgs<ExtArgs>
            result: $Utils.Optional<StockCountAggregateOutputType> | number
          }
        }
      }
      Receipt: {
        payload: Prisma.$ReceiptPayload<ExtArgs>
        fields: Prisma.ReceiptFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReceiptFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReceiptFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>
          }
          findFirst: {
            args: Prisma.ReceiptFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReceiptFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>
          }
          findMany: {
            args: Prisma.ReceiptFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>[]
          }
          create: {
            args: Prisma.ReceiptCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>
          }
          createMany: {
            args: Prisma.ReceiptCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ReceiptDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>
          }
          update: {
            args: Prisma.ReceiptUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>
          }
          deleteMany: {
            args: Prisma.ReceiptDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReceiptUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReceiptUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>
          }
          aggregate: {
            args: Prisma.ReceiptAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReceipt>
          }
          groupBy: {
            args: Prisma.ReceiptGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReceiptGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReceiptCountArgs<ExtArgs>
            result: $Utils.Optional<ReceiptCountAggregateOutputType> | number
          }
        }
      }
      ReceiptLine: {
        payload: Prisma.$ReceiptLinePayload<ExtArgs>
        fields: Prisma.ReceiptLineFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReceiptLineFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptLinePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReceiptLineFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptLinePayload>
          }
          findFirst: {
            args: Prisma.ReceiptLineFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptLinePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReceiptLineFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptLinePayload>
          }
          findMany: {
            args: Prisma.ReceiptLineFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptLinePayload>[]
          }
          create: {
            args: Prisma.ReceiptLineCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptLinePayload>
          }
          createMany: {
            args: Prisma.ReceiptLineCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ReceiptLineDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptLinePayload>
          }
          update: {
            args: Prisma.ReceiptLineUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptLinePayload>
          }
          deleteMany: {
            args: Prisma.ReceiptLineDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReceiptLineUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReceiptLineUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptLinePayload>
          }
          aggregate: {
            args: Prisma.ReceiptLineAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReceiptLine>
          }
          groupBy: {
            args: Prisma.ReceiptLineGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReceiptLineGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReceiptLineCountArgs<ExtArgs>
            result: $Utils.Optional<ReceiptLineCountAggregateOutputType> | number
          }
        }
      }
      Dispatch: {
        payload: Prisma.$DispatchPayload<ExtArgs>
        fields: Prisma.DispatchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DispatchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispatchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DispatchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispatchPayload>
          }
          findFirst: {
            args: Prisma.DispatchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispatchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DispatchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispatchPayload>
          }
          findMany: {
            args: Prisma.DispatchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispatchPayload>[]
          }
          create: {
            args: Prisma.DispatchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispatchPayload>
          }
          createMany: {
            args: Prisma.DispatchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DispatchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispatchPayload>
          }
          update: {
            args: Prisma.DispatchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispatchPayload>
          }
          deleteMany: {
            args: Prisma.DispatchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DispatchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DispatchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispatchPayload>
          }
          aggregate: {
            args: Prisma.DispatchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDispatch>
          }
          groupBy: {
            args: Prisma.DispatchGroupByArgs<ExtArgs>
            result: $Utils.Optional<DispatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.DispatchCountArgs<ExtArgs>
            result: $Utils.Optional<DispatchCountAggregateOutputType> | number
          }
        }
      }
      DispatchLine: {
        payload: Prisma.$DispatchLinePayload<ExtArgs>
        fields: Prisma.DispatchLineFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DispatchLineFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispatchLinePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DispatchLineFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispatchLinePayload>
          }
          findFirst: {
            args: Prisma.DispatchLineFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispatchLinePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DispatchLineFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispatchLinePayload>
          }
          findMany: {
            args: Prisma.DispatchLineFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispatchLinePayload>[]
          }
          create: {
            args: Prisma.DispatchLineCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispatchLinePayload>
          }
          createMany: {
            args: Prisma.DispatchLineCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DispatchLineDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispatchLinePayload>
          }
          update: {
            args: Prisma.DispatchLineUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispatchLinePayload>
          }
          deleteMany: {
            args: Prisma.DispatchLineDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DispatchLineUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DispatchLineUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispatchLinePayload>
          }
          aggregate: {
            args: Prisma.DispatchLineAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDispatchLine>
          }
          groupBy: {
            args: Prisma.DispatchLineGroupByArgs<ExtArgs>
            result: $Utils.Optional<DispatchLineGroupByOutputType>[]
          }
          count: {
            args: Prisma.DispatchLineCountArgs<ExtArgs>
            result: $Utils.Optional<DispatchLineCountAggregateOutputType> | number
          }
        }
      }
      Stocktake: {
        payload: Prisma.$StocktakePayload<ExtArgs>
        fields: Prisma.StocktakeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StocktakeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StocktakePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StocktakeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StocktakePayload>
          }
          findFirst: {
            args: Prisma.StocktakeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StocktakePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StocktakeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StocktakePayload>
          }
          findMany: {
            args: Prisma.StocktakeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StocktakePayload>[]
          }
          create: {
            args: Prisma.StocktakeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StocktakePayload>
          }
          createMany: {
            args: Prisma.StocktakeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.StocktakeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StocktakePayload>
          }
          update: {
            args: Prisma.StocktakeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StocktakePayload>
          }
          deleteMany: {
            args: Prisma.StocktakeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StocktakeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StocktakeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StocktakePayload>
          }
          aggregate: {
            args: Prisma.StocktakeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStocktake>
          }
          groupBy: {
            args: Prisma.StocktakeGroupByArgs<ExtArgs>
            result: $Utils.Optional<StocktakeGroupByOutputType>[]
          }
          count: {
            args: Prisma.StocktakeCountArgs<ExtArgs>
            result: $Utils.Optional<StocktakeCountAggregateOutputType> | number
          }
        }
      }
      StocktakeLine: {
        payload: Prisma.$StocktakeLinePayload<ExtArgs>
        fields: Prisma.StocktakeLineFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StocktakeLineFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StocktakeLinePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StocktakeLineFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StocktakeLinePayload>
          }
          findFirst: {
            args: Prisma.StocktakeLineFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StocktakeLinePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StocktakeLineFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StocktakeLinePayload>
          }
          findMany: {
            args: Prisma.StocktakeLineFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StocktakeLinePayload>[]
          }
          create: {
            args: Prisma.StocktakeLineCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StocktakeLinePayload>
          }
          createMany: {
            args: Prisma.StocktakeLineCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.StocktakeLineDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StocktakeLinePayload>
          }
          update: {
            args: Prisma.StocktakeLineUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StocktakeLinePayload>
          }
          deleteMany: {
            args: Prisma.StocktakeLineDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StocktakeLineUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StocktakeLineUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StocktakeLinePayload>
          }
          aggregate: {
            args: Prisma.StocktakeLineAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStocktakeLine>
          }
          groupBy: {
            args: Prisma.StocktakeLineGroupByArgs<ExtArgs>
            result: $Utils.Optional<StocktakeLineGroupByOutputType>[]
          }
          count: {
            args: Prisma.StocktakeLineCountArgs<ExtArgs>
            result: $Utils.Optional<StocktakeLineCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ItemCountOutputType
   */

  export type ItemCountOutputType = {
    stocks: number
    receipts: number
    dispatches: number
    stocktakes: number
  }

  export type ItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stocks?: boolean | ItemCountOutputTypeCountStocksArgs
    receipts?: boolean | ItemCountOutputTypeCountReceiptsArgs
    dispatches?: boolean | ItemCountOutputTypeCountDispatchesArgs
    stocktakes?: boolean | ItemCountOutputTypeCountStocktakesArgs
  }

  // Custom InputTypes
  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemCountOutputType
     */
    select?: ItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeCountStocksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockWhereInput
  }

  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeCountReceiptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceiptLineWhereInput
  }

  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeCountDispatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DispatchLineWhereInput
  }

  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeCountStocktakesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StocktakeLineWhereInput
  }


  /**
   * Count Type LocationCountOutputType
   */

  export type LocationCountOutputType = {
    stocks: number
    stocktakes: number
    receiptLines: number
    dispatchLines: number
  }

  export type LocationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stocks?: boolean | LocationCountOutputTypeCountStocksArgs
    stocktakes?: boolean | LocationCountOutputTypeCountStocktakesArgs
    receiptLines?: boolean | LocationCountOutputTypeCountReceiptLinesArgs
    dispatchLines?: boolean | LocationCountOutputTypeCountDispatchLinesArgs
  }

  // Custom InputTypes
  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCountOutputType
     */
    select?: LocationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountStocksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockWhereInput
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountStocktakesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StocktakeLineWhereInput
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountReceiptLinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceiptLineWhereInput
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountDispatchLinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DispatchLineWhereInput
  }


  /**
   * Count Type ReceiptCountOutputType
   */

  export type ReceiptCountOutputType = {
    lines: number
  }

  export type ReceiptCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lines?: boolean | ReceiptCountOutputTypeCountLinesArgs
  }

  // Custom InputTypes
  /**
   * ReceiptCountOutputType without action
   */
  export type ReceiptCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptCountOutputType
     */
    select?: ReceiptCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReceiptCountOutputType without action
   */
  export type ReceiptCountOutputTypeCountLinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceiptLineWhereInput
  }


  /**
   * Count Type DispatchCountOutputType
   */

  export type DispatchCountOutputType = {
    lines: number
  }

  export type DispatchCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lines?: boolean | DispatchCountOutputTypeCountLinesArgs
  }

  // Custom InputTypes
  /**
   * DispatchCountOutputType without action
   */
  export type DispatchCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DispatchCountOutputType
     */
    select?: DispatchCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DispatchCountOutputType without action
   */
  export type DispatchCountOutputTypeCountLinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DispatchLineWhereInput
  }


  /**
   * Count Type StocktakeCountOutputType
   */

  export type StocktakeCountOutputType = {
    lines: number
  }

  export type StocktakeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lines?: boolean | StocktakeCountOutputTypeCountLinesArgs
  }

  // Custom InputTypes
  /**
   * StocktakeCountOutputType without action
   */
  export type StocktakeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StocktakeCountOutputType
     */
    select?: StocktakeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StocktakeCountOutputType without action
   */
  export type StocktakeCountOutputTypeCountLinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StocktakeLineWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    passwordHash: string | null
    role: string | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    passwordHash: string | null
    role: string | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    passwordHash: number
    role: number
    createdAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    role?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    role?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    role?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    passwordHash: string
    role: string
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    createdAt?: boolean
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      passwordHash: string
      role: string
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
  }


  /**
   * Model Item
   */

  export type AggregateItem = {
    _count: ItemCountAggregateOutputType | null
    _avg: ItemAvgAggregateOutputType | null
    _sum: ItemSumAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  export type ItemAvgAggregateOutputType = {
    id: number | null
    minStock: number | null
  }

  export type ItemSumAggregateOutputType = {
    id: number | null
    minStock: number | null
  }

  export type ItemMinAggregateOutputType = {
    id: number | null
    sku: string | null
    name: string | null
    unit: string | null
    barcode: string | null
    minStock: number | null
    createdAt: Date | null
  }

  export type ItemMaxAggregateOutputType = {
    id: number | null
    sku: string | null
    name: string | null
    unit: string | null
    barcode: string | null
    minStock: number | null
    createdAt: Date | null
  }

  export type ItemCountAggregateOutputType = {
    id: number
    sku: number
    name: number
    unit: number
    barcode: number
    minStock: number
    createdAt: number
    _all: number
  }


  export type ItemAvgAggregateInputType = {
    id?: true
    minStock?: true
  }

  export type ItemSumAggregateInputType = {
    id?: true
    minStock?: true
  }

  export type ItemMinAggregateInputType = {
    id?: true
    sku?: true
    name?: true
    unit?: true
    barcode?: true
    minStock?: true
    createdAt?: true
  }

  export type ItemMaxAggregateInputType = {
    id?: true
    sku?: true
    name?: true
    unit?: true
    barcode?: true
    minStock?: true
    createdAt?: true
  }

  export type ItemCountAggregateInputType = {
    id?: true
    sku?: true
    name?: true
    unit?: true
    barcode?: true
    minStock?: true
    createdAt?: true
    _all?: true
  }

  export type ItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Item to aggregate.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Items
    **/
    _count?: true | ItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemMaxAggregateInputType
  }

  export type GetItemAggregateType<T extends ItemAggregateArgs> = {
        [P in keyof T & keyof AggregateItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItem[P]>
      : GetScalarType<T[P], AggregateItem[P]>
  }




  export type ItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithAggregationInput | ItemOrderByWithAggregationInput[]
    by: ItemScalarFieldEnum[] | ItemScalarFieldEnum
    having?: ItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemCountAggregateInputType | true
    _avg?: ItemAvgAggregateInputType
    _sum?: ItemSumAggregateInputType
    _min?: ItemMinAggregateInputType
    _max?: ItemMaxAggregateInputType
  }

  export type ItemGroupByOutputType = {
    id: number
    sku: string
    name: string
    unit: string
    barcode: string | null
    minStock: number | null
    createdAt: Date
    _count: ItemCountAggregateOutputType | null
    _avg: ItemAvgAggregateOutputType | null
    _sum: ItemSumAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  type GetItemGroupByPayload<T extends ItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItemGroupByOutputType[P]>
            : GetScalarType<T[P], ItemGroupByOutputType[P]>
        }
      >
    >


  export type ItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sku?: boolean
    name?: boolean
    unit?: boolean
    barcode?: boolean
    minStock?: boolean
    createdAt?: boolean
    stocks?: boolean | Item$stocksArgs<ExtArgs>
    receipts?: boolean | Item$receiptsArgs<ExtArgs>
    dispatches?: boolean | Item$dispatchesArgs<ExtArgs>
    stocktakes?: boolean | Item$stocktakesArgs<ExtArgs>
    _count?: boolean | ItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["item"]>


  export type ItemSelectScalar = {
    id?: boolean
    sku?: boolean
    name?: boolean
    unit?: boolean
    barcode?: boolean
    minStock?: boolean
    createdAt?: boolean
  }

  export type ItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stocks?: boolean | Item$stocksArgs<ExtArgs>
    receipts?: boolean | Item$receiptsArgs<ExtArgs>
    dispatches?: boolean | Item$dispatchesArgs<ExtArgs>
    stocktakes?: boolean | Item$stocktakesArgs<ExtArgs>
    _count?: boolean | ItemCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Item"
    objects: {
      stocks: Prisma.$StockPayload<ExtArgs>[]
      receipts: Prisma.$ReceiptLinePayload<ExtArgs>[]
      dispatches: Prisma.$DispatchLinePayload<ExtArgs>[]
      stocktakes: Prisma.$StocktakeLinePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sku: string
      name: string
      unit: string
      barcode: string | null
      minStock: number | null
      createdAt: Date
    }, ExtArgs["result"]["item"]>
    composites: {}
  }

  type ItemGetPayload<S extends boolean | null | undefined | ItemDefaultArgs> = $Result.GetResult<Prisma.$ItemPayload, S>

  type ItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ItemCountAggregateInputType | true
    }

  export interface ItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Item'], meta: { name: 'Item' } }
    /**
     * Find zero or one Item that matches the filter.
     * @param {ItemFindUniqueArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ItemFindUniqueArgs>(args: SelectSubset<T, ItemFindUniqueArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Item that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ItemFindUniqueOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ItemFindUniqueOrThrowArgs>(args: SelectSubset<T, ItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Item that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindFirstArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ItemFindFirstArgs>(args?: SelectSubset<T, ItemFindFirstArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Item that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindFirstOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ItemFindFirstOrThrowArgs>(args?: SelectSubset<T, ItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Items
     * const items = await prisma.item.findMany()
     * 
     * // Get first 10 Items
     * const items = await prisma.item.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const itemWithIdOnly = await prisma.item.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ItemFindManyArgs>(args?: SelectSubset<T, ItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Item.
     * @param {ItemCreateArgs} args - Arguments to create a Item.
     * @example
     * // Create one Item
     * const Item = await prisma.item.create({
     *   data: {
     *     // ... data to create a Item
     *   }
     * })
     * 
     */
    create<T extends ItemCreateArgs>(args: SelectSubset<T, ItemCreateArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Items.
     * @param {ItemCreateManyArgs} args - Arguments to create many Items.
     * @example
     * // Create many Items
     * const item = await prisma.item.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ItemCreateManyArgs>(args?: SelectSubset<T, ItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Item.
     * @param {ItemDeleteArgs} args - Arguments to delete one Item.
     * @example
     * // Delete one Item
     * const Item = await prisma.item.delete({
     *   where: {
     *     // ... filter to delete one Item
     *   }
     * })
     * 
     */
    delete<T extends ItemDeleteArgs>(args: SelectSubset<T, ItemDeleteArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Item.
     * @param {ItemUpdateArgs} args - Arguments to update one Item.
     * @example
     * // Update one Item
     * const item = await prisma.item.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ItemUpdateArgs>(args: SelectSubset<T, ItemUpdateArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Items.
     * @param {ItemDeleteManyArgs} args - Arguments to filter Items to delete.
     * @example
     * // Delete a few Items
     * const { count } = await prisma.item.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ItemDeleteManyArgs>(args?: SelectSubset<T, ItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Items
     * const item = await prisma.item.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ItemUpdateManyArgs>(args: SelectSubset<T, ItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Item.
     * @param {ItemUpsertArgs} args - Arguments to update or create a Item.
     * @example
     * // Update or create a Item
     * const item = await prisma.item.upsert({
     *   create: {
     *     // ... data to create a Item
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Item we want to update
     *   }
     * })
     */
    upsert<T extends ItemUpsertArgs>(args: SelectSubset<T, ItemUpsertArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemCountArgs} args - Arguments to filter Items to count.
     * @example
     * // Count the number of Items
     * const count = await prisma.item.count({
     *   where: {
     *     // ... the filter for the Items we want to count
     *   }
     * })
    **/
    count<T extends ItemCountArgs>(
      args?: Subset<T, ItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemAggregateArgs>(args: Subset<T, ItemAggregateArgs>): Prisma.PrismaPromise<GetItemAggregateType<T>>

    /**
     * Group by Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemGroupByArgs['orderBy'] }
        : { orderBy?: ItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Item model
   */
  readonly fields: ItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Item.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    stocks<T extends Item$stocksArgs<ExtArgs> = {}>(args?: Subset<T, Item$stocksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findMany"> | Null>
    receipts<T extends Item$receiptsArgs<ExtArgs> = {}>(args?: Subset<T, Item$receiptsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptLinePayload<ExtArgs>, T, "findMany"> | Null>
    dispatches<T extends Item$dispatchesArgs<ExtArgs> = {}>(args?: Subset<T, Item$dispatchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DispatchLinePayload<ExtArgs>, T, "findMany"> | Null>
    stocktakes<T extends Item$stocktakesArgs<ExtArgs> = {}>(args?: Subset<T, Item$stocktakesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StocktakeLinePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Item model
   */ 
  interface ItemFieldRefs {
    readonly id: FieldRef<"Item", 'Int'>
    readonly sku: FieldRef<"Item", 'String'>
    readonly name: FieldRef<"Item", 'String'>
    readonly unit: FieldRef<"Item", 'String'>
    readonly barcode: FieldRef<"Item", 'String'>
    readonly minStock: FieldRef<"Item", 'Int'>
    readonly createdAt: FieldRef<"Item", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Item findUnique
   */
  export type ItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item findUniqueOrThrow
   */
  export type ItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item findFirst
   */
  export type ItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item findFirstOrThrow
   */
  export type ItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item findMany
   */
  export type ItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item create
   */
  export type ItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The data needed to create a Item.
     */
    data: XOR<ItemCreateInput, ItemUncheckedCreateInput>
  }

  /**
   * Item createMany
   */
  export type ItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Items.
     */
    data: ItemCreateManyInput | ItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Item update
   */
  export type ItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The data needed to update a Item.
     */
    data: XOR<ItemUpdateInput, ItemUncheckedUpdateInput>
    /**
     * Choose, which Item to update.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item updateMany
   */
  export type ItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Items.
     */
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyInput>
    /**
     * Filter which Items to update
     */
    where?: ItemWhereInput
  }

  /**
   * Item upsert
   */
  export type ItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The filter to search for the Item to update in case it exists.
     */
    where: ItemWhereUniqueInput
    /**
     * In case the Item found by the `where` argument doesn't exist, create a new Item with this data.
     */
    create: XOR<ItemCreateInput, ItemUncheckedCreateInput>
    /**
     * In case the Item was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ItemUpdateInput, ItemUncheckedUpdateInput>
  }

  /**
   * Item delete
   */
  export type ItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter which Item to delete.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item deleteMany
   */
  export type ItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Items to delete
     */
    where?: ItemWhereInput
  }

  /**
   * Item.stocks
   */
  export type Item$stocksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    where?: StockWhereInput
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    cursor?: StockWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StockScalarFieldEnum | StockScalarFieldEnum[]
  }

  /**
   * Item.receipts
   */
  export type Item$receiptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptLine
     */
    select?: ReceiptLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptLineInclude<ExtArgs> | null
    where?: ReceiptLineWhereInput
    orderBy?: ReceiptLineOrderByWithRelationInput | ReceiptLineOrderByWithRelationInput[]
    cursor?: ReceiptLineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReceiptLineScalarFieldEnum | ReceiptLineScalarFieldEnum[]
  }

  /**
   * Item.dispatches
   */
  export type Item$dispatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DispatchLine
     */
    select?: DispatchLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispatchLineInclude<ExtArgs> | null
    where?: DispatchLineWhereInput
    orderBy?: DispatchLineOrderByWithRelationInput | DispatchLineOrderByWithRelationInput[]
    cursor?: DispatchLineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DispatchLineScalarFieldEnum | DispatchLineScalarFieldEnum[]
  }

  /**
   * Item.stocktakes
   */
  export type Item$stocktakesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StocktakeLine
     */
    select?: StocktakeLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StocktakeLineInclude<ExtArgs> | null
    where?: StocktakeLineWhereInput
    orderBy?: StocktakeLineOrderByWithRelationInput | StocktakeLineOrderByWithRelationInput[]
    cursor?: StocktakeLineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StocktakeLineScalarFieldEnum | StocktakeLineScalarFieldEnum[]
  }

  /**
   * Item without action
   */
  export type ItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
  }


  /**
   * Model Location
   */

  export type AggregateLocation = {
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  export type LocationAvgAggregateOutputType = {
    id: number | null
  }

  export type LocationSumAggregateOutputType = {
    id: number | null
  }

  export type LocationMinAggregateOutputType = {
    id: number | null
    code: string | null
    description: string | null
    createdAt: Date | null
  }

  export type LocationMaxAggregateOutputType = {
    id: number | null
    code: string | null
    description: string | null
    createdAt: Date | null
  }

  export type LocationCountAggregateOutputType = {
    id: number
    code: number
    description: number
    createdAt: number
    _all: number
  }


  export type LocationAvgAggregateInputType = {
    id?: true
  }

  export type LocationSumAggregateInputType = {
    id?: true
  }

  export type LocationMinAggregateInputType = {
    id?: true
    code?: true
    description?: true
    createdAt?: true
  }

  export type LocationMaxAggregateInputType = {
    id?: true
    code?: true
    description?: true
    createdAt?: true
  }

  export type LocationCountAggregateInputType = {
    id?: true
    code?: true
    description?: true
    createdAt?: true
    _all?: true
  }

  export type LocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Location to aggregate.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Locations
    **/
    _count?: true | LocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationMaxAggregateInputType
  }

  export type GetLocationAggregateType<T extends LocationAggregateArgs> = {
        [P in keyof T & keyof AggregateLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocation[P]>
      : GetScalarType<T[P], AggregateLocation[P]>
  }




  export type LocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationWhereInput
    orderBy?: LocationOrderByWithAggregationInput | LocationOrderByWithAggregationInput[]
    by: LocationScalarFieldEnum[] | LocationScalarFieldEnum
    having?: LocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationCountAggregateInputType | true
    _avg?: LocationAvgAggregateInputType
    _sum?: LocationSumAggregateInputType
    _min?: LocationMinAggregateInputType
    _max?: LocationMaxAggregateInputType
  }

  export type LocationGroupByOutputType = {
    id: number
    code: string
    description: string | null
    createdAt: Date
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  type GetLocationGroupByPayload<T extends LocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationGroupByOutputType[P]>
            : GetScalarType<T[P], LocationGroupByOutputType[P]>
        }
      >
    >


  export type LocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    description?: boolean
    createdAt?: boolean
    stocks?: boolean | Location$stocksArgs<ExtArgs>
    stocktakes?: boolean | Location$stocktakesArgs<ExtArgs>
    receiptLines?: boolean | Location$receiptLinesArgs<ExtArgs>
    dispatchLines?: boolean | Location$dispatchLinesArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>


  export type LocationSelectScalar = {
    id?: boolean
    code?: boolean
    description?: boolean
    createdAt?: boolean
  }

  export type LocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stocks?: boolean | Location$stocksArgs<ExtArgs>
    stocktakes?: boolean | Location$stocktakesArgs<ExtArgs>
    receiptLines?: boolean | Location$receiptLinesArgs<ExtArgs>
    dispatchLines?: boolean | Location$dispatchLinesArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $LocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Location"
    objects: {
      stocks: Prisma.$StockPayload<ExtArgs>[]
      stocktakes: Prisma.$StocktakeLinePayload<ExtArgs>[]
      receiptLines: Prisma.$ReceiptLinePayload<ExtArgs>[]
      dispatchLines: Prisma.$DispatchLinePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      description: string | null
      createdAt: Date
    }, ExtArgs["result"]["location"]>
    composites: {}
  }

  type LocationGetPayload<S extends boolean | null | undefined | LocationDefaultArgs> = $Result.GetResult<Prisma.$LocationPayload, S>

  type LocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LocationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LocationCountAggregateInputType | true
    }

  export interface LocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Location'], meta: { name: 'Location' } }
    /**
     * Find zero or one Location that matches the filter.
     * @param {LocationFindUniqueArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LocationFindUniqueArgs>(args: SelectSubset<T, LocationFindUniqueArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Location that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LocationFindUniqueOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LocationFindUniqueOrThrowArgs>(args: SelectSubset<T, LocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Location that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LocationFindFirstArgs>(args?: SelectSubset<T, LocationFindFirstArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Location that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LocationFindFirstOrThrowArgs>(args?: SelectSubset<T, LocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Locations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Locations
     * const locations = await prisma.location.findMany()
     * 
     * // Get first 10 Locations
     * const locations = await prisma.location.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationWithIdOnly = await prisma.location.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LocationFindManyArgs>(args?: SelectSubset<T, LocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Location.
     * @param {LocationCreateArgs} args - Arguments to create a Location.
     * @example
     * // Create one Location
     * const Location = await prisma.location.create({
     *   data: {
     *     // ... data to create a Location
     *   }
     * })
     * 
     */
    create<T extends LocationCreateArgs>(args: SelectSubset<T, LocationCreateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Locations.
     * @param {LocationCreateManyArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LocationCreateManyArgs>(args?: SelectSubset<T, LocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Location.
     * @param {LocationDeleteArgs} args - Arguments to delete one Location.
     * @example
     * // Delete one Location
     * const Location = await prisma.location.delete({
     *   where: {
     *     // ... filter to delete one Location
     *   }
     * })
     * 
     */
    delete<T extends LocationDeleteArgs>(args: SelectSubset<T, LocationDeleteArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Location.
     * @param {LocationUpdateArgs} args - Arguments to update one Location.
     * @example
     * // Update one Location
     * const location = await prisma.location.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LocationUpdateArgs>(args: SelectSubset<T, LocationUpdateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Locations.
     * @param {LocationDeleteManyArgs} args - Arguments to filter Locations to delete.
     * @example
     * // Delete a few Locations
     * const { count } = await prisma.location.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LocationDeleteManyArgs>(args?: SelectSubset<T, LocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LocationUpdateManyArgs>(args: SelectSubset<T, LocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Location.
     * @param {LocationUpsertArgs} args - Arguments to update or create a Location.
     * @example
     * // Update or create a Location
     * const location = await prisma.location.upsert({
     *   create: {
     *     // ... data to create a Location
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Location we want to update
     *   }
     * })
     */
    upsert<T extends LocationUpsertArgs>(args: SelectSubset<T, LocationUpsertArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationCountArgs} args - Arguments to filter Locations to count.
     * @example
     * // Count the number of Locations
     * const count = await prisma.location.count({
     *   where: {
     *     // ... the filter for the Locations we want to count
     *   }
     * })
    **/
    count<T extends LocationCountArgs>(
      args?: Subset<T, LocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationAggregateArgs>(args: Subset<T, LocationAggregateArgs>): Prisma.PrismaPromise<GetLocationAggregateType<T>>

    /**
     * Group by Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationGroupByArgs['orderBy'] }
        : { orderBy?: LocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Location model
   */
  readonly fields: LocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Location.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    stocks<T extends Location$stocksArgs<ExtArgs> = {}>(args?: Subset<T, Location$stocksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findMany"> | Null>
    stocktakes<T extends Location$stocktakesArgs<ExtArgs> = {}>(args?: Subset<T, Location$stocktakesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StocktakeLinePayload<ExtArgs>, T, "findMany"> | Null>
    receiptLines<T extends Location$receiptLinesArgs<ExtArgs> = {}>(args?: Subset<T, Location$receiptLinesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptLinePayload<ExtArgs>, T, "findMany"> | Null>
    dispatchLines<T extends Location$dispatchLinesArgs<ExtArgs> = {}>(args?: Subset<T, Location$dispatchLinesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DispatchLinePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Location model
   */ 
  interface LocationFieldRefs {
    readonly id: FieldRef<"Location", 'Int'>
    readonly code: FieldRef<"Location", 'String'>
    readonly description: FieldRef<"Location", 'String'>
    readonly createdAt: FieldRef<"Location", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Location findUnique
   */
  export type LocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findUniqueOrThrow
   */
  export type LocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findFirst
   */
  export type LocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findFirstOrThrow
   */
  export type LocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findMany
   */
  export type LocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Locations to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location create
   */
  export type LocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to create a Location.
     */
    data: XOR<LocationCreateInput, LocationUncheckedCreateInput>
  }

  /**
   * Location createMany
   */
  export type LocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Location update
   */
  export type LocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to update a Location.
     */
    data: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
    /**
     * Choose, which Location to update.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location updateMany
   */
  export type LocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Locations.
     */
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyInput>
    /**
     * Filter which Locations to update
     */
    where?: LocationWhereInput
  }

  /**
   * Location upsert
   */
  export type LocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The filter to search for the Location to update in case it exists.
     */
    where: LocationWhereUniqueInput
    /**
     * In case the Location found by the `where` argument doesn't exist, create a new Location with this data.
     */
    create: XOR<LocationCreateInput, LocationUncheckedCreateInput>
    /**
     * In case the Location was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
  }

  /**
   * Location delete
   */
  export type LocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter which Location to delete.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location deleteMany
   */
  export type LocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Locations to delete
     */
    where?: LocationWhereInput
  }

  /**
   * Location.stocks
   */
  export type Location$stocksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    where?: StockWhereInput
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    cursor?: StockWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StockScalarFieldEnum | StockScalarFieldEnum[]
  }

  /**
   * Location.stocktakes
   */
  export type Location$stocktakesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StocktakeLine
     */
    select?: StocktakeLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StocktakeLineInclude<ExtArgs> | null
    where?: StocktakeLineWhereInput
    orderBy?: StocktakeLineOrderByWithRelationInput | StocktakeLineOrderByWithRelationInput[]
    cursor?: StocktakeLineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StocktakeLineScalarFieldEnum | StocktakeLineScalarFieldEnum[]
  }

  /**
   * Location.receiptLines
   */
  export type Location$receiptLinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptLine
     */
    select?: ReceiptLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptLineInclude<ExtArgs> | null
    where?: ReceiptLineWhereInput
    orderBy?: ReceiptLineOrderByWithRelationInput | ReceiptLineOrderByWithRelationInput[]
    cursor?: ReceiptLineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReceiptLineScalarFieldEnum | ReceiptLineScalarFieldEnum[]
  }

  /**
   * Location.dispatchLines
   */
  export type Location$dispatchLinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DispatchLine
     */
    select?: DispatchLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispatchLineInclude<ExtArgs> | null
    where?: DispatchLineWhereInput
    orderBy?: DispatchLineOrderByWithRelationInput | DispatchLineOrderByWithRelationInput[]
    cursor?: DispatchLineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DispatchLineScalarFieldEnum | DispatchLineScalarFieldEnum[]
  }

  /**
   * Location without action
   */
  export type LocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
  }


  /**
   * Model Stock
   */

  export type AggregateStock = {
    _count: StockCountAggregateOutputType | null
    _avg: StockAvgAggregateOutputType | null
    _sum: StockSumAggregateOutputType | null
    _min: StockMinAggregateOutputType | null
    _max: StockMaxAggregateOutputType | null
  }

  export type StockAvgAggregateOutputType = {
    id: number | null
    itemId: number | null
    locationId: number | null
    quantity: number | null
  }

  export type StockSumAggregateOutputType = {
    id: number | null
    itemId: number | null
    locationId: number | null
    quantity: number | null
  }

  export type StockMinAggregateOutputType = {
    id: number | null
    itemId: number | null
    locationId: number | null
    quantity: number | null
  }

  export type StockMaxAggregateOutputType = {
    id: number | null
    itemId: number | null
    locationId: number | null
    quantity: number | null
  }

  export type StockCountAggregateOutputType = {
    id: number
    itemId: number
    locationId: number
    quantity: number
    _all: number
  }


  export type StockAvgAggregateInputType = {
    id?: true
    itemId?: true
    locationId?: true
    quantity?: true
  }

  export type StockSumAggregateInputType = {
    id?: true
    itemId?: true
    locationId?: true
    quantity?: true
  }

  export type StockMinAggregateInputType = {
    id?: true
    itemId?: true
    locationId?: true
    quantity?: true
  }

  export type StockMaxAggregateInputType = {
    id?: true
    itemId?: true
    locationId?: true
    quantity?: true
  }

  export type StockCountAggregateInputType = {
    id?: true
    itemId?: true
    locationId?: true
    quantity?: true
    _all?: true
  }

  export type StockAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stock to aggregate.
     */
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     */
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stocks
    **/
    _count?: true | StockCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StockAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StockSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StockMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StockMaxAggregateInputType
  }

  export type GetStockAggregateType<T extends StockAggregateArgs> = {
        [P in keyof T & keyof AggregateStock]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStock[P]>
      : GetScalarType<T[P], AggregateStock[P]>
  }




  export type StockGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockWhereInput
    orderBy?: StockOrderByWithAggregationInput | StockOrderByWithAggregationInput[]
    by: StockScalarFieldEnum[] | StockScalarFieldEnum
    having?: StockScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StockCountAggregateInputType | true
    _avg?: StockAvgAggregateInputType
    _sum?: StockSumAggregateInputType
    _min?: StockMinAggregateInputType
    _max?: StockMaxAggregateInputType
  }

  export type StockGroupByOutputType = {
    id: number
    itemId: number
    locationId: number
    quantity: number
    _count: StockCountAggregateOutputType | null
    _avg: StockAvgAggregateOutputType | null
    _sum: StockSumAggregateOutputType | null
    _min: StockMinAggregateOutputType | null
    _max: StockMaxAggregateOutputType | null
  }

  type GetStockGroupByPayload<T extends StockGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StockGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StockGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StockGroupByOutputType[P]>
            : GetScalarType<T[P], StockGroupByOutputType[P]>
        }
      >
    >


  export type StockSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemId?: boolean
    locationId?: boolean
    quantity?: boolean
    item?: boolean | ItemDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stock"]>


  export type StockSelectScalar = {
    id?: boolean
    itemId?: boolean
    locationId?: boolean
    quantity?: boolean
  }

  export type StockInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | ItemDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }

  export type $StockPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Stock"
    objects: {
      item: Prisma.$ItemPayload<ExtArgs>
      location: Prisma.$LocationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      itemId: number
      locationId: number
      quantity: number
    }, ExtArgs["result"]["stock"]>
    composites: {}
  }

  type StockGetPayload<S extends boolean | null | undefined | StockDefaultArgs> = $Result.GetResult<Prisma.$StockPayload, S>

  type StockCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StockFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StockCountAggregateInputType | true
    }

  export interface StockDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Stock'], meta: { name: 'Stock' } }
    /**
     * Find zero or one Stock that matches the filter.
     * @param {StockFindUniqueArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StockFindUniqueArgs>(args: SelectSubset<T, StockFindUniqueArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Stock that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StockFindUniqueOrThrowArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StockFindUniqueOrThrowArgs>(args: SelectSubset<T, StockFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Stock that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockFindFirstArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StockFindFirstArgs>(args?: SelectSubset<T, StockFindFirstArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Stock that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockFindFirstOrThrowArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StockFindFirstOrThrowArgs>(args?: SelectSubset<T, StockFindFirstOrThrowArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Stocks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stocks
     * const stocks = await prisma.stock.findMany()
     * 
     * // Get first 10 Stocks
     * const stocks = await prisma.stock.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stockWithIdOnly = await prisma.stock.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StockFindManyArgs>(args?: SelectSubset<T, StockFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Stock.
     * @param {StockCreateArgs} args - Arguments to create a Stock.
     * @example
     * // Create one Stock
     * const Stock = await prisma.stock.create({
     *   data: {
     *     // ... data to create a Stock
     *   }
     * })
     * 
     */
    create<T extends StockCreateArgs>(args: SelectSubset<T, StockCreateArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Stocks.
     * @param {StockCreateManyArgs} args - Arguments to create many Stocks.
     * @example
     * // Create many Stocks
     * const stock = await prisma.stock.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StockCreateManyArgs>(args?: SelectSubset<T, StockCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Stock.
     * @param {StockDeleteArgs} args - Arguments to delete one Stock.
     * @example
     * // Delete one Stock
     * const Stock = await prisma.stock.delete({
     *   where: {
     *     // ... filter to delete one Stock
     *   }
     * })
     * 
     */
    delete<T extends StockDeleteArgs>(args: SelectSubset<T, StockDeleteArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Stock.
     * @param {StockUpdateArgs} args - Arguments to update one Stock.
     * @example
     * // Update one Stock
     * const stock = await prisma.stock.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StockUpdateArgs>(args: SelectSubset<T, StockUpdateArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Stocks.
     * @param {StockDeleteManyArgs} args - Arguments to filter Stocks to delete.
     * @example
     * // Delete a few Stocks
     * const { count } = await prisma.stock.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StockDeleteManyArgs>(args?: SelectSubset<T, StockDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stocks
     * const stock = await prisma.stock.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StockUpdateManyArgs>(args: SelectSubset<T, StockUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Stock.
     * @param {StockUpsertArgs} args - Arguments to update or create a Stock.
     * @example
     * // Update or create a Stock
     * const stock = await prisma.stock.upsert({
     *   create: {
     *     // ... data to create a Stock
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stock we want to update
     *   }
     * })
     */
    upsert<T extends StockUpsertArgs>(args: SelectSubset<T, StockUpsertArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Stocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockCountArgs} args - Arguments to filter Stocks to count.
     * @example
     * // Count the number of Stocks
     * const count = await prisma.stock.count({
     *   where: {
     *     // ... the filter for the Stocks we want to count
     *   }
     * })
    **/
    count<T extends StockCountArgs>(
      args?: Subset<T, StockCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StockCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StockAggregateArgs>(args: Subset<T, StockAggregateArgs>): Prisma.PrismaPromise<GetStockAggregateType<T>>

    /**
     * Group by Stock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StockGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StockGroupByArgs['orderBy'] }
        : { orderBy?: StockGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StockGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStockGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Stock model
   */
  readonly fields: StockFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Stock.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StockClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    item<T extends ItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ItemDefaultArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    location<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Stock model
   */ 
  interface StockFieldRefs {
    readonly id: FieldRef<"Stock", 'Int'>
    readonly itemId: FieldRef<"Stock", 'Int'>
    readonly locationId: FieldRef<"Stock", 'Int'>
    readonly quantity: FieldRef<"Stock", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Stock findUnique
   */
  export type StockFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stock to fetch.
     */
    where: StockWhereUniqueInput
  }

  /**
   * Stock findUniqueOrThrow
   */
  export type StockFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stock to fetch.
     */
    where: StockWhereUniqueInput
  }

  /**
   * Stock findFirst
   */
  export type StockFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stock to fetch.
     */
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     */
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stocks.
     */
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stocks.
     */
    distinct?: StockScalarFieldEnum | StockScalarFieldEnum[]
  }

  /**
   * Stock findFirstOrThrow
   */
  export type StockFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stock to fetch.
     */
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     */
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stocks.
     */
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stocks.
     */
    distinct?: StockScalarFieldEnum | StockScalarFieldEnum[]
  }

  /**
   * Stock findMany
   */
  export type StockFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stocks to fetch.
     */
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     */
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stocks.
     */
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     */
    skip?: number
    distinct?: StockScalarFieldEnum | StockScalarFieldEnum[]
  }

  /**
   * Stock create
   */
  export type StockCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * The data needed to create a Stock.
     */
    data: XOR<StockCreateInput, StockUncheckedCreateInput>
  }

  /**
   * Stock createMany
   */
  export type StockCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stocks.
     */
    data: StockCreateManyInput | StockCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Stock update
   */
  export type StockUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * The data needed to update a Stock.
     */
    data: XOR<StockUpdateInput, StockUncheckedUpdateInput>
    /**
     * Choose, which Stock to update.
     */
    where: StockWhereUniqueInput
  }

  /**
   * Stock updateMany
   */
  export type StockUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stocks.
     */
    data: XOR<StockUpdateManyMutationInput, StockUncheckedUpdateManyInput>
    /**
     * Filter which Stocks to update
     */
    where?: StockWhereInput
  }

  /**
   * Stock upsert
   */
  export type StockUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * The filter to search for the Stock to update in case it exists.
     */
    where: StockWhereUniqueInput
    /**
     * In case the Stock found by the `where` argument doesn't exist, create a new Stock with this data.
     */
    create: XOR<StockCreateInput, StockUncheckedCreateInput>
    /**
     * In case the Stock was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StockUpdateInput, StockUncheckedUpdateInput>
  }

  /**
   * Stock delete
   */
  export type StockDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter which Stock to delete.
     */
    where: StockWhereUniqueInput
  }

  /**
   * Stock deleteMany
   */
  export type StockDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stocks to delete
     */
    where?: StockWhereInput
  }

  /**
   * Stock without action
   */
  export type StockDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
  }


  /**
   * Model Receipt
   */

  export type AggregateReceipt = {
    _count: ReceiptCountAggregateOutputType | null
    _avg: ReceiptAvgAggregateOutputType | null
    _sum: ReceiptSumAggregateOutputType | null
    _min: ReceiptMinAggregateOutputType | null
    _max: ReceiptMaxAggregateOutputType | null
  }

  export type ReceiptAvgAggregateOutputType = {
    id: number | null
  }

  export type ReceiptSumAggregateOutputType = {
    id: number | null
  }

  export type ReceiptMinAggregateOutputType = {
    id: number | null
    number: string | null
    supplier: string | null
    status: string | null
    date: Date | null
    createdAt: Date | null
  }

  export type ReceiptMaxAggregateOutputType = {
    id: number | null
    number: string | null
    supplier: string | null
    status: string | null
    date: Date | null
    createdAt: Date | null
  }

  export type ReceiptCountAggregateOutputType = {
    id: number
    number: number
    supplier: number
    status: number
    date: number
    createdAt: number
    _all: number
  }


  export type ReceiptAvgAggregateInputType = {
    id?: true
  }

  export type ReceiptSumAggregateInputType = {
    id?: true
  }

  export type ReceiptMinAggregateInputType = {
    id?: true
    number?: true
    supplier?: true
    status?: true
    date?: true
    createdAt?: true
  }

  export type ReceiptMaxAggregateInputType = {
    id?: true
    number?: true
    supplier?: true
    status?: true
    date?: true
    createdAt?: true
  }

  export type ReceiptCountAggregateInputType = {
    id?: true
    number?: true
    supplier?: true
    status?: true
    date?: true
    createdAt?: true
    _all?: true
  }

  export type ReceiptAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Receipt to aggregate.
     */
    where?: ReceiptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receipts to fetch.
     */
    orderBy?: ReceiptOrderByWithRelationInput | ReceiptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReceiptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Receipts
    **/
    _count?: true | ReceiptCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReceiptAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReceiptSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReceiptMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReceiptMaxAggregateInputType
  }

  export type GetReceiptAggregateType<T extends ReceiptAggregateArgs> = {
        [P in keyof T & keyof AggregateReceipt]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReceipt[P]>
      : GetScalarType<T[P], AggregateReceipt[P]>
  }




  export type ReceiptGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceiptWhereInput
    orderBy?: ReceiptOrderByWithAggregationInput | ReceiptOrderByWithAggregationInput[]
    by: ReceiptScalarFieldEnum[] | ReceiptScalarFieldEnum
    having?: ReceiptScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReceiptCountAggregateInputType | true
    _avg?: ReceiptAvgAggregateInputType
    _sum?: ReceiptSumAggregateInputType
    _min?: ReceiptMinAggregateInputType
    _max?: ReceiptMaxAggregateInputType
  }

  export type ReceiptGroupByOutputType = {
    id: number
    number: string
    supplier: string | null
    status: string
    date: Date
    createdAt: Date
    _count: ReceiptCountAggregateOutputType | null
    _avg: ReceiptAvgAggregateOutputType | null
    _sum: ReceiptSumAggregateOutputType | null
    _min: ReceiptMinAggregateOutputType | null
    _max: ReceiptMaxAggregateOutputType | null
  }

  type GetReceiptGroupByPayload<T extends ReceiptGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReceiptGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReceiptGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReceiptGroupByOutputType[P]>
            : GetScalarType<T[P], ReceiptGroupByOutputType[P]>
        }
      >
    >


  export type ReceiptSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    supplier?: boolean
    status?: boolean
    date?: boolean
    createdAt?: boolean
    lines?: boolean | Receipt$linesArgs<ExtArgs>
    _count?: boolean | ReceiptCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receipt"]>


  export type ReceiptSelectScalar = {
    id?: boolean
    number?: boolean
    supplier?: boolean
    status?: boolean
    date?: boolean
    createdAt?: boolean
  }

  export type ReceiptInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lines?: boolean | Receipt$linesArgs<ExtArgs>
    _count?: boolean | ReceiptCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ReceiptPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Receipt"
    objects: {
      lines: Prisma.$ReceiptLinePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      number: string
      supplier: string | null
      status: string
      date: Date
      createdAt: Date
    }, ExtArgs["result"]["receipt"]>
    composites: {}
  }

  type ReceiptGetPayload<S extends boolean | null | undefined | ReceiptDefaultArgs> = $Result.GetResult<Prisma.$ReceiptPayload, S>

  type ReceiptCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReceiptFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReceiptCountAggregateInputType | true
    }

  export interface ReceiptDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Receipt'], meta: { name: 'Receipt' } }
    /**
     * Find zero or one Receipt that matches the filter.
     * @param {ReceiptFindUniqueArgs} args - Arguments to find a Receipt
     * @example
     * // Get one Receipt
     * const receipt = await prisma.receipt.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReceiptFindUniqueArgs>(args: SelectSubset<T, ReceiptFindUniqueArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Receipt that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReceiptFindUniqueOrThrowArgs} args - Arguments to find a Receipt
     * @example
     * // Get one Receipt
     * const receipt = await prisma.receipt.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReceiptFindUniqueOrThrowArgs>(args: SelectSubset<T, ReceiptFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Receipt that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptFindFirstArgs} args - Arguments to find a Receipt
     * @example
     * // Get one Receipt
     * const receipt = await prisma.receipt.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReceiptFindFirstArgs>(args?: SelectSubset<T, ReceiptFindFirstArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Receipt that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptFindFirstOrThrowArgs} args - Arguments to find a Receipt
     * @example
     * // Get one Receipt
     * const receipt = await prisma.receipt.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReceiptFindFirstOrThrowArgs>(args?: SelectSubset<T, ReceiptFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Receipts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Receipts
     * const receipts = await prisma.receipt.findMany()
     * 
     * // Get first 10 Receipts
     * const receipts = await prisma.receipt.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const receiptWithIdOnly = await prisma.receipt.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReceiptFindManyArgs>(args?: SelectSubset<T, ReceiptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Receipt.
     * @param {ReceiptCreateArgs} args - Arguments to create a Receipt.
     * @example
     * // Create one Receipt
     * const Receipt = await prisma.receipt.create({
     *   data: {
     *     // ... data to create a Receipt
     *   }
     * })
     * 
     */
    create<T extends ReceiptCreateArgs>(args: SelectSubset<T, ReceiptCreateArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Receipts.
     * @param {ReceiptCreateManyArgs} args - Arguments to create many Receipts.
     * @example
     * // Create many Receipts
     * const receipt = await prisma.receipt.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReceiptCreateManyArgs>(args?: SelectSubset<T, ReceiptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Receipt.
     * @param {ReceiptDeleteArgs} args - Arguments to delete one Receipt.
     * @example
     * // Delete one Receipt
     * const Receipt = await prisma.receipt.delete({
     *   where: {
     *     // ... filter to delete one Receipt
     *   }
     * })
     * 
     */
    delete<T extends ReceiptDeleteArgs>(args: SelectSubset<T, ReceiptDeleteArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Receipt.
     * @param {ReceiptUpdateArgs} args - Arguments to update one Receipt.
     * @example
     * // Update one Receipt
     * const receipt = await prisma.receipt.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReceiptUpdateArgs>(args: SelectSubset<T, ReceiptUpdateArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Receipts.
     * @param {ReceiptDeleteManyArgs} args - Arguments to filter Receipts to delete.
     * @example
     * // Delete a few Receipts
     * const { count } = await prisma.receipt.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReceiptDeleteManyArgs>(args?: SelectSubset<T, ReceiptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Receipts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Receipts
     * const receipt = await prisma.receipt.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReceiptUpdateManyArgs>(args: SelectSubset<T, ReceiptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Receipt.
     * @param {ReceiptUpsertArgs} args - Arguments to update or create a Receipt.
     * @example
     * // Update or create a Receipt
     * const receipt = await prisma.receipt.upsert({
     *   create: {
     *     // ... data to create a Receipt
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Receipt we want to update
     *   }
     * })
     */
    upsert<T extends ReceiptUpsertArgs>(args: SelectSubset<T, ReceiptUpsertArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Receipts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptCountArgs} args - Arguments to filter Receipts to count.
     * @example
     * // Count the number of Receipts
     * const count = await prisma.receipt.count({
     *   where: {
     *     // ... the filter for the Receipts we want to count
     *   }
     * })
    **/
    count<T extends ReceiptCountArgs>(
      args?: Subset<T, ReceiptCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReceiptCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Receipt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReceiptAggregateArgs>(args: Subset<T, ReceiptAggregateArgs>): Prisma.PrismaPromise<GetReceiptAggregateType<T>>

    /**
     * Group by Receipt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReceiptGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReceiptGroupByArgs['orderBy'] }
        : { orderBy?: ReceiptGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReceiptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReceiptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Receipt model
   */
  readonly fields: ReceiptFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Receipt.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReceiptClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lines<T extends Receipt$linesArgs<ExtArgs> = {}>(args?: Subset<T, Receipt$linesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptLinePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Receipt model
   */ 
  interface ReceiptFieldRefs {
    readonly id: FieldRef<"Receipt", 'Int'>
    readonly number: FieldRef<"Receipt", 'String'>
    readonly supplier: FieldRef<"Receipt", 'String'>
    readonly status: FieldRef<"Receipt", 'String'>
    readonly date: FieldRef<"Receipt", 'DateTime'>
    readonly createdAt: FieldRef<"Receipt", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Receipt findUnique
   */
  export type ReceiptFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * Filter, which Receipt to fetch.
     */
    where: ReceiptWhereUniqueInput
  }

  /**
   * Receipt findUniqueOrThrow
   */
  export type ReceiptFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * Filter, which Receipt to fetch.
     */
    where: ReceiptWhereUniqueInput
  }

  /**
   * Receipt findFirst
   */
  export type ReceiptFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * Filter, which Receipt to fetch.
     */
    where?: ReceiptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receipts to fetch.
     */
    orderBy?: ReceiptOrderByWithRelationInput | ReceiptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Receipts.
     */
    cursor?: ReceiptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Receipts.
     */
    distinct?: ReceiptScalarFieldEnum | ReceiptScalarFieldEnum[]
  }

  /**
   * Receipt findFirstOrThrow
   */
  export type ReceiptFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * Filter, which Receipt to fetch.
     */
    where?: ReceiptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receipts to fetch.
     */
    orderBy?: ReceiptOrderByWithRelationInput | ReceiptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Receipts.
     */
    cursor?: ReceiptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Receipts.
     */
    distinct?: ReceiptScalarFieldEnum | ReceiptScalarFieldEnum[]
  }

  /**
   * Receipt findMany
   */
  export type ReceiptFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * Filter, which Receipts to fetch.
     */
    where?: ReceiptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receipts to fetch.
     */
    orderBy?: ReceiptOrderByWithRelationInput | ReceiptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Receipts.
     */
    cursor?: ReceiptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receipts.
     */
    skip?: number
    distinct?: ReceiptScalarFieldEnum | ReceiptScalarFieldEnum[]
  }

  /**
   * Receipt create
   */
  export type ReceiptCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * The data needed to create a Receipt.
     */
    data: XOR<ReceiptCreateInput, ReceiptUncheckedCreateInput>
  }

  /**
   * Receipt createMany
   */
  export type ReceiptCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Receipts.
     */
    data: ReceiptCreateManyInput | ReceiptCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Receipt update
   */
  export type ReceiptUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * The data needed to update a Receipt.
     */
    data: XOR<ReceiptUpdateInput, ReceiptUncheckedUpdateInput>
    /**
     * Choose, which Receipt to update.
     */
    where: ReceiptWhereUniqueInput
  }

  /**
   * Receipt updateMany
   */
  export type ReceiptUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Receipts.
     */
    data: XOR<ReceiptUpdateManyMutationInput, ReceiptUncheckedUpdateManyInput>
    /**
     * Filter which Receipts to update
     */
    where?: ReceiptWhereInput
  }

  /**
   * Receipt upsert
   */
  export type ReceiptUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * The filter to search for the Receipt to update in case it exists.
     */
    where: ReceiptWhereUniqueInput
    /**
     * In case the Receipt found by the `where` argument doesn't exist, create a new Receipt with this data.
     */
    create: XOR<ReceiptCreateInput, ReceiptUncheckedCreateInput>
    /**
     * In case the Receipt was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReceiptUpdateInput, ReceiptUncheckedUpdateInput>
  }

  /**
   * Receipt delete
   */
  export type ReceiptDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * Filter which Receipt to delete.
     */
    where: ReceiptWhereUniqueInput
  }

  /**
   * Receipt deleteMany
   */
  export type ReceiptDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Receipts to delete
     */
    where?: ReceiptWhereInput
  }

  /**
   * Receipt.lines
   */
  export type Receipt$linesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptLine
     */
    select?: ReceiptLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptLineInclude<ExtArgs> | null
    where?: ReceiptLineWhereInput
    orderBy?: ReceiptLineOrderByWithRelationInput | ReceiptLineOrderByWithRelationInput[]
    cursor?: ReceiptLineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReceiptLineScalarFieldEnum | ReceiptLineScalarFieldEnum[]
  }

  /**
   * Receipt without action
   */
  export type ReceiptDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
  }


  /**
   * Model ReceiptLine
   */

  export type AggregateReceiptLine = {
    _count: ReceiptLineCountAggregateOutputType | null
    _avg: ReceiptLineAvgAggregateOutputType | null
    _sum: ReceiptLineSumAggregateOutputType | null
    _min: ReceiptLineMinAggregateOutputType | null
    _max: ReceiptLineMaxAggregateOutputType | null
  }

  export type ReceiptLineAvgAggregateOutputType = {
    id: number | null
    receiptId: number | null
    itemId: number | null
    locationId: number | null
    qty: number | null
  }

  export type ReceiptLineSumAggregateOutputType = {
    id: number | null
    receiptId: number | null
    itemId: number | null
    locationId: number | null
    qty: number | null
  }

  export type ReceiptLineMinAggregateOutputType = {
    id: number | null
    receiptId: number | null
    itemId: number | null
    locationId: number | null
    qty: number | null
  }

  export type ReceiptLineMaxAggregateOutputType = {
    id: number | null
    receiptId: number | null
    itemId: number | null
    locationId: number | null
    qty: number | null
  }

  export type ReceiptLineCountAggregateOutputType = {
    id: number
    receiptId: number
    itemId: number
    locationId: number
    qty: number
    _all: number
  }


  export type ReceiptLineAvgAggregateInputType = {
    id?: true
    receiptId?: true
    itemId?: true
    locationId?: true
    qty?: true
  }

  export type ReceiptLineSumAggregateInputType = {
    id?: true
    receiptId?: true
    itemId?: true
    locationId?: true
    qty?: true
  }

  export type ReceiptLineMinAggregateInputType = {
    id?: true
    receiptId?: true
    itemId?: true
    locationId?: true
    qty?: true
  }

  export type ReceiptLineMaxAggregateInputType = {
    id?: true
    receiptId?: true
    itemId?: true
    locationId?: true
    qty?: true
  }

  export type ReceiptLineCountAggregateInputType = {
    id?: true
    receiptId?: true
    itemId?: true
    locationId?: true
    qty?: true
    _all?: true
  }

  export type ReceiptLineAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReceiptLine to aggregate.
     */
    where?: ReceiptLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptLines to fetch.
     */
    orderBy?: ReceiptLineOrderByWithRelationInput | ReceiptLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReceiptLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptLines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReceiptLines
    **/
    _count?: true | ReceiptLineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReceiptLineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReceiptLineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReceiptLineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReceiptLineMaxAggregateInputType
  }

  export type GetReceiptLineAggregateType<T extends ReceiptLineAggregateArgs> = {
        [P in keyof T & keyof AggregateReceiptLine]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReceiptLine[P]>
      : GetScalarType<T[P], AggregateReceiptLine[P]>
  }




  export type ReceiptLineGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceiptLineWhereInput
    orderBy?: ReceiptLineOrderByWithAggregationInput | ReceiptLineOrderByWithAggregationInput[]
    by: ReceiptLineScalarFieldEnum[] | ReceiptLineScalarFieldEnum
    having?: ReceiptLineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReceiptLineCountAggregateInputType | true
    _avg?: ReceiptLineAvgAggregateInputType
    _sum?: ReceiptLineSumAggregateInputType
    _min?: ReceiptLineMinAggregateInputType
    _max?: ReceiptLineMaxAggregateInputType
  }

  export type ReceiptLineGroupByOutputType = {
    id: number
    receiptId: number
    itemId: number
    locationId: number
    qty: number
    _count: ReceiptLineCountAggregateOutputType | null
    _avg: ReceiptLineAvgAggregateOutputType | null
    _sum: ReceiptLineSumAggregateOutputType | null
    _min: ReceiptLineMinAggregateOutputType | null
    _max: ReceiptLineMaxAggregateOutputType | null
  }

  type GetReceiptLineGroupByPayload<T extends ReceiptLineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReceiptLineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReceiptLineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReceiptLineGroupByOutputType[P]>
            : GetScalarType<T[P], ReceiptLineGroupByOutputType[P]>
        }
      >
    >


  export type ReceiptLineSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    receiptId?: boolean
    itemId?: boolean
    locationId?: boolean
    qty?: boolean
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
    item?: boolean | ItemDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receiptLine"]>


  export type ReceiptLineSelectScalar = {
    id?: boolean
    receiptId?: boolean
    itemId?: boolean
    locationId?: boolean
    qty?: boolean
  }

  export type ReceiptLineInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
    item?: boolean | ItemDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }

  export type $ReceiptLinePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReceiptLine"
    objects: {
      receipt: Prisma.$ReceiptPayload<ExtArgs>
      item: Prisma.$ItemPayload<ExtArgs>
      location: Prisma.$LocationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      receiptId: number
      itemId: number
      locationId: number
      qty: number
    }, ExtArgs["result"]["receiptLine"]>
    composites: {}
  }

  type ReceiptLineGetPayload<S extends boolean | null | undefined | ReceiptLineDefaultArgs> = $Result.GetResult<Prisma.$ReceiptLinePayload, S>

  type ReceiptLineCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReceiptLineFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReceiptLineCountAggregateInputType | true
    }

  export interface ReceiptLineDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReceiptLine'], meta: { name: 'ReceiptLine' } }
    /**
     * Find zero or one ReceiptLine that matches the filter.
     * @param {ReceiptLineFindUniqueArgs} args - Arguments to find a ReceiptLine
     * @example
     * // Get one ReceiptLine
     * const receiptLine = await prisma.receiptLine.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReceiptLineFindUniqueArgs>(args: SelectSubset<T, ReceiptLineFindUniqueArgs<ExtArgs>>): Prisma__ReceiptLineClient<$Result.GetResult<Prisma.$ReceiptLinePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ReceiptLine that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReceiptLineFindUniqueOrThrowArgs} args - Arguments to find a ReceiptLine
     * @example
     * // Get one ReceiptLine
     * const receiptLine = await prisma.receiptLine.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReceiptLineFindUniqueOrThrowArgs>(args: SelectSubset<T, ReceiptLineFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReceiptLineClient<$Result.GetResult<Prisma.$ReceiptLinePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ReceiptLine that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptLineFindFirstArgs} args - Arguments to find a ReceiptLine
     * @example
     * // Get one ReceiptLine
     * const receiptLine = await prisma.receiptLine.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReceiptLineFindFirstArgs>(args?: SelectSubset<T, ReceiptLineFindFirstArgs<ExtArgs>>): Prisma__ReceiptLineClient<$Result.GetResult<Prisma.$ReceiptLinePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ReceiptLine that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptLineFindFirstOrThrowArgs} args - Arguments to find a ReceiptLine
     * @example
     * // Get one ReceiptLine
     * const receiptLine = await prisma.receiptLine.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReceiptLineFindFirstOrThrowArgs>(args?: SelectSubset<T, ReceiptLineFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReceiptLineClient<$Result.GetResult<Prisma.$ReceiptLinePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ReceiptLines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptLineFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReceiptLines
     * const receiptLines = await prisma.receiptLine.findMany()
     * 
     * // Get first 10 ReceiptLines
     * const receiptLines = await prisma.receiptLine.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const receiptLineWithIdOnly = await prisma.receiptLine.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReceiptLineFindManyArgs>(args?: SelectSubset<T, ReceiptLineFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptLinePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ReceiptLine.
     * @param {ReceiptLineCreateArgs} args - Arguments to create a ReceiptLine.
     * @example
     * // Create one ReceiptLine
     * const ReceiptLine = await prisma.receiptLine.create({
     *   data: {
     *     // ... data to create a ReceiptLine
     *   }
     * })
     * 
     */
    create<T extends ReceiptLineCreateArgs>(args: SelectSubset<T, ReceiptLineCreateArgs<ExtArgs>>): Prisma__ReceiptLineClient<$Result.GetResult<Prisma.$ReceiptLinePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ReceiptLines.
     * @param {ReceiptLineCreateManyArgs} args - Arguments to create many ReceiptLines.
     * @example
     * // Create many ReceiptLines
     * const receiptLine = await prisma.receiptLine.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReceiptLineCreateManyArgs>(args?: SelectSubset<T, ReceiptLineCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ReceiptLine.
     * @param {ReceiptLineDeleteArgs} args - Arguments to delete one ReceiptLine.
     * @example
     * // Delete one ReceiptLine
     * const ReceiptLine = await prisma.receiptLine.delete({
     *   where: {
     *     // ... filter to delete one ReceiptLine
     *   }
     * })
     * 
     */
    delete<T extends ReceiptLineDeleteArgs>(args: SelectSubset<T, ReceiptLineDeleteArgs<ExtArgs>>): Prisma__ReceiptLineClient<$Result.GetResult<Prisma.$ReceiptLinePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ReceiptLine.
     * @param {ReceiptLineUpdateArgs} args - Arguments to update one ReceiptLine.
     * @example
     * // Update one ReceiptLine
     * const receiptLine = await prisma.receiptLine.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReceiptLineUpdateArgs>(args: SelectSubset<T, ReceiptLineUpdateArgs<ExtArgs>>): Prisma__ReceiptLineClient<$Result.GetResult<Prisma.$ReceiptLinePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ReceiptLines.
     * @param {ReceiptLineDeleteManyArgs} args - Arguments to filter ReceiptLines to delete.
     * @example
     * // Delete a few ReceiptLines
     * const { count } = await prisma.receiptLine.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReceiptLineDeleteManyArgs>(args?: SelectSubset<T, ReceiptLineDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReceiptLines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptLineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReceiptLines
     * const receiptLine = await prisma.receiptLine.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReceiptLineUpdateManyArgs>(args: SelectSubset<T, ReceiptLineUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ReceiptLine.
     * @param {ReceiptLineUpsertArgs} args - Arguments to update or create a ReceiptLine.
     * @example
     * // Update or create a ReceiptLine
     * const receiptLine = await prisma.receiptLine.upsert({
     *   create: {
     *     // ... data to create a ReceiptLine
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReceiptLine we want to update
     *   }
     * })
     */
    upsert<T extends ReceiptLineUpsertArgs>(args: SelectSubset<T, ReceiptLineUpsertArgs<ExtArgs>>): Prisma__ReceiptLineClient<$Result.GetResult<Prisma.$ReceiptLinePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ReceiptLines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptLineCountArgs} args - Arguments to filter ReceiptLines to count.
     * @example
     * // Count the number of ReceiptLines
     * const count = await prisma.receiptLine.count({
     *   where: {
     *     // ... the filter for the ReceiptLines we want to count
     *   }
     * })
    **/
    count<T extends ReceiptLineCountArgs>(
      args?: Subset<T, ReceiptLineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReceiptLineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReceiptLine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptLineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReceiptLineAggregateArgs>(args: Subset<T, ReceiptLineAggregateArgs>): Prisma.PrismaPromise<GetReceiptLineAggregateType<T>>

    /**
     * Group by ReceiptLine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptLineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReceiptLineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReceiptLineGroupByArgs['orderBy'] }
        : { orderBy?: ReceiptLineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReceiptLineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReceiptLineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReceiptLine model
   */
  readonly fields: ReceiptLineFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReceiptLine.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReceiptLineClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    receipt<T extends ReceiptDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReceiptDefaultArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    item<T extends ItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ItemDefaultArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    location<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReceiptLine model
   */ 
  interface ReceiptLineFieldRefs {
    readonly id: FieldRef<"ReceiptLine", 'Int'>
    readonly receiptId: FieldRef<"ReceiptLine", 'Int'>
    readonly itemId: FieldRef<"ReceiptLine", 'Int'>
    readonly locationId: FieldRef<"ReceiptLine", 'Int'>
    readonly qty: FieldRef<"ReceiptLine", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ReceiptLine findUnique
   */
  export type ReceiptLineFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptLine
     */
    select?: ReceiptLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptLineInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptLine to fetch.
     */
    where: ReceiptLineWhereUniqueInput
  }

  /**
   * ReceiptLine findUniqueOrThrow
   */
  export type ReceiptLineFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptLine
     */
    select?: ReceiptLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptLineInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptLine to fetch.
     */
    where: ReceiptLineWhereUniqueInput
  }

  /**
   * ReceiptLine findFirst
   */
  export type ReceiptLineFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptLine
     */
    select?: ReceiptLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptLineInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptLine to fetch.
     */
    where?: ReceiptLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptLines to fetch.
     */
    orderBy?: ReceiptLineOrderByWithRelationInput | ReceiptLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReceiptLines.
     */
    cursor?: ReceiptLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptLines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReceiptLines.
     */
    distinct?: ReceiptLineScalarFieldEnum | ReceiptLineScalarFieldEnum[]
  }

  /**
   * ReceiptLine findFirstOrThrow
   */
  export type ReceiptLineFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptLine
     */
    select?: ReceiptLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptLineInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptLine to fetch.
     */
    where?: ReceiptLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptLines to fetch.
     */
    orderBy?: ReceiptLineOrderByWithRelationInput | ReceiptLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReceiptLines.
     */
    cursor?: ReceiptLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptLines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReceiptLines.
     */
    distinct?: ReceiptLineScalarFieldEnum | ReceiptLineScalarFieldEnum[]
  }

  /**
   * ReceiptLine findMany
   */
  export type ReceiptLineFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptLine
     */
    select?: ReceiptLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptLineInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptLines to fetch.
     */
    where?: ReceiptLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptLines to fetch.
     */
    orderBy?: ReceiptLineOrderByWithRelationInput | ReceiptLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReceiptLines.
     */
    cursor?: ReceiptLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptLines.
     */
    skip?: number
    distinct?: ReceiptLineScalarFieldEnum | ReceiptLineScalarFieldEnum[]
  }

  /**
   * ReceiptLine create
   */
  export type ReceiptLineCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptLine
     */
    select?: ReceiptLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptLineInclude<ExtArgs> | null
    /**
     * The data needed to create a ReceiptLine.
     */
    data: XOR<ReceiptLineCreateInput, ReceiptLineUncheckedCreateInput>
  }

  /**
   * ReceiptLine createMany
   */
  export type ReceiptLineCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReceiptLines.
     */
    data: ReceiptLineCreateManyInput | ReceiptLineCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReceiptLine update
   */
  export type ReceiptLineUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptLine
     */
    select?: ReceiptLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptLineInclude<ExtArgs> | null
    /**
     * The data needed to update a ReceiptLine.
     */
    data: XOR<ReceiptLineUpdateInput, ReceiptLineUncheckedUpdateInput>
    /**
     * Choose, which ReceiptLine to update.
     */
    where: ReceiptLineWhereUniqueInput
  }

  /**
   * ReceiptLine updateMany
   */
  export type ReceiptLineUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReceiptLines.
     */
    data: XOR<ReceiptLineUpdateManyMutationInput, ReceiptLineUncheckedUpdateManyInput>
    /**
     * Filter which ReceiptLines to update
     */
    where?: ReceiptLineWhereInput
  }

  /**
   * ReceiptLine upsert
   */
  export type ReceiptLineUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptLine
     */
    select?: ReceiptLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptLineInclude<ExtArgs> | null
    /**
     * The filter to search for the ReceiptLine to update in case it exists.
     */
    where: ReceiptLineWhereUniqueInput
    /**
     * In case the ReceiptLine found by the `where` argument doesn't exist, create a new ReceiptLine with this data.
     */
    create: XOR<ReceiptLineCreateInput, ReceiptLineUncheckedCreateInput>
    /**
     * In case the ReceiptLine was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReceiptLineUpdateInput, ReceiptLineUncheckedUpdateInput>
  }

  /**
   * ReceiptLine delete
   */
  export type ReceiptLineDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptLine
     */
    select?: ReceiptLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptLineInclude<ExtArgs> | null
    /**
     * Filter which ReceiptLine to delete.
     */
    where: ReceiptLineWhereUniqueInput
  }

  /**
   * ReceiptLine deleteMany
   */
  export type ReceiptLineDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReceiptLines to delete
     */
    where?: ReceiptLineWhereInput
  }

  /**
   * ReceiptLine without action
   */
  export type ReceiptLineDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptLine
     */
    select?: ReceiptLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptLineInclude<ExtArgs> | null
  }


  /**
   * Model Dispatch
   */

  export type AggregateDispatch = {
    _count: DispatchCountAggregateOutputType | null
    _avg: DispatchAvgAggregateOutputType | null
    _sum: DispatchSumAggregateOutputType | null
    _min: DispatchMinAggregateOutputType | null
    _max: DispatchMaxAggregateOutputType | null
  }

  export type DispatchAvgAggregateOutputType = {
    id: number | null
  }

  export type DispatchSumAggregateOutputType = {
    id: number | null
  }

  export type DispatchMinAggregateOutputType = {
    id: number | null
    number: string | null
    customer: string | null
    status: string | null
    date: Date | null
    createdAt: Date | null
  }

  export type DispatchMaxAggregateOutputType = {
    id: number | null
    number: string | null
    customer: string | null
    status: string | null
    date: Date | null
    createdAt: Date | null
  }

  export type DispatchCountAggregateOutputType = {
    id: number
    number: number
    customer: number
    status: number
    date: number
    createdAt: number
    _all: number
  }


  export type DispatchAvgAggregateInputType = {
    id?: true
  }

  export type DispatchSumAggregateInputType = {
    id?: true
  }

  export type DispatchMinAggregateInputType = {
    id?: true
    number?: true
    customer?: true
    status?: true
    date?: true
    createdAt?: true
  }

  export type DispatchMaxAggregateInputType = {
    id?: true
    number?: true
    customer?: true
    status?: true
    date?: true
    createdAt?: true
  }

  export type DispatchCountAggregateInputType = {
    id?: true
    number?: true
    customer?: true
    status?: true
    date?: true
    createdAt?: true
    _all?: true
  }

  export type DispatchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dispatch to aggregate.
     */
    where?: DispatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dispatches to fetch.
     */
    orderBy?: DispatchOrderByWithRelationInput | DispatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DispatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dispatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dispatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Dispatches
    **/
    _count?: true | DispatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DispatchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DispatchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DispatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DispatchMaxAggregateInputType
  }

  export type GetDispatchAggregateType<T extends DispatchAggregateArgs> = {
        [P in keyof T & keyof AggregateDispatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDispatch[P]>
      : GetScalarType<T[P], AggregateDispatch[P]>
  }




  export type DispatchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DispatchWhereInput
    orderBy?: DispatchOrderByWithAggregationInput | DispatchOrderByWithAggregationInput[]
    by: DispatchScalarFieldEnum[] | DispatchScalarFieldEnum
    having?: DispatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DispatchCountAggregateInputType | true
    _avg?: DispatchAvgAggregateInputType
    _sum?: DispatchSumAggregateInputType
    _min?: DispatchMinAggregateInputType
    _max?: DispatchMaxAggregateInputType
  }

  export type DispatchGroupByOutputType = {
    id: number
    number: string
    customer: string | null
    status: string
    date: Date
    createdAt: Date
    _count: DispatchCountAggregateOutputType | null
    _avg: DispatchAvgAggregateOutputType | null
    _sum: DispatchSumAggregateOutputType | null
    _min: DispatchMinAggregateOutputType | null
    _max: DispatchMaxAggregateOutputType | null
  }

  type GetDispatchGroupByPayload<T extends DispatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DispatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DispatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DispatchGroupByOutputType[P]>
            : GetScalarType<T[P], DispatchGroupByOutputType[P]>
        }
      >
    >


  export type DispatchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    customer?: boolean
    status?: boolean
    date?: boolean
    createdAt?: boolean
    lines?: boolean | Dispatch$linesArgs<ExtArgs>
    _count?: boolean | DispatchCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dispatch"]>


  export type DispatchSelectScalar = {
    id?: boolean
    number?: boolean
    customer?: boolean
    status?: boolean
    date?: boolean
    createdAt?: boolean
  }

  export type DispatchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lines?: boolean | Dispatch$linesArgs<ExtArgs>
    _count?: boolean | DispatchCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $DispatchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Dispatch"
    objects: {
      lines: Prisma.$DispatchLinePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      number: string
      customer: string | null
      status: string
      date: Date
      createdAt: Date
    }, ExtArgs["result"]["dispatch"]>
    composites: {}
  }

  type DispatchGetPayload<S extends boolean | null | undefined | DispatchDefaultArgs> = $Result.GetResult<Prisma.$DispatchPayload, S>

  type DispatchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DispatchFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DispatchCountAggregateInputType | true
    }

  export interface DispatchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Dispatch'], meta: { name: 'Dispatch' } }
    /**
     * Find zero or one Dispatch that matches the filter.
     * @param {DispatchFindUniqueArgs} args - Arguments to find a Dispatch
     * @example
     * // Get one Dispatch
     * const dispatch = await prisma.dispatch.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DispatchFindUniqueArgs>(args: SelectSubset<T, DispatchFindUniqueArgs<ExtArgs>>): Prisma__DispatchClient<$Result.GetResult<Prisma.$DispatchPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Dispatch that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DispatchFindUniqueOrThrowArgs} args - Arguments to find a Dispatch
     * @example
     * // Get one Dispatch
     * const dispatch = await prisma.dispatch.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DispatchFindUniqueOrThrowArgs>(args: SelectSubset<T, DispatchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DispatchClient<$Result.GetResult<Prisma.$DispatchPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Dispatch that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispatchFindFirstArgs} args - Arguments to find a Dispatch
     * @example
     * // Get one Dispatch
     * const dispatch = await prisma.dispatch.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DispatchFindFirstArgs>(args?: SelectSubset<T, DispatchFindFirstArgs<ExtArgs>>): Prisma__DispatchClient<$Result.GetResult<Prisma.$DispatchPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Dispatch that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispatchFindFirstOrThrowArgs} args - Arguments to find a Dispatch
     * @example
     * // Get one Dispatch
     * const dispatch = await prisma.dispatch.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DispatchFindFirstOrThrowArgs>(args?: SelectSubset<T, DispatchFindFirstOrThrowArgs<ExtArgs>>): Prisma__DispatchClient<$Result.GetResult<Prisma.$DispatchPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Dispatches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispatchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dispatches
     * const dispatches = await prisma.dispatch.findMany()
     * 
     * // Get first 10 Dispatches
     * const dispatches = await prisma.dispatch.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dispatchWithIdOnly = await prisma.dispatch.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DispatchFindManyArgs>(args?: SelectSubset<T, DispatchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DispatchPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Dispatch.
     * @param {DispatchCreateArgs} args - Arguments to create a Dispatch.
     * @example
     * // Create one Dispatch
     * const Dispatch = await prisma.dispatch.create({
     *   data: {
     *     // ... data to create a Dispatch
     *   }
     * })
     * 
     */
    create<T extends DispatchCreateArgs>(args: SelectSubset<T, DispatchCreateArgs<ExtArgs>>): Prisma__DispatchClient<$Result.GetResult<Prisma.$DispatchPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Dispatches.
     * @param {DispatchCreateManyArgs} args - Arguments to create many Dispatches.
     * @example
     * // Create many Dispatches
     * const dispatch = await prisma.dispatch.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DispatchCreateManyArgs>(args?: SelectSubset<T, DispatchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Dispatch.
     * @param {DispatchDeleteArgs} args - Arguments to delete one Dispatch.
     * @example
     * // Delete one Dispatch
     * const Dispatch = await prisma.dispatch.delete({
     *   where: {
     *     // ... filter to delete one Dispatch
     *   }
     * })
     * 
     */
    delete<T extends DispatchDeleteArgs>(args: SelectSubset<T, DispatchDeleteArgs<ExtArgs>>): Prisma__DispatchClient<$Result.GetResult<Prisma.$DispatchPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Dispatch.
     * @param {DispatchUpdateArgs} args - Arguments to update one Dispatch.
     * @example
     * // Update one Dispatch
     * const dispatch = await prisma.dispatch.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DispatchUpdateArgs>(args: SelectSubset<T, DispatchUpdateArgs<ExtArgs>>): Prisma__DispatchClient<$Result.GetResult<Prisma.$DispatchPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Dispatches.
     * @param {DispatchDeleteManyArgs} args - Arguments to filter Dispatches to delete.
     * @example
     * // Delete a few Dispatches
     * const { count } = await prisma.dispatch.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DispatchDeleteManyArgs>(args?: SelectSubset<T, DispatchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dispatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dispatches
     * const dispatch = await prisma.dispatch.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DispatchUpdateManyArgs>(args: SelectSubset<T, DispatchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Dispatch.
     * @param {DispatchUpsertArgs} args - Arguments to update or create a Dispatch.
     * @example
     * // Update or create a Dispatch
     * const dispatch = await prisma.dispatch.upsert({
     *   create: {
     *     // ... data to create a Dispatch
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dispatch we want to update
     *   }
     * })
     */
    upsert<T extends DispatchUpsertArgs>(args: SelectSubset<T, DispatchUpsertArgs<ExtArgs>>): Prisma__DispatchClient<$Result.GetResult<Prisma.$DispatchPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Dispatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispatchCountArgs} args - Arguments to filter Dispatches to count.
     * @example
     * // Count the number of Dispatches
     * const count = await prisma.dispatch.count({
     *   where: {
     *     // ... the filter for the Dispatches we want to count
     *   }
     * })
    **/
    count<T extends DispatchCountArgs>(
      args?: Subset<T, DispatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DispatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dispatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DispatchAggregateArgs>(args: Subset<T, DispatchAggregateArgs>): Prisma.PrismaPromise<GetDispatchAggregateType<T>>

    /**
     * Group by Dispatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DispatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DispatchGroupByArgs['orderBy'] }
        : { orderBy?: DispatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DispatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDispatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Dispatch model
   */
  readonly fields: DispatchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Dispatch.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DispatchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lines<T extends Dispatch$linesArgs<ExtArgs> = {}>(args?: Subset<T, Dispatch$linesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DispatchLinePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Dispatch model
   */ 
  interface DispatchFieldRefs {
    readonly id: FieldRef<"Dispatch", 'Int'>
    readonly number: FieldRef<"Dispatch", 'String'>
    readonly customer: FieldRef<"Dispatch", 'String'>
    readonly status: FieldRef<"Dispatch", 'String'>
    readonly date: FieldRef<"Dispatch", 'DateTime'>
    readonly createdAt: FieldRef<"Dispatch", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Dispatch findUnique
   */
  export type DispatchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dispatch
     */
    select?: DispatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispatchInclude<ExtArgs> | null
    /**
     * Filter, which Dispatch to fetch.
     */
    where: DispatchWhereUniqueInput
  }

  /**
   * Dispatch findUniqueOrThrow
   */
  export type DispatchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dispatch
     */
    select?: DispatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispatchInclude<ExtArgs> | null
    /**
     * Filter, which Dispatch to fetch.
     */
    where: DispatchWhereUniqueInput
  }

  /**
   * Dispatch findFirst
   */
  export type DispatchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dispatch
     */
    select?: DispatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispatchInclude<ExtArgs> | null
    /**
     * Filter, which Dispatch to fetch.
     */
    where?: DispatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dispatches to fetch.
     */
    orderBy?: DispatchOrderByWithRelationInput | DispatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dispatches.
     */
    cursor?: DispatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dispatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dispatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dispatches.
     */
    distinct?: DispatchScalarFieldEnum | DispatchScalarFieldEnum[]
  }

  /**
   * Dispatch findFirstOrThrow
   */
  export type DispatchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dispatch
     */
    select?: DispatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispatchInclude<ExtArgs> | null
    /**
     * Filter, which Dispatch to fetch.
     */
    where?: DispatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dispatches to fetch.
     */
    orderBy?: DispatchOrderByWithRelationInput | DispatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dispatches.
     */
    cursor?: DispatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dispatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dispatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dispatches.
     */
    distinct?: DispatchScalarFieldEnum | DispatchScalarFieldEnum[]
  }

  /**
   * Dispatch findMany
   */
  export type DispatchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dispatch
     */
    select?: DispatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispatchInclude<ExtArgs> | null
    /**
     * Filter, which Dispatches to fetch.
     */
    where?: DispatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dispatches to fetch.
     */
    orderBy?: DispatchOrderByWithRelationInput | DispatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Dispatches.
     */
    cursor?: DispatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dispatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dispatches.
     */
    skip?: number
    distinct?: DispatchScalarFieldEnum | DispatchScalarFieldEnum[]
  }

  /**
   * Dispatch create
   */
  export type DispatchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dispatch
     */
    select?: DispatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispatchInclude<ExtArgs> | null
    /**
     * The data needed to create a Dispatch.
     */
    data: XOR<DispatchCreateInput, DispatchUncheckedCreateInput>
  }

  /**
   * Dispatch createMany
   */
  export type DispatchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Dispatches.
     */
    data: DispatchCreateManyInput | DispatchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Dispatch update
   */
  export type DispatchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dispatch
     */
    select?: DispatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispatchInclude<ExtArgs> | null
    /**
     * The data needed to update a Dispatch.
     */
    data: XOR<DispatchUpdateInput, DispatchUncheckedUpdateInput>
    /**
     * Choose, which Dispatch to update.
     */
    where: DispatchWhereUniqueInput
  }

  /**
   * Dispatch updateMany
   */
  export type DispatchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Dispatches.
     */
    data: XOR<DispatchUpdateManyMutationInput, DispatchUncheckedUpdateManyInput>
    /**
     * Filter which Dispatches to update
     */
    where?: DispatchWhereInput
  }

  /**
   * Dispatch upsert
   */
  export type DispatchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dispatch
     */
    select?: DispatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispatchInclude<ExtArgs> | null
    /**
     * The filter to search for the Dispatch to update in case it exists.
     */
    where: DispatchWhereUniqueInput
    /**
     * In case the Dispatch found by the `where` argument doesn't exist, create a new Dispatch with this data.
     */
    create: XOR<DispatchCreateInput, DispatchUncheckedCreateInput>
    /**
     * In case the Dispatch was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DispatchUpdateInput, DispatchUncheckedUpdateInput>
  }

  /**
   * Dispatch delete
   */
  export type DispatchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dispatch
     */
    select?: DispatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispatchInclude<ExtArgs> | null
    /**
     * Filter which Dispatch to delete.
     */
    where: DispatchWhereUniqueInput
  }

  /**
   * Dispatch deleteMany
   */
  export type DispatchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dispatches to delete
     */
    where?: DispatchWhereInput
  }

  /**
   * Dispatch.lines
   */
  export type Dispatch$linesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DispatchLine
     */
    select?: DispatchLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispatchLineInclude<ExtArgs> | null
    where?: DispatchLineWhereInput
    orderBy?: DispatchLineOrderByWithRelationInput | DispatchLineOrderByWithRelationInput[]
    cursor?: DispatchLineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DispatchLineScalarFieldEnum | DispatchLineScalarFieldEnum[]
  }

  /**
   * Dispatch without action
   */
  export type DispatchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dispatch
     */
    select?: DispatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispatchInclude<ExtArgs> | null
  }


  /**
   * Model DispatchLine
   */

  export type AggregateDispatchLine = {
    _count: DispatchLineCountAggregateOutputType | null
    _avg: DispatchLineAvgAggregateOutputType | null
    _sum: DispatchLineSumAggregateOutputType | null
    _min: DispatchLineMinAggregateOutputType | null
    _max: DispatchLineMaxAggregateOutputType | null
  }

  export type DispatchLineAvgAggregateOutputType = {
    id: number | null
    dispatchId: number | null
    itemId: number | null
    locationId: number | null
    qty: number | null
  }

  export type DispatchLineSumAggregateOutputType = {
    id: number | null
    dispatchId: number | null
    itemId: number | null
    locationId: number | null
    qty: number | null
  }

  export type DispatchLineMinAggregateOutputType = {
    id: number | null
    dispatchId: number | null
    itemId: number | null
    locationId: number | null
    qty: number | null
  }

  export type DispatchLineMaxAggregateOutputType = {
    id: number | null
    dispatchId: number | null
    itemId: number | null
    locationId: number | null
    qty: number | null
  }

  export type DispatchLineCountAggregateOutputType = {
    id: number
    dispatchId: number
    itemId: number
    locationId: number
    qty: number
    _all: number
  }


  export type DispatchLineAvgAggregateInputType = {
    id?: true
    dispatchId?: true
    itemId?: true
    locationId?: true
    qty?: true
  }

  export type DispatchLineSumAggregateInputType = {
    id?: true
    dispatchId?: true
    itemId?: true
    locationId?: true
    qty?: true
  }

  export type DispatchLineMinAggregateInputType = {
    id?: true
    dispatchId?: true
    itemId?: true
    locationId?: true
    qty?: true
  }

  export type DispatchLineMaxAggregateInputType = {
    id?: true
    dispatchId?: true
    itemId?: true
    locationId?: true
    qty?: true
  }

  export type DispatchLineCountAggregateInputType = {
    id?: true
    dispatchId?: true
    itemId?: true
    locationId?: true
    qty?: true
    _all?: true
  }

  export type DispatchLineAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DispatchLine to aggregate.
     */
    where?: DispatchLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DispatchLines to fetch.
     */
    orderBy?: DispatchLineOrderByWithRelationInput | DispatchLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DispatchLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DispatchLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DispatchLines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DispatchLines
    **/
    _count?: true | DispatchLineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DispatchLineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DispatchLineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DispatchLineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DispatchLineMaxAggregateInputType
  }

  export type GetDispatchLineAggregateType<T extends DispatchLineAggregateArgs> = {
        [P in keyof T & keyof AggregateDispatchLine]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDispatchLine[P]>
      : GetScalarType<T[P], AggregateDispatchLine[P]>
  }




  export type DispatchLineGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DispatchLineWhereInput
    orderBy?: DispatchLineOrderByWithAggregationInput | DispatchLineOrderByWithAggregationInput[]
    by: DispatchLineScalarFieldEnum[] | DispatchLineScalarFieldEnum
    having?: DispatchLineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DispatchLineCountAggregateInputType | true
    _avg?: DispatchLineAvgAggregateInputType
    _sum?: DispatchLineSumAggregateInputType
    _min?: DispatchLineMinAggregateInputType
    _max?: DispatchLineMaxAggregateInputType
  }

  export type DispatchLineGroupByOutputType = {
    id: number
    dispatchId: number
    itemId: number
    locationId: number
    qty: number
    _count: DispatchLineCountAggregateOutputType | null
    _avg: DispatchLineAvgAggregateOutputType | null
    _sum: DispatchLineSumAggregateOutputType | null
    _min: DispatchLineMinAggregateOutputType | null
    _max: DispatchLineMaxAggregateOutputType | null
  }

  type GetDispatchLineGroupByPayload<T extends DispatchLineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DispatchLineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DispatchLineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DispatchLineGroupByOutputType[P]>
            : GetScalarType<T[P], DispatchLineGroupByOutputType[P]>
        }
      >
    >


  export type DispatchLineSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dispatchId?: boolean
    itemId?: boolean
    locationId?: boolean
    qty?: boolean
    dispatch?: boolean | DispatchDefaultArgs<ExtArgs>
    item?: boolean | ItemDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dispatchLine"]>


  export type DispatchLineSelectScalar = {
    id?: boolean
    dispatchId?: boolean
    itemId?: boolean
    locationId?: boolean
    qty?: boolean
  }

  export type DispatchLineInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dispatch?: boolean | DispatchDefaultArgs<ExtArgs>
    item?: boolean | ItemDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }

  export type $DispatchLinePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DispatchLine"
    objects: {
      dispatch: Prisma.$DispatchPayload<ExtArgs>
      item: Prisma.$ItemPayload<ExtArgs>
      location: Prisma.$LocationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      dispatchId: number
      itemId: number
      locationId: number
      qty: number
    }, ExtArgs["result"]["dispatchLine"]>
    composites: {}
  }

  type DispatchLineGetPayload<S extends boolean | null | undefined | DispatchLineDefaultArgs> = $Result.GetResult<Prisma.$DispatchLinePayload, S>

  type DispatchLineCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DispatchLineFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DispatchLineCountAggregateInputType | true
    }

  export interface DispatchLineDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DispatchLine'], meta: { name: 'DispatchLine' } }
    /**
     * Find zero or one DispatchLine that matches the filter.
     * @param {DispatchLineFindUniqueArgs} args - Arguments to find a DispatchLine
     * @example
     * // Get one DispatchLine
     * const dispatchLine = await prisma.dispatchLine.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DispatchLineFindUniqueArgs>(args: SelectSubset<T, DispatchLineFindUniqueArgs<ExtArgs>>): Prisma__DispatchLineClient<$Result.GetResult<Prisma.$DispatchLinePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DispatchLine that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DispatchLineFindUniqueOrThrowArgs} args - Arguments to find a DispatchLine
     * @example
     * // Get one DispatchLine
     * const dispatchLine = await prisma.dispatchLine.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DispatchLineFindUniqueOrThrowArgs>(args: SelectSubset<T, DispatchLineFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DispatchLineClient<$Result.GetResult<Prisma.$DispatchLinePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DispatchLine that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispatchLineFindFirstArgs} args - Arguments to find a DispatchLine
     * @example
     * // Get one DispatchLine
     * const dispatchLine = await prisma.dispatchLine.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DispatchLineFindFirstArgs>(args?: SelectSubset<T, DispatchLineFindFirstArgs<ExtArgs>>): Prisma__DispatchLineClient<$Result.GetResult<Prisma.$DispatchLinePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DispatchLine that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispatchLineFindFirstOrThrowArgs} args - Arguments to find a DispatchLine
     * @example
     * // Get one DispatchLine
     * const dispatchLine = await prisma.dispatchLine.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DispatchLineFindFirstOrThrowArgs>(args?: SelectSubset<T, DispatchLineFindFirstOrThrowArgs<ExtArgs>>): Prisma__DispatchLineClient<$Result.GetResult<Prisma.$DispatchLinePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DispatchLines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispatchLineFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DispatchLines
     * const dispatchLines = await prisma.dispatchLine.findMany()
     * 
     * // Get first 10 DispatchLines
     * const dispatchLines = await prisma.dispatchLine.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dispatchLineWithIdOnly = await prisma.dispatchLine.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DispatchLineFindManyArgs>(args?: SelectSubset<T, DispatchLineFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DispatchLinePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DispatchLine.
     * @param {DispatchLineCreateArgs} args - Arguments to create a DispatchLine.
     * @example
     * // Create one DispatchLine
     * const DispatchLine = await prisma.dispatchLine.create({
     *   data: {
     *     // ... data to create a DispatchLine
     *   }
     * })
     * 
     */
    create<T extends DispatchLineCreateArgs>(args: SelectSubset<T, DispatchLineCreateArgs<ExtArgs>>): Prisma__DispatchLineClient<$Result.GetResult<Prisma.$DispatchLinePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DispatchLines.
     * @param {DispatchLineCreateManyArgs} args - Arguments to create many DispatchLines.
     * @example
     * // Create many DispatchLines
     * const dispatchLine = await prisma.dispatchLine.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DispatchLineCreateManyArgs>(args?: SelectSubset<T, DispatchLineCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DispatchLine.
     * @param {DispatchLineDeleteArgs} args - Arguments to delete one DispatchLine.
     * @example
     * // Delete one DispatchLine
     * const DispatchLine = await prisma.dispatchLine.delete({
     *   where: {
     *     // ... filter to delete one DispatchLine
     *   }
     * })
     * 
     */
    delete<T extends DispatchLineDeleteArgs>(args: SelectSubset<T, DispatchLineDeleteArgs<ExtArgs>>): Prisma__DispatchLineClient<$Result.GetResult<Prisma.$DispatchLinePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DispatchLine.
     * @param {DispatchLineUpdateArgs} args - Arguments to update one DispatchLine.
     * @example
     * // Update one DispatchLine
     * const dispatchLine = await prisma.dispatchLine.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DispatchLineUpdateArgs>(args: SelectSubset<T, DispatchLineUpdateArgs<ExtArgs>>): Prisma__DispatchLineClient<$Result.GetResult<Prisma.$DispatchLinePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DispatchLines.
     * @param {DispatchLineDeleteManyArgs} args - Arguments to filter DispatchLines to delete.
     * @example
     * // Delete a few DispatchLines
     * const { count } = await prisma.dispatchLine.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DispatchLineDeleteManyArgs>(args?: SelectSubset<T, DispatchLineDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DispatchLines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispatchLineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DispatchLines
     * const dispatchLine = await prisma.dispatchLine.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DispatchLineUpdateManyArgs>(args: SelectSubset<T, DispatchLineUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DispatchLine.
     * @param {DispatchLineUpsertArgs} args - Arguments to update or create a DispatchLine.
     * @example
     * // Update or create a DispatchLine
     * const dispatchLine = await prisma.dispatchLine.upsert({
     *   create: {
     *     // ... data to create a DispatchLine
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DispatchLine we want to update
     *   }
     * })
     */
    upsert<T extends DispatchLineUpsertArgs>(args: SelectSubset<T, DispatchLineUpsertArgs<ExtArgs>>): Prisma__DispatchLineClient<$Result.GetResult<Prisma.$DispatchLinePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DispatchLines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispatchLineCountArgs} args - Arguments to filter DispatchLines to count.
     * @example
     * // Count the number of DispatchLines
     * const count = await prisma.dispatchLine.count({
     *   where: {
     *     // ... the filter for the DispatchLines we want to count
     *   }
     * })
    **/
    count<T extends DispatchLineCountArgs>(
      args?: Subset<T, DispatchLineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DispatchLineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DispatchLine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispatchLineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DispatchLineAggregateArgs>(args: Subset<T, DispatchLineAggregateArgs>): Prisma.PrismaPromise<GetDispatchLineAggregateType<T>>

    /**
     * Group by DispatchLine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispatchLineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DispatchLineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DispatchLineGroupByArgs['orderBy'] }
        : { orderBy?: DispatchLineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DispatchLineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDispatchLineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DispatchLine model
   */
  readonly fields: DispatchLineFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DispatchLine.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DispatchLineClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    dispatch<T extends DispatchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DispatchDefaultArgs<ExtArgs>>): Prisma__DispatchClient<$Result.GetResult<Prisma.$DispatchPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    item<T extends ItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ItemDefaultArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    location<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DispatchLine model
   */ 
  interface DispatchLineFieldRefs {
    readonly id: FieldRef<"DispatchLine", 'Int'>
    readonly dispatchId: FieldRef<"DispatchLine", 'Int'>
    readonly itemId: FieldRef<"DispatchLine", 'Int'>
    readonly locationId: FieldRef<"DispatchLine", 'Int'>
    readonly qty: FieldRef<"DispatchLine", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * DispatchLine findUnique
   */
  export type DispatchLineFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DispatchLine
     */
    select?: DispatchLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispatchLineInclude<ExtArgs> | null
    /**
     * Filter, which DispatchLine to fetch.
     */
    where: DispatchLineWhereUniqueInput
  }

  /**
   * DispatchLine findUniqueOrThrow
   */
  export type DispatchLineFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DispatchLine
     */
    select?: DispatchLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispatchLineInclude<ExtArgs> | null
    /**
     * Filter, which DispatchLine to fetch.
     */
    where: DispatchLineWhereUniqueInput
  }

  /**
   * DispatchLine findFirst
   */
  export type DispatchLineFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DispatchLine
     */
    select?: DispatchLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispatchLineInclude<ExtArgs> | null
    /**
     * Filter, which DispatchLine to fetch.
     */
    where?: DispatchLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DispatchLines to fetch.
     */
    orderBy?: DispatchLineOrderByWithRelationInput | DispatchLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DispatchLines.
     */
    cursor?: DispatchLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DispatchLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DispatchLines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DispatchLines.
     */
    distinct?: DispatchLineScalarFieldEnum | DispatchLineScalarFieldEnum[]
  }

  /**
   * DispatchLine findFirstOrThrow
   */
  export type DispatchLineFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DispatchLine
     */
    select?: DispatchLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispatchLineInclude<ExtArgs> | null
    /**
     * Filter, which DispatchLine to fetch.
     */
    where?: DispatchLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DispatchLines to fetch.
     */
    orderBy?: DispatchLineOrderByWithRelationInput | DispatchLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DispatchLines.
     */
    cursor?: DispatchLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DispatchLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DispatchLines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DispatchLines.
     */
    distinct?: DispatchLineScalarFieldEnum | DispatchLineScalarFieldEnum[]
  }

  /**
   * DispatchLine findMany
   */
  export type DispatchLineFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DispatchLine
     */
    select?: DispatchLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispatchLineInclude<ExtArgs> | null
    /**
     * Filter, which DispatchLines to fetch.
     */
    where?: DispatchLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DispatchLines to fetch.
     */
    orderBy?: DispatchLineOrderByWithRelationInput | DispatchLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DispatchLines.
     */
    cursor?: DispatchLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DispatchLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DispatchLines.
     */
    skip?: number
    distinct?: DispatchLineScalarFieldEnum | DispatchLineScalarFieldEnum[]
  }

  /**
   * DispatchLine create
   */
  export type DispatchLineCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DispatchLine
     */
    select?: DispatchLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispatchLineInclude<ExtArgs> | null
    /**
     * The data needed to create a DispatchLine.
     */
    data: XOR<DispatchLineCreateInput, DispatchLineUncheckedCreateInput>
  }

  /**
   * DispatchLine createMany
   */
  export type DispatchLineCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DispatchLines.
     */
    data: DispatchLineCreateManyInput | DispatchLineCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DispatchLine update
   */
  export type DispatchLineUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DispatchLine
     */
    select?: DispatchLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispatchLineInclude<ExtArgs> | null
    /**
     * The data needed to update a DispatchLine.
     */
    data: XOR<DispatchLineUpdateInput, DispatchLineUncheckedUpdateInput>
    /**
     * Choose, which DispatchLine to update.
     */
    where: DispatchLineWhereUniqueInput
  }

  /**
   * DispatchLine updateMany
   */
  export type DispatchLineUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DispatchLines.
     */
    data: XOR<DispatchLineUpdateManyMutationInput, DispatchLineUncheckedUpdateManyInput>
    /**
     * Filter which DispatchLines to update
     */
    where?: DispatchLineWhereInput
  }

  /**
   * DispatchLine upsert
   */
  export type DispatchLineUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DispatchLine
     */
    select?: DispatchLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispatchLineInclude<ExtArgs> | null
    /**
     * The filter to search for the DispatchLine to update in case it exists.
     */
    where: DispatchLineWhereUniqueInput
    /**
     * In case the DispatchLine found by the `where` argument doesn't exist, create a new DispatchLine with this data.
     */
    create: XOR<DispatchLineCreateInput, DispatchLineUncheckedCreateInput>
    /**
     * In case the DispatchLine was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DispatchLineUpdateInput, DispatchLineUncheckedUpdateInput>
  }

  /**
   * DispatchLine delete
   */
  export type DispatchLineDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DispatchLine
     */
    select?: DispatchLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispatchLineInclude<ExtArgs> | null
    /**
     * Filter which DispatchLine to delete.
     */
    where: DispatchLineWhereUniqueInput
  }

  /**
   * DispatchLine deleteMany
   */
  export type DispatchLineDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DispatchLines to delete
     */
    where?: DispatchLineWhereInput
  }

  /**
   * DispatchLine without action
   */
  export type DispatchLineDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DispatchLine
     */
    select?: DispatchLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispatchLineInclude<ExtArgs> | null
  }


  /**
   * Model Stocktake
   */

  export type AggregateStocktake = {
    _count: StocktakeCountAggregateOutputType | null
    _avg: StocktakeAvgAggregateOutputType | null
    _sum: StocktakeSumAggregateOutputType | null
    _min: StocktakeMinAggregateOutputType | null
    _max: StocktakeMaxAggregateOutputType | null
  }

  export type StocktakeAvgAggregateOutputType = {
    id: number | null
  }

  export type StocktakeSumAggregateOutputType = {
    id: number | null
  }

  export type StocktakeMinAggregateOutputType = {
    id: number | null
    number: string | null
    status: string | null
    date: Date | null
    createdAt: Date | null
  }

  export type StocktakeMaxAggregateOutputType = {
    id: number | null
    number: string | null
    status: string | null
    date: Date | null
    createdAt: Date | null
  }

  export type StocktakeCountAggregateOutputType = {
    id: number
    number: number
    status: number
    date: number
    createdAt: number
    _all: number
  }


  export type StocktakeAvgAggregateInputType = {
    id?: true
  }

  export type StocktakeSumAggregateInputType = {
    id?: true
  }

  export type StocktakeMinAggregateInputType = {
    id?: true
    number?: true
    status?: true
    date?: true
    createdAt?: true
  }

  export type StocktakeMaxAggregateInputType = {
    id?: true
    number?: true
    status?: true
    date?: true
    createdAt?: true
  }

  export type StocktakeCountAggregateInputType = {
    id?: true
    number?: true
    status?: true
    date?: true
    createdAt?: true
    _all?: true
  }

  export type StocktakeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stocktake to aggregate.
     */
    where?: StocktakeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocktakes to fetch.
     */
    orderBy?: StocktakeOrderByWithRelationInput | StocktakeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StocktakeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocktakes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocktakes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stocktakes
    **/
    _count?: true | StocktakeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StocktakeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StocktakeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StocktakeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StocktakeMaxAggregateInputType
  }

  export type GetStocktakeAggregateType<T extends StocktakeAggregateArgs> = {
        [P in keyof T & keyof AggregateStocktake]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStocktake[P]>
      : GetScalarType<T[P], AggregateStocktake[P]>
  }




  export type StocktakeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StocktakeWhereInput
    orderBy?: StocktakeOrderByWithAggregationInput | StocktakeOrderByWithAggregationInput[]
    by: StocktakeScalarFieldEnum[] | StocktakeScalarFieldEnum
    having?: StocktakeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StocktakeCountAggregateInputType | true
    _avg?: StocktakeAvgAggregateInputType
    _sum?: StocktakeSumAggregateInputType
    _min?: StocktakeMinAggregateInputType
    _max?: StocktakeMaxAggregateInputType
  }

  export type StocktakeGroupByOutputType = {
    id: number
    number: string
    status: string
    date: Date
    createdAt: Date
    _count: StocktakeCountAggregateOutputType | null
    _avg: StocktakeAvgAggregateOutputType | null
    _sum: StocktakeSumAggregateOutputType | null
    _min: StocktakeMinAggregateOutputType | null
    _max: StocktakeMaxAggregateOutputType | null
  }

  type GetStocktakeGroupByPayload<T extends StocktakeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StocktakeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StocktakeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StocktakeGroupByOutputType[P]>
            : GetScalarType<T[P], StocktakeGroupByOutputType[P]>
        }
      >
    >


  export type StocktakeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    status?: boolean
    date?: boolean
    createdAt?: boolean
    lines?: boolean | Stocktake$linesArgs<ExtArgs>
    _count?: boolean | StocktakeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stocktake"]>


  export type StocktakeSelectScalar = {
    id?: boolean
    number?: boolean
    status?: boolean
    date?: boolean
    createdAt?: boolean
  }

  export type StocktakeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lines?: boolean | Stocktake$linesArgs<ExtArgs>
    _count?: boolean | StocktakeCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $StocktakePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Stocktake"
    objects: {
      lines: Prisma.$StocktakeLinePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      number: string
      status: string
      date: Date
      createdAt: Date
    }, ExtArgs["result"]["stocktake"]>
    composites: {}
  }

  type StocktakeGetPayload<S extends boolean | null | undefined | StocktakeDefaultArgs> = $Result.GetResult<Prisma.$StocktakePayload, S>

  type StocktakeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StocktakeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StocktakeCountAggregateInputType | true
    }

  export interface StocktakeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Stocktake'], meta: { name: 'Stocktake' } }
    /**
     * Find zero or one Stocktake that matches the filter.
     * @param {StocktakeFindUniqueArgs} args - Arguments to find a Stocktake
     * @example
     * // Get one Stocktake
     * const stocktake = await prisma.stocktake.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StocktakeFindUniqueArgs>(args: SelectSubset<T, StocktakeFindUniqueArgs<ExtArgs>>): Prisma__StocktakeClient<$Result.GetResult<Prisma.$StocktakePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Stocktake that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StocktakeFindUniqueOrThrowArgs} args - Arguments to find a Stocktake
     * @example
     * // Get one Stocktake
     * const stocktake = await prisma.stocktake.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StocktakeFindUniqueOrThrowArgs>(args: SelectSubset<T, StocktakeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StocktakeClient<$Result.GetResult<Prisma.$StocktakePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Stocktake that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StocktakeFindFirstArgs} args - Arguments to find a Stocktake
     * @example
     * // Get one Stocktake
     * const stocktake = await prisma.stocktake.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StocktakeFindFirstArgs>(args?: SelectSubset<T, StocktakeFindFirstArgs<ExtArgs>>): Prisma__StocktakeClient<$Result.GetResult<Prisma.$StocktakePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Stocktake that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StocktakeFindFirstOrThrowArgs} args - Arguments to find a Stocktake
     * @example
     * // Get one Stocktake
     * const stocktake = await prisma.stocktake.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StocktakeFindFirstOrThrowArgs>(args?: SelectSubset<T, StocktakeFindFirstOrThrowArgs<ExtArgs>>): Prisma__StocktakeClient<$Result.GetResult<Prisma.$StocktakePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Stocktakes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StocktakeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stocktakes
     * const stocktakes = await prisma.stocktake.findMany()
     * 
     * // Get first 10 Stocktakes
     * const stocktakes = await prisma.stocktake.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stocktakeWithIdOnly = await prisma.stocktake.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StocktakeFindManyArgs>(args?: SelectSubset<T, StocktakeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StocktakePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Stocktake.
     * @param {StocktakeCreateArgs} args - Arguments to create a Stocktake.
     * @example
     * // Create one Stocktake
     * const Stocktake = await prisma.stocktake.create({
     *   data: {
     *     // ... data to create a Stocktake
     *   }
     * })
     * 
     */
    create<T extends StocktakeCreateArgs>(args: SelectSubset<T, StocktakeCreateArgs<ExtArgs>>): Prisma__StocktakeClient<$Result.GetResult<Prisma.$StocktakePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Stocktakes.
     * @param {StocktakeCreateManyArgs} args - Arguments to create many Stocktakes.
     * @example
     * // Create many Stocktakes
     * const stocktake = await prisma.stocktake.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StocktakeCreateManyArgs>(args?: SelectSubset<T, StocktakeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Stocktake.
     * @param {StocktakeDeleteArgs} args - Arguments to delete one Stocktake.
     * @example
     * // Delete one Stocktake
     * const Stocktake = await prisma.stocktake.delete({
     *   where: {
     *     // ... filter to delete one Stocktake
     *   }
     * })
     * 
     */
    delete<T extends StocktakeDeleteArgs>(args: SelectSubset<T, StocktakeDeleteArgs<ExtArgs>>): Prisma__StocktakeClient<$Result.GetResult<Prisma.$StocktakePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Stocktake.
     * @param {StocktakeUpdateArgs} args - Arguments to update one Stocktake.
     * @example
     * // Update one Stocktake
     * const stocktake = await prisma.stocktake.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StocktakeUpdateArgs>(args: SelectSubset<T, StocktakeUpdateArgs<ExtArgs>>): Prisma__StocktakeClient<$Result.GetResult<Prisma.$StocktakePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Stocktakes.
     * @param {StocktakeDeleteManyArgs} args - Arguments to filter Stocktakes to delete.
     * @example
     * // Delete a few Stocktakes
     * const { count } = await prisma.stocktake.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StocktakeDeleteManyArgs>(args?: SelectSubset<T, StocktakeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stocktakes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StocktakeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stocktakes
     * const stocktake = await prisma.stocktake.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StocktakeUpdateManyArgs>(args: SelectSubset<T, StocktakeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Stocktake.
     * @param {StocktakeUpsertArgs} args - Arguments to update or create a Stocktake.
     * @example
     * // Update or create a Stocktake
     * const stocktake = await prisma.stocktake.upsert({
     *   create: {
     *     // ... data to create a Stocktake
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stocktake we want to update
     *   }
     * })
     */
    upsert<T extends StocktakeUpsertArgs>(args: SelectSubset<T, StocktakeUpsertArgs<ExtArgs>>): Prisma__StocktakeClient<$Result.GetResult<Prisma.$StocktakePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Stocktakes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StocktakeCountArgs} args - Arguments to filter Stocktakes to count.
     * @example
     * // Count the number of Stocktakes
     * const count = await prisma.stocktake.count({
     *   where: {
     *     // ... the filter for the Stocktakes we want to count
     *   }
     * })
    **/
    count<T extends StocktakeCountArgs>(
      args?: Subset<T, StocktakeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StocktakeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stocktake.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StocktakeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StocktakeAggregateArgs>(args: Subset<T, StocktakeAggregateArgs>): Prisma.PrismaPromise<GetStocktakeAggregateType<T>>

    /**
     * Group by Stocktake.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StocktakeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StocktakeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StocktakeGroupByArgs['orderBy'] }
        : { orderBy?: StocktakeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StocktakeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStocktakeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Stocktake model
   */
  readonly fields: StocktakeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Stocktake.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StocktakeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lines<T extends Stocktake$linesArgs<ExtArgs> = {}>(args?: Subset<T, Stocktake$linesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StocktakeLinePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Stocktake model
   */ 
  interface StocktakeFieldRefs {
    readonly id: FieldRef<"Stocktake", 'Int'>
    readonly number: FieldRef<"Stocktake", 'String'>
    readonly status: FieldRef<"Stocktake", 'String'>
    readonly date: FieldRef<"Stocktake", 'DateTime'>
    readonly createdAt: FieldRef<"Stocktake", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Stocktake findUnique
   */
  export type StocktakeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stocktake
     */
    select?: StocktakeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StocktakeInclude<ExtArgs> | null
    /**
     * Filter, which Stocktake to fetch.
     */
    where: StocktakeWhereUniqueInput
  }

  /**
   * Stocktake findUniqueOrThrow
   */
  export type StocktakeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stocktake
     */
    select?: StocktakeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StocktakeInclude<ExtArgs> | null
    /**
     * Filter, which Stocktake to fetch.
     */
    where: StocktakeWhereUniqueInput
  }

  /**
   * Stocktake findFirst
   */
  export type StocktakeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stocktake
     */
    select?: StocktakeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StocktakeInclude<ExtArgs> | null
    /**
     * Filter, which Stocktake to fetch.
     */
    where?: StocktakeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocktakes to fetch.
     */
    orderBy?: StocktakeOrderByWithRelationInput | StocktakeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stocktakes.
     */
    cursor?: StocktakeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocktakes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocktakes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stocktakes.
     */
    distinct?: StocktakeScalarFieldEnum | StocktakeScalarFieldEnum[]
  }

  /**
   * Stocktake findFirstOrThrow
   */
  export type StocktakeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stocktake
     */
    select?: StocktakeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StocktakeInclude<ExtArgs> | null
    /**
     * Filter, which Stocktake to fetch.
     */
    where?: StocktakeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocktakes to fetch.
     */
    orderBy?: StocktakeOrderByWithRelationInput | StocktakeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stocktakes.
     */
    cursor?: StocktakeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocktakes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocktakes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stocktakes.
     */
    distinct?: StocktakeScalarFieldEnum | StocktakeScalarFieldEnum[]
  }

  /**
   * Stocktake findMany
   */
  export type StocktakeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stocktake
     */
    select?: StocktakeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StocktakeInclude<ExtArgs> | null
    /**
     * Filter, which Stocktakes to fetch.
     */
    where?: StocktakeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocktakes to fetch.
     */
    orderBy?: StocktakeOrderByWithRelationInput | StocktakeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stocktakes.
     */
    cursor?: StocktakeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocktakes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocktakes.
     */
    skip?: number
    distinct?: StocktakeScalarFieldEnum | StocktakeScalarFieldEnum[]
  }

  /**
   * Stocktake create
   */
  export type StocktakeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stocktake
     */
    select?: StocktakeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StocktakeInclude<ExtArgs> | null
    /**
     * The data needed to create a Stocktake.
     */
    data: XOR<StocktakeCreateInput, StocktakeUncheckedCreateInput>
  }

  /**
   * Stocktake createMany
   */
  export type StocktakeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stocktakes.
     */
    data: StocktakeCreateManyInput | StocktakeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Stocktake update
   */
  export type StocktakeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stocktake
     */
    select?: StocktakeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StocktakeInclude<ExtArgs> | null
    /**
     * The data needed to update a Stocktake.
     */
    data: XOR<StocktakeUpdateInput, StocktakeUncheckedUpdateInput>
    /**
     * Choose, which Stocktake to update.
     */
    where: StocktakeWhereUniqueInput
  }

  /**
   * Stocktake updateMany
   */
  export type StocktakeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stocktakes.
     */
    data: XOR<StocktakeUpdateManyMutationInput, StocktakeUncheckedUpdateManyInput>
    /**
     * Filter which Stocktakes to update
     */
    where?: StocktakeWhereInput
  }

  /**
   * Stocktake upsert
   */
  export type StocktakeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stocktake
     */
    select?: StocktakeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StocktakeInclude<ExtArgs> | null
    /**
     * The filter to search for the Stocktake to update in case it exists.
     */
    where: StocktakeWhereUniqueInput
    /**
     * In case the Stocktake found by the `where` argument doesn't exist, create a new Stocktake with this data.
     */
    create: XOR<StocktakeCreateInput, StocktakeUncheckedCreateInput>
    /**
     * In case the Stocktake was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StocktakeUpdateInput, StocktakeUncheckedUpdateInput>
  }

  /**
   * Stocktake delete
   */
  export type StocktakeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stocktake
     */
    select?: StocktakeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StocktakeInclude<ExtArgs> | null
    /**
     * Filter which Stocktake to delete.
     */
    where: StocktakeWhereUniqueInput
  }

  /**
   * Stocktake deleteMany
   */
  export type StocktakeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stocktakes to delete
     */
    where?: StocktakeWhereInput
  }

  /**
   * Stocktake.lines
   */
  export type Stocktake$linesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StocktakeLine
     */
    select?: StocktakeLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StocktakeLineInclude<ExtArgs> | null
    where?: StocktakeLineWhereInput
    orderBy?: StocktakeLineOrderByWithRelationInput | StocktakeLineOrderByWithRelationInput[]
    cursor?: StocktakeLineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StocktakeLineScalarFieldEnum | StocktakeLineScalarFieldEnum[]
  }

  /**
   * Stocktake without action
   */
  export type StocktakeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stocktake
     */
    select?: StocktakeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StocktakeInclude<ExtArgs> | null
  }


  /**
   * Model StocktakeLine
   */

  export type AggregateStocktakeLine = {
    _count: StocktakeLineCountAggregateOutputType | null
    _avg: StocktakeLineAvgAggregateOutputType | null
    _sum: StocktakeLineSumAggregateOutputType | null
    _min: StocktakeLineMinAggregateOutputType | null
    _max: StocktakeLineMaxAggregateOutputType | null
  }

  export type StocktakeLineAvgAggregateOutputType = {
    id: number | null
    stocktakeId: number | null
    itemId: number | null
    locationId: number | null
    countedQty: number | null
  }

  export type StocktakeLineSumAggregateOutputType = {
    id: number | null
    stocktakeId: number | null
    itemId: number | null
    locationId: number | null
    countedQty: number | null
  }

  export type StocktakeLineMinAggregateOutputType = {
    id: number | null
    stocktakeId: number | null
    itemId: number | null
    locationId: number | null
    countedQty: number | null
  }

  export type StocktakeLineMaxAggregateOutputType = {
    id: number | null
    stocktakeId: number | null
    itemId: number | null
    locationId: number | null
    countedQty: number | null
  }

  export type StocktakeLineCountAggregateOutputType = {
    id: number
    stocktakeId: number
    itemId: number
    locationId: number
    countedQty: number
    _all: number
  }


  export type StocktakeLineAvgAggregateInputType = {
    id?: true
    stocktakeId?: true
    itemId?: true
    locationId?: true
    countedQty?: true
  }

  export type StocktakeLineSumAggregateInputType = {
    id?: true
    stocktakeId?: true
    itemId?: true
    locationId?: true
    countedQty?: true
  }

  export type StocktakeLineMinAggregateInputType = {
    id?: true
    stocktakeId?: true
    itemId?: true
    locationId?: true
    countedQty?: true
  }

  export type StocktakeLineMaxAggregateInputType = {
    id?: true
    stocktakeId?: true
    itemId?: true
    locationId?: true
    countedQty?: true
  }

  export type StocktakeLineCountAggregateInputType = {
    id?: true
    stocktakeId?: true
    itemId?: true
    locationId?: true
    countedQty?: true
    _all?: true
  }

  export type StocktakeLineAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StocktakeLine to aggregate.
     */
    where?: StocktakeLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StocktakeLines to fetch.
     */
    orderBy?: StocktakeLineOrderByWithRelationInput | StocktakeLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StocktakeLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StocktakeLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StocktakeLines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StocktakeLines
    **/
    _count?: true | StocktakeLineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StocktakeLineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StocktakeLineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StocktakeLineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StocktakeLineMaxAggregateInputType
  }

  export type GetStocktakeLineAggregateType<T extends StocktakeLineAggregateArgs> = {
        [P in keyof T & keyof AggregateStocktakeLine]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStocktakeLine[P]>
      : GetScalarType<T[P], AggregateStocktakeLine[P]>
  }




  export type StocktakeLineGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StocktakeLineWhereInput
    orderBy?: StocktakeLineOrderByWithAggregationInput | StocktakeLineOrderByWithAggregationInput[]
    by: StocktakeLineScalarFieldEnum[] | StocktakeLineScalarFieldEnum
    having?: StocktakeLineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StocktakeLineCountAggregateInputType | true
    _avg?: StocktakeLineAvgAggregateInputType
    _sum?: StocktakeLineSumAggregateInputType
    _min?: StocktakeLineMinAggregateInputType
    _max?: StocktakeLineMaxAggregateInputType
  }

  export type StocktakeLineGroupByOutputType = {
    id: number
    stocktakeId: number
    itemId: number
    locationId: number
    countedQty: number
    _count: StocktakeLineCountAggregateOutputType | null
    _avg: StocktakeLineAvgAggregateOutputType | null
    _sum: StocktakeLineSumAggregateOutputType | null
    _min: StocktakeLineMinAggregateOutputType | null
    _max: StocktakeLineMaxAggregateOutputType | null
  }

  type GetStocktakeLineGroupByPayload<T extends StocktakeLineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StocktakeLineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StocktakeLineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StocktakeLineGroupByOutputType[P]>
            : GetScalarType<T[P], StocktakeLineGroupByOutputType[P]>
        }
      >
    >


  export type StocktakeLineSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stocktakeId?: boolean
    itemId?: boolean
    locationId?: boolean
    countedQty?: boolean
    stocktake?: boolean | StocktakeDefaultArgs<ExtArgs>
    item?: boolean | ItemDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stocktakeLine"]>


  export type StocktakeLineSelectScalar = {
    id?: boolean
    stocktakeId?: boolean
    itemId?: boolean
    locationId?: boolean
    countedQty?: boolean
  }

  export type StocktakeLineInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stocktake?: boolean | StocktakeDefaultArgs<ExtArgs>
    item?: boolean | ItemDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }

  export type $StocktakeLinePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StocktakeLine"
    objects: {
      stocktake: Prisma.$StocktakePayload<ExtArgs>
      item: Prisma.$ItemPayload<ExtArgs>
      location: Prisma.$LocationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      stocktakeId: number
      itemId: number
      locationId: number
      countedQty: number
    }, ExtArgs["result"]["stocktakeLine"]>
    composites: {}
  }

  type StocktakeLineGetPayload<S extends boolean | null | undefined | StocktakeLineDefaultArgs> = $Result.GetResult<Prisma.$StocktakeLinePayload, S>

  type StocktakeLineCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StocktakeLineFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StocktakeLineCountAggregateInputType | true
    }

  export interface StocktakeLineDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StocktakeLine'], meta: { name: 'StocktakeLine' } }
    /**
     * Find zero or one StocktakeLine that matches the filter.
     * @param {StocktakeLineFindUniqueArgs} args - Arguments to find a StocktakeLine
     * @example
     * // Get one StocktakeLine
     * const stocktakeLine = await prisma.stocktakeLine.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StocktakeLineFindUniqueArgs>(args: SelectSubset<T, StocktakeLineFindUniqueArgs<ExtArgs>>): Prisma__StocktakeLineClient<$Result.GetResult<Prisma.$StocktakeLinePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one StocktakeLine that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StocktakeLineFindUniqueOrThrowArgs} args - Arguments to find a StocktakeLine
     * @example
     * // Get one StocktakeLine
     * const stocktakeLine = await prisma.stocktakeLine.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StocktakeLineFindUniqueOrThrowArgs>(args: SelectSubset<T, StocktakeLineFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StocktakeLineClient<$Result.GetResult<Prisma.$StocktakeLinePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first StocktakeLine that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StocktakeLineFindFirstArgs} args - Arguments to find a StocktakeLine
     * @example
     * // Get one StocktakeLine
     * const stocktakeLine = await prisma.stocktakeLine.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StocktakeLineFindFirstArgs>(args?: SelectSubset<T, StocktakeLineFindFirstArgs<ExtArgs>>): Prisma__StocktakeLineClient<$Result.GetResult<Prisma.$StocktakeLinePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first StocktakeLine that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StocktakeLineFindFirstOrThrowArgs} args - Arguments to find a StocktakeLine
     * @example
     * // Get one StocktakeLine
     * const stocktakeLine = await prisma.stocktakeLine.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StocktakeLineFindFirstOrThrowArgs>(args?: SelectSubset<T, StocktakeLineFindFirstOrThrowArgs<ExtArgs>>): Prisma__StocktakeLineClient<$Result.GetResult<Prisma.$StocktakeLinePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more StocktakeLines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StocktakeLineFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StocktakeLines
     * const stocktakeLines = await prisma.stocktakeLine.findMany()
     * 
     * // Get first 10 StocktakeLines
     * const stocktakeLines = await prisma.stocktakeLine.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stocktakeLineWithIdOnly = await prisma.stocktakeLine.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StocktakeLineFindManyArgs>(args?: SelectSubset<T, StocktakeLineFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StocktakeLinePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a StocktakeLine.
     * @param {StocktakeLineCreateArgs} args - Arguments to create a StocktakeLine.
     * @example
     * // Create one StocktakeLine
     * const StocktakeLine = await prisma.stocktakeLine.create({
     *   data: {
     *     // ... data to create a StocktakeLine
     *   }
     * })
     * 
     */
    create<T extends StocktakeLineCreateArgs>(args: SelectSubset<T, StocktakeLineCreateArgs<ExtArgs>>): Prisma__StocktakeLineClient<$Result.GetResult<Prisma.$StocktakeLinePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many StocktakeLines.
     * @param {StocktakeLineCreateManyArgs} args - Arguments to create many StocktakeLines.
     * @example
     * // Create many StocktakeLines
     * const stocktakeLine = await prisma.stocktakeLine.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StocktakeLineCreateManyArgs>(args?: SelectSubset<T, StocktakeLineCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a StocktakeLine.
     * @param {StocktakeLineDeleteArgs} args - Arguments to delete one StocktakeLine.
     * @example
     * // Delete one StocktakeLine
     * const StocktakeLine = await prisma.stocktakeLine.delete({
     *   where: {
     *     // ... filter to delete one StocktakeLine
     *   }
     * })
     * 
     */
    delete<T extends StocktakeLineDeleteArgs>(args: SelectSubset<T, StocktakeLineDeleteArgs<ExtArgs>>): Prisma__StocktakeLineClient<$Result.GetResult<Prisma.$StocktakeLinePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one StocktakeLine.
     * @param {StocktakeLineUpdateArgs} args - Arguments to update one StocktakeLine.
     * @example
     * // Update one StocktakeLine
     * const stocktakeLine = await prisma.stocktakeLine.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StocktakeLineUpdateArgs>(args: SelectSubset<T, StocktakeLineUpdateArgs<ExtArgs>>): Prisma__StocktakeLineClient<$Result.GetResult<Prisma.$StocktakeLinePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more StocktakeLines.
     * @param {StocktakeLineDeleteManyArgs} args - Arguments to filter StocktakeLines to delete.
     * @example
     * // Delete a few StocktakeLines
     * const { count } = await prisma.stocktakeLine.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StocktakeLineDeleteManyArgs>(args?: SelectSubset<T, StocktakeLineDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StocktakeLines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StocktakeLineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StocktakeLines
     * const stocktakeLine = await prisma.stocktakeLine.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StocktakeLineUpdateManyArgs>(args: SelectSubset<T, StocktakeLineUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StocktakeLine.
     * @param {StocktakeLineUpsertArgs} args - Arguments to update or create a StocktakeLine.
     * @example
     * // Update or create a StocktakeLine
     * const stocktakeLine = await prisma.stocktakeLine.upsert({
     *   create: {
     *     // ... data to create a StocktakeLine
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StocktakeLine we want to update
     *   }
     * })
     */
    upsert<T extends StocktakeLineUpsertArgs>(args: SelectSubset<T, StocktakeLineUpsertArgs<ExtArgs>>): Prisma__StocktakeLineClient<$Result.GetResult<Prisma.$StocktakeLinePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of StocktakeLines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StocktakeLineCountArgs} args - Arguments to filter StocktakeLines to count.
     * @example
     * // Count the number of StocktakeLines
     * const count = await prisma.stocktakeLine.count({
     *   where: {
     *     // ... the filter for the StocktakeLines we want to count
     *   }
     * })
    **/
    count<T extends StocktakeLineCountArgs>(
      args?: Subset<T, StocktakeLineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StocktakeLineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StocktakeLine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StocktakeLineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StocktakeLineAggregateArgs>(args: Subset<T, StocktakeLineAggregateArgs>): Prisma.PrismaPromise<GetStocktakeLineAggregateType<T>>

    /**
     * Group by StocktakeLine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StocktakeLineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StocktakeLineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StocktakeLineGroupByArgs['orderBy'] }
        : { orderBy?: StocktakeLineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StocktakeLineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStocktakeLineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StocktakeLine model
   */
  readonly fields: StocktakeLineFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StocktakeLine.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StocktakeLineClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    stocktake<T extends StocktakeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StocktakeDefaultArgs<ExtArgs>>): Prisma__StocktakeClient<$Result.GetResult<Prisma.$StocktakePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    item<T extends ItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ItemDefaultArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    location<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StocktakeLine model
   */ 
  interface StocktakeLineFieldRefs {
    readonly id: FieldRef<"StocktakeLine", 'Int'>
    readonly stocktakeId: FieldRef<"StocktakeLine", 'Int'>
    readonly itemId: FieldRef<"StocktakeLine", 'Int'>
    readonly locationId: FieldRef<"StocktakeLine", 'Int'>
    readonly countedQty: FieldRef<"StocktakeLine", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * StocktakeLine findUnique
   */
  export type StocktakeLineFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StocktakeLine
     */
    select?: StocktakeLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StocktakeLineInclude<ExtArgs> | null
    /**
     * Filter, which StocktakeLine to fetch.
     */
    where: StocktakeLineWhereUniqueInput
  }

  /**
   * StocktakeLine findUniqueOrThrow
   */
  export type StocktakeLineFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StocktakeLine
     */
    select?: StocktakeLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StocktakeLineInclude<ExtArgs> | null
    /**
     * Filter, which StocktakeLine to fetch.
     */
    where: StocktakeLineWhereUniqueInput
  }

  /**
   * StocktakeLine findFirst
   */
  export type StocktakeLineFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StocktakeLine
     */
    select?: StocktakeLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StocktakeLineInclude<ExtArgs> | null
    /**
     * Filter, which StocktakeLine to fetch.
     */
    where?: StocktakeLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StocktakeLines to fetch.
     */
    orderBy?: StocktakeLineOrderByWithRelationInput | StocktakeLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StocktakeLines.
     */
    cursor?: StocktakeLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StocktakeLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StocktakeLines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StocktakeLines.
     */
    distinct?: StocktakeLineScalarFieldEnum | StocktakeLineScalarFieldEnum[]
  }

  /**
   * StocktakeLine findFirstOrThrow
   */
  export type StocktakeLineFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StocktakeLine
     */
    select?: StocktakeLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StocktakeLineInclude<ExtArgs> | null
    /**
     * Filter, which StocktakeLine to fetch.
     */
    where?: StocktakeLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StocktakeLines to fetch.
     */
    orderBy?: StocktakeLineOrderByWithRelationInput | StocktakeLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StocktakeLines.
     */
    cursor?: StocktakeLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StocktakeLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StocktakeLines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StocktakeLines.
     */
    distinct?: StocktakeLineScalarFieldEnum | StocktakeLineScalarFieldEnum[]
  }

  /**
   * StocktakeLine findMany
   */
  export type StocktakeLineFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StocktakeLine
     */
    select?: StocktakeLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StocktakeLineInclude<ExtArgs> | null
    /**
     * Filter, which StocktakeLines to fetch.
     */
    where?: StocktakeLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StocktakeLines to fetch.
     */
    orderBy?: StocktakeLineOrderByWithRelationInput | StocktakeLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StocktakeLines.
     */
    cursor?: StocktakeLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StocktakeLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StocktakeLines.
     */
    skip?: number
    distinct?: StocktakeLineScalarFieldEnum | StocktakeLineScalarFieldEnum[]
  }

  /**
   * StocktakeLine create
   */
  export type StocktakeLineCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StocktakeLine
     */
    select?: StocktakeLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StocktakeLineInclude<ExtArgs> | null
    /**
     * The data needed to create a StocktakeLine.
     */
    data: XOR<StocktakeLineCreateInput, StocktakeLineUncheckedCreateInput>
  }

  /**
   * StocktakeLine createMany
   */
  export type StocktakeLineCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StocktakeLines.
     */
    data: StocktakeLineCreateManyInput | StocktakeLineCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StocktakeLine update
   */
  export type StocktakeLineUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StocktakeLine
     */
    select?: StocktakeLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StocktakeLineInclude<ExtArgs> | null
    /**
     * The data needed to update a StocktakeLine.
     */
    data: XOR<StocktakeLineUpdateInput, StocktakeLineUncheckedUpdateInput>
    /**
     * Choose, which StocktakeLine to update.
     */
    where: StocktakeLineWhereUniqueInput
  }

  /**
   * StocktakeLine updateMany
   */
  export type StocktakeLineUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StocktakeLines.
     */
    data: XOR<StocktakeLineUpdateManyMutationInput, StocktakeLineUncheckedUpdateManyInput>
    /**
     * Filter which StocktakeLines to update
     */
    where?: StocktakeLineWhereInput
  }

  /**
   * StocktakeLine upsert
   */
  export type StocktakeLineUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StocktakeLine
     */
    select?: StocktakeLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StocktakeLineInclude<ExtArgs> | null
    /**
     * The filter to search for the StocktakeLine to update in case it exists.
     */
    where: StocktakeLineWhereUniqueInput
    /**
     * In case the StocktakeLine found by the `where` argument doesn't exist, create a new StocktakeLine with this data.
     */
    create: XOR<StocktakeLineCreateInput, StocktakeLineUncheckedCreateInput>
    /**
     * In case the StocktakeLine was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StocktakeLineUpdateInput, StocktakeLineUncheckedUpdateInput>
  }

  /**
   * StocktakeLine delete
   */
  export type StocktakeLineDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StocktakeLine
     */
    select?: StocktakeLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StocktakeLineInclude<ExtArgs> | null
    /**
     * Filter which StocktakeLine to delete.
     */
    where: StocktakeLineWhereUniqueInput
  }

  /**
   * StocktakeLine deleteMany
   */
  export type StocktakeLineDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StocktakeLines to delete
     */
    where?: StocktakeLineWhereInput
  }

  /**
   * StocktakeLine without action
   */
  export type StocktakeLineDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StocktakeLine
     */
    select?: StocktakeLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StocktakeLineInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    passwordHash: 'passwordHash',
    role: 'role',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ItemScalarFieldEnum: {
    id: 'id',
    sku: 'sku',
    name: 'name',
    unit: 'unit',
    barcode: 'barcode',
    minStock: 'minStock',
    createdAt: 'createdAt'
  };

  export type ItemScalarFieldEnum = (typeof ItemScalarFieldEnum)[keyof typeof ItemScalarFieldEnum]


  export const LocationScalarFieldEnum: {
    id: 'id',
    code: 'code',
    description: 'description',
    createdAt: 'createdAt'
  };

  export type LocationScalarFieldEnum = (typeof LocationScalarFieldEnum)[keyof typeof LocationScalarFieldEnum]


  export const StockScalarFieldEnum: {
    id: 'id',
    itemId: 'itemId',
    locationId: 'locationId',
    quantity: 'quantity'
  };

  export type StockScalarFieldEnum = (typeof StockScalarFieldEnum)[keyof typeof StockScalarFieldEnum]


  export const ReceiptScalarFieldEnum: {
    id: 'id',
    number: 'number',
    supplier: 'supplier',
    status: 'status',
    date: 'date',
    createdAt: 'createdAt'
  };

  export type ReceiptScalarFieldEnum = (typeof ReceiptScalarFieldEnum)[keyof typeof ReceiptScalarFieldEnum]


  export const ReceiptLineScalarFieldEnum: {
    id: 'id',
    receiptId: 'receiptId',
    itemId: 'itemId',
    locationId: 'locationId',
    qty: 'qty'
  };

  export type ReceiptLineScalarFieldEnum = (typeof ReceiptLineScalarFieldEnum)[keyof typeof ReceiptLineScalarFieldEnum]


  export const DispatchScalarFieldEnum: {
    id: 'id',
    number: 'number',
    customer: 'customer',
    status: 'status',
    date: 'date',
    createdAt: 'createdAt'
  };

  export type DispatchScalarFieldEnum = (typeof DispatchScalarFieldEnum)[keyof typeof DispatchScalarFieldEnum]


  export const DispatchLineScalarFieldEnum: {
    id: 'id',
    dispatchId: 'dispatchId',
    itemId: 'itemId',
    locationId: 'locationId',
    qty: 'qty'
  };

  export type DispatchLineScalarFieldEnum = (typeof DispatchLineScalarFieldEnum)[keyof typeof DispatchLineScalarFieldEnum]


  export const StocktakeScalarFieldEnum: {
    id: 'id',
    number: 'number',
    status: 'status',
    date: 'date',
    createdAt: 'createdAt'
  };

  export type StocktakeScalarFieldEnum = (typeof StocktakeScalarFieldEnum)[keyof typeof StocktakeScalarFieldEnum]


  export const StocktakeLineScalarFieldEnum: {
    id: 'id',
    stocktakeId: 'stocktakeId',
    itemId: 'itemId',
    locationId: 'locationId',
    countedQty: 'countedQty'
  };

  export type StocktakeLineScalarFieldEnum = (typeof StocktakeLineScalarFieldEnum)[keyof typeof StocktakeLineScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ItemWhereInput = {
    AND?: ItemWhereInput | ItemWhereInput[]
    OR?: ItemWhereInput[]
    NOT?: ItemWhereInput | ItemWhereInput[]
    id?: IntFilter<"Item"> | number
    sku?: StringFilter<"Item"> | string
    name?: StringFilter<"Item"> | string
    unit?: StringFilter<"Item"> | string
    barcode?: StringNullableFilter<"Item"> | string | null
    minStock?: IntNullableFilter<"Item"> | number | null
    createdAt?: DateTimeFilter<"Item"> | Date | string
    stocks?: StockListRelationFilter
    receipts?: ReceiptLineListRelationFilter
    dispatches?: DispatchLineListRelationFilter
    stocktakes?: StocktakeLineListRelationFilter
  }

  export type ItemOrderByWithRelationInput = {
    id?: SortOrder
    sku?: SortOrder
    name?: SortOrder
    unit?: SortOrder
    barcode?: SortOrderInput | SortOrder
    minStock?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    stocks?: StockOrderByRelationAggregateInput
    receipts?: ReceiptLineOrderByRelationAggregateInput
    dispatches?: DispatchLineOrderByRelationAggregateInput
    stocktakes?: StocktakeLineOrderByRelationAggregateInput
  }

  export type ItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    sku?: string
    barcode?: string
    AND?: ItemWhereInput | ItemWhereInput[]
    OR?: ItemWhereInput[]
    NOT?: ItemWhereInput | ItemWhereInput[]
    name?: StringFilter<"Item"> | string
    unit?: StringFilter<"Item"> | string
    minStock?: IntNullableFilter<"Item"> | number | null
    createdAt?: DateTimeFilter<"Item"> | Date | string
    stocks?: StockListRelationFilter
    receipts?: ReceiptLineListRelationFilter
    dispatches?: DispatchLineListRelationFilter
    stocktakes?: StocktakeLineListRelationFilter
  }, "id" | "sku" | "barcode">

  export type ItemOrderByWithAggregationInput = {
    id?: SortOrder
    sku?: SortOrder
    name?: SortOrder
    unit?: SortOrder
    barcode?: SortOrderInput | SortOrder
    minStock?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ItemCountOrderByAggregateInput
    _avg?: ItemAvgOrderByAggregateInput
    _max?: ItemMaxOrderByAggregateInput
    _min?: ItemMinOrderByAggregateInput
    _sum?: ItemSumOrderByAggregateInput
  }

  export type ItemScalarWhereWithAggregatesInput = {
    AND?: ItemScalarWhereWithAggregatesInput | ItemScalarWhereWithAggregatesInput[]
    OR?: ItemScalarWhereWithAggregatesInput[]
    NOT?: ItemScalarWhereWithAggregatesInput | ItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Item"> | number
    sku?: StringWithAggregatesFilter<"Item"> | string
    name?: StringWithAggregatesFilter<"Item"> | string
    unit?: StringWithAggregatesFilter<"Item"> | string
    barcode?: StringNullableWithAggregatesFilter<"Item"> | string | null
    minStock?: IntNullableWithAggregatesFilter<"Item"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Item"> | Date | string
  }

  export type LocationWhereInput = {
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    id?: IntFilter<"Location"> | number
    code?: StringFilter<"Location"> | string
    description?: StringNullableFilter<"Location"> | string | null
    createdAt?: DateTimeFilter<"Location"> | Date | string
    stocks?: StockListRelationFilter
    stocktakes?: StocktakeLineListRelationFilter
    receiptLines?: ReceiptLineListRelationFilter
    dispatchLines?: DispatchLineListRelationFilter
  }

  export type LocationOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    stocks?: StockOrderByRelationAggregateInput
    stocktakes?: StocktakeLineOrderByRelationAggregateInput
    receiptLines?: ReceiptLineOrderByRelationAggregateInput
    dispatchLines?: DispatchLineOrderByRelationAggregateInput
  }

  export type LocationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    description?: StringNullableFilter<"Location"> | string | null
    createdAt?: DateTimeFilter<"Location"> | Date | string
    stocks?: StockListRelationFilter
    stocktakes?: StocktakeLineListRelationFilter
    receiptLines?: ReceiptLineListRelationFilter
    dispatchLines?: DispatchLineListRelationFilter
  }, "id" | "code">

  export type LocationOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: LocationCountOrderByAggregateInput
    _avg?: LocationAvgOrderByAggregateInput
    _max?: LocationMaxOrderByAggregateInput
    _min?: LocationMinOrderByAggregateInput
    _sum?: LocationSumOrderByAggregateInput
  }

  export type LocationScalarWhereWithAggregatesInput = {
    AND?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    OR?: LocationScalarWhereWithAggregatesInput[]
    NOT?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Location"> | number
    code?: StringWithAggregatesFilter<"Location"> | string
    description?: StringNullableWithAggregatesFilter<"Location"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Location"> | Date | string
  }

  export type StockWhereInput = {
    AND?: StockWhereInput | StockWhereInput[]
    OR?: StockWhereInput[]
    NOT?: StockWhereInput | StockWhereInput[]
    id?: IntFilter<"Stock"> | number
    itemId?: IntFilter<"Stock"> | number
    locationId?: IntFilter<"Stock"> | number
    quantity?: IntFilter<"Stock"> | number
    item?: XOR<ItemRelationFilter, ItemWhereInput>
    location?: XOR<LocationRelationFilter, LocationWhereInput>
  }

  export type StockOrderByWithRelationInput = {
    id?: SortOrder
    itemId?: SortOrder
    locationId?: SortOrder
    quantity?: SortOrder
    item?: ItemOrderByWithRelationInput
    location?: LocationOrderByWithRelationInput
  }

  export type StockWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    itemId_locationId?: StockItemIdLocationIdCompoundUniqueInput
    AND?: StockWhereInput | StockWhereInput[]
    OR?: StockWhereInput[]
    NOT?: StockWhereInput | StockWhereInput[]
    itemId?: IntFilter<"Stock"> | number
    locationId?: IntFilter<"Stock"> | number
    quantity?: IntFilter<"Stock"> | number
    item?: XOR<ItemRelationFilter, ItemWhereInput>
    location?: XOR<LocationRelationFilter, LocationWhereInput>
  }, "id" | "itemId_locationId">

  export type StockOrderByWithAggregationInput = {
    id?: SortOrder
    itemId?: SortOrder
    locationId?: SortOrder
    quantity?: SortOrder
    _count?: StockCountOrderByAggregateInput
    _avg?: StockAvgOrderByAggregateInput
    _max?: StockMaxOrderByAggregateInput
    _min?: StockMinOrderByAggregateInput
    _sum?: StockSumOrderByAggregateInput
  }

  export type StockScalarWhereWithAggregatesInput = {
    AND?: StockScalarWhereWithAggregatesInput | StockScalarWhereWithAggregatesInput[]
    OR?: StockScalarWhereWithAggregatesInput[]
    NOT?: StockScalarWhereWithAggregatesInput | StockScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Stock"> | number
    itemId?: IntWithAggregatesFilter<"Stock"> | number
    locationId?: IntWithAggregatesFilter<"Stock"> | number
    quantity?: IntWithAggregatesFilter<"Stock"> | number
  }

  export type ReceiptWhereInput = {
    AND?: ReceiptWhereInput | ReceiptWhereInput[]
    OR?: ReceiptWhereInput[]
    NOT?: ReceiptWhereInput | ReceiptWhereInput[]
    id?: IntFilter<"Receipt"> | number
    number?: StringFilter<"Receipt"> | string
    supplier?: StringNullableFilter<"Receipt"> | string | null
    status?: StringFilter<"Receipt"> | string
    date?: DateTimeFilter<"Receipt"> | Date | string
    createdAt?: DateTimeFilter<"Receipt"> | Date | string
    lines?: ReceiptLineListRelationFilter
  }

  export type ReceiptOrderByWithRelationInput = {
    id?: SortOrder
    number?: SortOrder
    supplier?: SortOrderInput | SortOrder
    status?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    lines?: ReceiptLineOrderByRelationAggregateInput
  }

  export type ReceiptWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    number?: string
    AND?: ReceiptWhereInput | ReceiptWhereInput[]
    OR?: ReceiptWhereInput[]
    NOT?: ReceiptWhereInput | ReceiptWhereInput[]
    supplier?: StringNullableFilter<"Receipt"> | string | null
    status?: StringFilter<"Receipt"> | string
    date?: DateTimeFilter<"Receipt"> | Date | string
    createdAt?: DateTimeFilter<"Receipt"> | Date | string
    lines?: ReceiptLineListRelationFilter
  }, "id" | "number">

  export type ReceiptOrderByWithAggregationInput = {
    id?: SortOrder
    number?: SortOrder
    supplier?: SortOrderInput | SortOrder
    status?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    _count?: ReceiptCountOrderByAggregateInput
    _avg?: ReceiptAvgOrderByAggregateInput
    _max?: ReceiptMaxOrderByAggregateInput
    _min?: ReceiptMinOrderByAggregateInput
    _sum?: ReceiptSumOrderByAggregateInput
  }

  export type ReceiptScalarWhereWithAggregatesInput = {
    AND?: ReceiptScalarWhereWithAggregatesInput | ReceiptScalarWhereWithAggregatesInput[]
    OR?: ReceiptScalarWhereWithAggregatesInput[]
    NOT?: ReceiptScalarWhereWithAggregatesInput | ReceiptScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Receipt"> | number
    number?: StringWithAggregatesFilter<"Receipt"> | string
    supplier?: StringNullableWithAggregatesFilter<"Receipt"> | string | null
    status?: StringWithAggregatesFilter<"Receipt"> | string
    date?: DateTimeWithAggregatesFilter<"Receipt"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Receipt"> | Date | string
  }

  export type ReceiptLineWhereInput = {
    AND?: ReceiptLineWhereInput | ReceiptLineWhereInput[]
    OR?: ReceiptLineWhereInput[]
    NOT?: ReceiptLineWhereInput | ReceiptLineWhereInput[]
    id?: IntFilter<"ReceiptLine"> | number
    receiptId?: IntFilter<"ReceiptLine"> | number
    itemId?: IntFilter<"ReceiptLine"> | number
    locationId?: IntFilter<"ReceiptLine"> | number
    qty?: IntFilter<"ReceiptLine"> | number
    receipt?: XOR<ReceiptRelationFilter, ReceiptWhereInput>
    item?: XOR<ItemRelationFilter, ItemWhereInput>
    location?: XOR<LocationRelationFilter, LocationWhereInput>
  }

  export type ReceiptLineOrderByWithRelationInput = {
    id?: SortOrder
    receiptId?: SortOrder
    itemId?: SortOrder
    locationId?: SortOrder
    qty?: SortOrder
    receipt?: ReceiptOrderByWithRelationInput
    item?: ItemOrderByWithRelationInput
    location?: LocationOrderByWithRelationInput
  }

  export type ReceiptLineWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReceiptLineWhereInput | ReceiptLineWhereInput[]
    OR?: ReceiptLineWhereInput[]
    NOT?: ReceiptLineWhereInput | ReceiptLineWhereInput[]
    receiptId?: IntFilter<"ReceiptLine"> | number
    itemId?: IntFilter<"ReceiptLine"> | number
    locationId?: IntFilter<"ReceiptLine"> | number
    qty?: IntFilter<"ReceiptLine"> | number
    receipt?: XOR<ReceiptRelationFilter, ReceiptWhereInput>
    item?: XOR<ItemRelationFilter, ItemWhereInput>
    location?: XOR<LocationRelationFilter, LocationWhereInput>
  }, "id">

  export type ReceiptLineOrderByWithAggregationInput = {
    id?: SortOrder
    receiptId?: SortOrder
    itemId?: SortOrder
    locationId?: SortOrder
    qty?: SortOrder
    _count?: ReceiptLineCountOrderByAggregateInput
    _avg?: ReceiptLineAvgOrderByAggregateInput
    _max?: ReceiptLineMaxOrderByAggregateInput
    _min?: ReceiptLineMinOrderByAggregateInput
    _sum?: ReceiptLineSumOrderByAggregateInput
  }

  export type ReceiptLineScalarWhereWithAggregatesInput = {
    AND?: ReceiptLineScalarWhereWithAggregatesInput | ReceiptLineScalarWhereWithAggregatesInput[]
    OR?: ReceiptLineScalarWhereWithAggregatesInput[]
    NOT?: ReceiptLineScalarWhereWithAggregatesInput | ReceiptLineScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ReceiptLine"> | number
    receiptId?: IntWithAggregatesFilter<"ReceiptLine"> | number
    itemId?: IntWithAggregatesFilter<"ReceiptLine"> | number
    locationId?: IntWithAggregatesFilter<"ReceiptLine"> | number
    qty?: IntWithAggregatesFilter<"ReceiptLine"> | number
  }

  export type DispatchWhereInput = {
    AND?: DispatchWhereInput | DispatchWhereInput[]
    OR?: DispatchWhereInput[]
    NOT?: DispatchWhereInput | DispatchWhereInput[]
    id?: IntFilter<"Dispatch"> | number
    number?: StringFilter<"Dispatch"> | string
    customer?: StringNullableFilter<"Dispatch"> | string | null
    status?: StringFilter<"Dispatch"> | string
    date?: DateTimeFilter<"Dispatch"> | Date | string
    createdAt?: DateTimeFilter<"Dispatch"> | Date | string
    lines?: DispatchLineListRelationFilter
  }

  export type DispatchOrderByWithRelationInput = {
    id?: SortOrder
    number?: SortOrder
    customer?: SortOrderInput | SortOrder
    status?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    lines?: DispatchLineOrderByRelationAggregateInput
  }

  export type DispatchWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    number?: string
    AND?: DispatchWhereInput | DispatchWhereInput[]
    OR?: DispatchWhereInput[]
    NOT?: DispatchWhereInput | DispatchWhereInput[]
    customer?: StringNullableFilter<"Dispatch"> | string | null
    status?: StringFilter<"Dispatch"> | string
    date?: DateTimeFilter<"Dispatch"> | Date | string
    createdAt?: DateTimeFilter<"Dispatch"> | Date | string
    lines?: DispatchLineListRelationFilter
  }, "id" | "number">

  export type DispatchOrderByWithAggregationInput = {
    id?: SortOrder
    number?: SortOrder
    customer?: SortOrderInput | SortOrder
    status?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    _count?: DispatchCountOrderByAggregateInput
    _avg?: DispatchAvgOrderByAggregateInput
    _max?: DispatchMaxOrderByAggregateInput
    _min?: DispatchMinOrderByAggregateInput
    _sum?: DispatchSumOrderByAggregateInput
  }

  export type DispatchScalarWhereWithAggregatesInput = {
    AND?: DispatchScalarWhereWithAggregatesInput | DispatchScalarWhereWithAggregatesInput[]
    OR?: DispatchScalarWhereWithAggregatesInput[]
    NOT?: DispatchScalarWhereWithAggregatesInput | DispatchScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Dispatch"> | number
    number?: StringWithAggregatesFilter<"Dispatch"> | string
    customer?: StringNullableWithAggregatesFilter<"Dispatch"> | string | null
    status?: StringWithAggregatesFilter<"Dispatch"> | string
    date?: DateTimeWithAggregatesFilter<"Dispatch"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Dispatch"> | Date | string
  }

  export type DispatchLineWhereInput = {
    AND?: DispatchLineWhereInput | DispatchLineWhereInput[]
    OR?: DispatchLineWhereInput[]
    NOT?: DispatchLineWhereInput | DispatchLineWhereInput[]
    id?: IntFilter<"DispatchLine"> | number
    dispatchId?: IntFilter<"DispatchLine"> | number
    itemId?: IntFilter<"DispatchLine"> | number
    locationId?: IntFilter<"DispatchLine"> | number
    qty?: IntFilter<"DispatchLine"> | number
    dispatch?: XOR<DispatchRelationFilter, DispatchWhereInput>
    item?: XOR<ItemRelationFilter, ItemWhereInput>
    location?: XOR<LocationRelationFilter, LocationWhereInput>
  }

  export type DispatchLineOrderByWithRelationInput = {
    id?: SortOrder
    dispatchId?: SortOrder
    itemId?: SortOrder
    locationId?: SortOrder
    qty?: SortOrder
    dispatch?: DispatchOrderByWithRelationInput
    item?: ItemOrderByWithRelationInput
    location?: LocationOrderByWithRelationInput
  }

  export type DispatchLineWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DispatchLineWhereInput | DispatchLineWhereInput[]
    OR?: DispatchLineWhereInput[]
    NOT?: DispatchLineWhereInput | DispatchLineWhereInput[]
    dispatchId?: IntFilter<"DispatchLine"> | number
    itemId?: IntFilter<"DispatchLine"> | number
    locationId?: IntFilter<"DispatchLine"> | number
    qty?: IntFilter<"DispatchLine"> | number
    dispatch?: XOR<DispatchRelationFilter, DispatchWhereInput>
    item?: XOR<ItemRelationFilter, ItemWhereInput>
    location?: XOR<LocationRelationFilter, LocationWhereInput>
  }, "id">

  export type DispatchLineOrderByWithAggregationInput = {
    id?: SortOrder
    dispatchId?: SortOrder
    itemId?: SortOrder
    locationId?: SortOrder
    qty?: SortOrder
    _count?: DispatchLineCountOrderByAggregateInput
    _avg?: DispatchLineAvgOrderByAggregateInput
    _max?: DispatchLineMaxOrderByAggregateInput
    _min?: DispatchLineMinOrderByAggregateInput
    _sum?: DispatchLineSumOrderByAggregateInput
  }

  export type DispatchLineScalarWhereWithAggregatesInput = {
    AND?: DispatchLineScalarWhereWithAggregatesInput | DispatchLineScalarWhereWithAggregatesInput[]
    OR?: DispatchLineScalarWhereWithAggregatesInput[]
    NOT?: DispatchLineScalarWhereWithAggregatesInput | DispatchLineScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DispatchLine"> | number
    dispatchId?: IntWithAggregatesFilter<"DispatchLine"> | number
    itemId?: IntWithAggregatesFilter<"DispatchLine"> | number
    locationId?: IntWithAggregatesFilter<"DispatchLine"> | number
    qty?: IntWithAggregatesFilter<"DispatchLine"> | number
  }

  export type StocktakeWhereInput = {
    AND?: StocktakeWhereInput | StocktakeWhereInput[]
    OR?: StocktakeWhereInput[]
    NOT?: StocktakeWhereInput | StocktakeWhereInput[]
    id?: IntFilter<"Stocktake"> | number
    number?: StringFilter<"Stocktake"> | string
    status?: StringFilter<"Stocktake"> | string
    date?: DateTimeFilter<"Stocktake"> | Date | string
    createdAt?: DateTimeFilter<"Stocktake"> | Date | string
    lines?: StocktakeLineListRelationFilter
  }

  export type StocktakeOrderByWithRelationInput = {
    id?: SortOrder
    number?: SortOrder
    status?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    lines?: StocktakeLineOrderByRelationAggregateInput
  }

  export type StocktakeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    number?: string
    AND?: StocktakeWhereInput | StocktakeWhereInput[]
    OR?: StocktakeWhereInput[]
    NOT?: StocktakeWhereInput | StocktakeWhereInput[]
    status?: StringFilter<"Stocktake"> | string
    date?: DateTimeFilter<"Stocktake"> | Date | string
    createdAt?: DateTimeFilter<"Stocktake"> | Date | string
    lines?: StocktakeLineListRelationFilter
  }, "id" | "number">

  export type StocktakeOrderByWithAggregationInput = {
    id?: SortOrder
    number?: SortOrder
    status?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    _count?: StocktakeCountOrderByAggregateInput
    _avg?: StocktakeAvgOrderByAggregateInput
    _max?: StocktakeMaxOrderByAggregateInput
    _min?: StocktakeMinOrderByAggregateInput
    _sum?: StocktakeSumOrderByAggregateInput
  }

  export type StocktakeScalarWhereWithAggregatesInput = {
    AND?: StocktakeScalarWhereWithAggregatesInput | StocktakeScalarWhereWithAggregatesInput[]
    OR?: StocktakeScalarWhereWithAggregatesInput[]
    NOT?: StocktakeScalarWhereWithAggregatesInput | StocktakeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Stocktake"> | number
    number?: StringWithAggregatesFilter<"Stocktake"> | string
    status?: StringWithAggregatesFilter<"Stocktake"> | string
    date?: DateTimeWithAggregatesFilter<"Stocktake"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Stocktake"> | Date | string
  }

  export type StocktakeLineWhereInput = {
    AND?: StocktakeLineWhereInput | StocktakeLineWhereInput[]
    OR?: StocktakeLineWhereInput[]
    NOT?: StocktakeLineWhereInput | StocktakeLineWhereInput[]
    id?: IntFilter<"StocktakeLine"> | number
    stocktakeId?: IntFilter<"StocktakeLine"> | number
    itemId?: IntFilter<"StocktakeLine"> | number
    locationId?: IntFilter<"StocktakeLine"> | number
    countedQty?: IntFilter<"StocktakeLine"> | number
    stocktake?: XOR<StocktakeRelationFilter, StocktakeWhereInput>
    item?: XOR<ItemRelationFilter, ItemWhereInput>
    location?: XOR<LocationRelationFilter, LocationWhereInput>
  }

  export type StocktakeLineOrderByWithRelationInput = {
    id?: SortOrder
    stocktakeId?: SortOrder
    itemId?: SortOrder
    locationId?: SortOrder
    countedQty?: SortOrder
    stocktake?: StocktakeOrderByWithRelationInput
    item?: ItemOrderByWithRelationInput
    location?: LocationOrderByWithRelationInput
  }

  export type StocktakeLineWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StocktakeLineWhereInput | StocktakeLineWhereInput[]
    OR?: StocktakeLineWhereInput[]
    NOT?: StocktakeLineWhereInput | StocktakeLineWhereInput[]
    stocktakeId?: IntFilter<"StocktakeLine"> | number
    itemId?: IntFilter<"StocktakeLine"> | number
    locationId?: IntFilter<"StocktakeLine"> | number
    countedQty?: IntFilter<"StocktakeLine"> | number
    stocktake?: XOR<StocktakeRelationFilter, StocktakeWhereInput>
    item?: XOR<ItemRelationFilter, ItemWhereInput>
    location?: XOR<LocationRelationFilter, LocationWhereInput>
  }, "id">

  export type StocktakeLineOrderByWithAggregationInput = {
    id?: SortOrder
    stocktakeId?: SortOrder
    itemId?: SortOrder
    locationId?: SortOrder
    countedQty?: SortOrder
    _count?: StocktakeLineCountOrderByAggregateInput
    _avg?: StocktakeLineAvgOrderByAggregateInput
    _max?: StocktakeLineMaxOrderByAggregateInput
    _min?: StocktakeLineMinOrderByAggregateInput
    _sum?: StocktakeLineSumOrderByAggregateInput
  }

  export type StocktakeLineScalarWhereWithAggregatesInput = {
    AND?: StocktakeLineScalarWhereWithAggregatesInput | StocktakeLineScalarWhereWithAggregatesInput[]
    OR?: StocktakeLineScalarWhereWithAggregatesInput[]
    NOT?: StocktakeLineScalarWhereWithAggregatesInput | StocktakeLineScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StocktakeLine"> | number
    stocktakeId?: IntWithAggregatesFilter<"StocktakeLine"> | number
    itemId?: IntWithAggregatesFilter<"StocktakeLine"> | number
    locationId?: IntWithAggregatesFilter<"StocktakeLine"> | number
    countedQty?: IntWithAggregatesFilter<"StocktakeLine"> | number
  }

  export type UserCreateInput = {
    email: string
    passwordHash: string
    role?: string
    createdAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    passwordHash: string
    role?: string
    createdAt?: Date | string
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    passwordHash: string
    role?: string
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemCreateInput = {
    sku: string
    name: string
    unit?: string
    barcode?: string | null
    minStock?: number | null
    createdAt?: Date | string
    stocks?: StockCreateNestedManyWithoutItemInput
    receipts?: ReceiptLineCreateNestedManyWithoutItemInput
    dispatches?: DispatchLineCreateNestedManyWithoutItemInput
    stocktakes?: StocktakeLineCreateNestedManyWithoutItemInput
  }

  export type ItemUncheckedCreateInput = {
    id?: number
    sku: string
    name: string
    unit?: string
    barcode?: string | null
    minStock?: number | null
    createdAt?: Date | string
    stocks?: StockUncheckedCreateNestedManyWithoutItemInput
    receipts?: ReceiptLineUncheckedCreateNestedManyWithoutItemInput
    dispatches?: DispatchLineUncheckedCreateNestedManyWithoutItemInput
    stocktakes?: StocktakeLineUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemUpdateInput = {
    sku?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    minStock?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stocks?: StockUpdateManyWithoutItemNestedInput
    receipts?: ReceiptLineUpdateManyWithoutItemNestedInput
    dispatches?: DispatchLineUpdateManyWithoutItemNestedInput
    stocktakes?: StocktakeLineUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    minStock?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stocks?: StockUncheckedUpdateManyWithoutItemNestedInput
    receipts?: ReceiptLineUncheckedUpdateManyWithoutItemNestedInput
    dispatches?: DispatchLineUncheckedUpdateManyWithoutItemNestedInput
    stocktakes?: StocktakeLineUncheckedUpdateManyWithoutItemNestedInput
  }

  export type ItemCreateManyInput = {
    id?: number
    sku: string
    name: string
    unit?: string
    barcode?: string | null
    minStock?: number | null
    createdAt?: Date | string
  }

  export type ItemUpdateManyMutationInput = {
    sku?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    minStock?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    minStock?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationCreateInput = {
    code: string
    description?: string | null
    createdAt?: Date | string
    stocks?: StockCreateNestedManyWithoutLocationInput
    stocktakes?: StocktakeLineCreateNestedManyWithoutLocationInput
    receiptLines?: ReceiptLineCreateNestedManyWithoutLocationInput
    dispatchLines?: DispatchLineCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateInput = {
    id?: number
    code: string
    description?: string | null
    createdAt?: Date | string
    stocks?: StockUncheckedCreateNestedManyWithoutLocationInput
    stocktakes?: StocktakeLineUncheckedCreateNestedManyWithoutLocationInput
    receiptLines?: ReceiptLineUncheckedCreateNestedManyWithoutLocationInput
    dispatchLines?: DispatchLineUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stocks?: StockUpdateManyWithoutLocationNestedInput
    stocktakes?: StocktakeLineUpdateManyWithoutLocationNestedInput
    receiptLines?: ReceiptLineUpdateManyWithoutLocationNestedInput
    dispatchLines?: DispatchLineUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stocks?: StockUncheckedUpdateManyWithoutLocationNestedInput
    stocktakes?: StocktakeLineUncheckedUpdateManyWithoutLocationNestedInput
    receiptLines?: ReceiptLineUncheckedUpdateManyWithoutLocationNestedInput
    dispatchLines?: DispatchLineUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationCreateManyInput = {
    id?: number
    code: string
    description?: string | null
    createdAt?: Date | string
  }

  export type LocationUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockCreateInput = {
    quantity?: number
    item: ItemCreateNestedOneWithoutStocksInput
    location: LocationCreateNestedOneWithoutStocksInput
  }

  export type StockUncheckedCreateInput = {
    id?: number
    itemId: number
    locationId: number
    quantity?: number
  }

  export type StockUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    item?: ItemUpdateOneRequiredWithoutStocksNestedInput
    location?: LocationUpdateOneRequiredWithoutStocksNestedInput
  }

  export type StockUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type StockCreateManyInput = {
    id?: number
    itemId: number
    locationId: number
    quantity?: number
  }

  export type StockUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type StockUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type ReceiptCreateInput = {
    number: string
    supplier?: string | null
    status?: string
    date?: Date | string
    createdAt?: Date | string
    lines?: ReceiptLineCreateNestedManyWithoutReceiptInput
  }

  export type ReceiptUncheckedCreateInput = {
    id?: number
    number: string
    supplier?: string | null
    status?: string
    date?: Date | string
    createdAt?: Date | string
    lines?: ReceiptLineUncheckedCreateNestedManyWithoutReceiptInput
  }

  export type ReceiptUpdateInput = {
    number?: StringFieldUpdateOperationsInput | string
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lines?: ReceiptLineUpdateManyWithoutReceiptNestedInput
  }

  export type ReceiptUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lines?: ReceiptLineUncheckedUpdateManyWithoutReceiptNestedInput
  }

  export type ReceiptCreateManyInput = {
    id?: number
    number: string
    supplier?: string | null
    status?: string
    date?: Date | string
    createdAt?: Date | string
  }

  export type ReceiptUpdateManyMutationInput = {
    number?: StringFieldUpdateOperationsInput | string
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptLineCreateInput = {
    qty: number
    receipt: ReceiptCreateNestedOneWithoutLinesInput
    item: ItemCreateNestedOneWithoutReceiptsInput
    location: LocationCreateNestedOneWithoutReceiptLinesInput
  }

  export type ReceiptLineUncheckedCreateInput = {
    id?: number
    receiptId: number
    itemId: number
    locationId: number
    qty: number
  }

  export type ReceiptLineUpdateInput = {
    qty?: IntFieldUpdateOperationsInput | number
    receipt?: ReceiptUpdateOneRequiredWithoutLinesNestedInput
    item?: ItemUpdateOneRequiredWithoutReceiptsNestedInput
    location?: LocationUpdateOneRequiredWithoutReceiptLinesNestedInput
  }

  export type ReceiptLineUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    receiptId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
  }

  export type ReceiptLineCreateManyInput = {
    id?: number
    receiptId: number
    itemId: number
    locationId: number
    qty: number
  }

  export type ReceiptLineUpdateManyMutationInput = {
    qty?: IntFieldUpdateOperationsInput | number
  }

  export type ReceiptLineUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    receiptId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
  }

  export type DispatchCreateInput = {
    number: string
    customer?: string | null
    status?: string
    date?: Date | string
    createdAt?: Date | string
    lines?: DispatchLineCreateNestedManyWithoutDispatchInput
  }

  export type DispatchUncheckedCreateInput = {
    id?: number
    number: string
    customer?: string | null
    status?: string
    date?: Date | string
    createdAt?: Date | string
    lines?: DispatchLineUncheckedCreateNestedManyWithoutDispatchInput
  }

  export type DispatchUpdateInput = {
    number?: StringFieldUpdateOperationsInput | string
    customer?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lines?: DispatchLineUpdateManyWithoutDispatchNestedInput
  }

  export type DispatchUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    customer?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lines?: DispatchLineUncheckedUpdateManyWithoutDispatchNestedInput
  }

  export type DispatchCreateManyInput = {
    id?: number
    number: string
    customer?: string | null
    status?: string
    date?: Date | string
    createdAt?: Date | string
  }

  export type DispatchUpdateManyMutationInput = {
    number?: StringFieldUpdateOperationsInput | string
    customer?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DispatchUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    customer?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DispatchLineCreateInput = {
    qty: number
    dispatch: DispatchCreateNestedOneWithoutLinesInput
    item: ItemCreateNestedOneWithoutDispatchesInput
    location: LocationCreateNestedOneWithoutDispatchLinesInput
  }

  export type DispatchLineUncheckedCreateInput = {
    id?: number
    dispatchId: number
    itemId: number
    locationId: number
    qty: number
  }

  export type DispatchLineUpdateInput = {
    qty?: IntFieldUpdateOperationsInput | number
    dispatch?: DispatchUpdateOneRequiredWithoutLinesNestedInput
    item?: ItemUpdateOneRequiredWithoutDispatchesNestedInput
    location?: LocationUpdateOneRequiredWithoutDispatchLinesNestedInput
  }

  export type DispatchLineUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dispatchId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
  }

  export type DispatchLineCreateManyInput = {
    id?: number
    dispatchId: number
    itemId: number
    locationId: number
    qty: number
  }

  export type DispatchLineUpdateManyMutationInput = {
    qty?: IntFieldUpdateOperationsInput | number
  }

  export type DispatchLineUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dispatchId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
  }

  export type StocktakeCreateInput = {
    number: string
    status?: string
    date?: Date | string
    createdAt?: Date | string
    lines?: StocktakeLineCreateNestedManyWithoutStocktakeInput
  }

  export type StocktakeUncheckedCreateInput = {
    id?: number
    number: string
    status?: string
    date?: Date | string
    createdAt?: Date | string
    lines?: StocktakeLineUncheckedCreateNestedManyWithoutStocktakeInput
  }

  export type StocktakeUpdateInput = {
    number?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lines?: StocktakeLineUpdateManyWithoutStocktakeNestedInput
  }

  export type StocktakeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lines?: StocktakeLineUncheckedUpdateManyWithoutStocktakeNestedInput
  }

  export type StocktakeCreateManyInput = {
    id?: number
    number: string
    status?: string
    date?: Date | string
    createdAt?: Date | string
  }

  export type StocktakeUpdateManyMutationInput = {
    number?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StocktakeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StocktakeLineCreateInput = {
    countedQty: number
    stocktake: StocktakeCreateNestedOneWithoutLinesInput
    item: ItemCreateNestedOneWithoutStocktakesInput
    location: LocationCreateNestedOneWithoutStocktakesInput
  }

  export type StocktakeLineUncheckedCreateInput = {
    id?: number
    stocktakeId: number
    itemId: number
    locationId: number
    countedQty: number
  }

  export type StocktakeLineUpdateInput = {
    countedQty?: IntFieldUpdateOperationsInput | number
    stocktake?: StocktakeUpdateOneRequiredWithoutLinesNestedInput
    item?: ItemUpdateOneRequiredWithoutStocktakesNestedInput
    location?: LocationUpdateOneRequiredWithoutStocktakesNestedInput
  }

  export type StocktakeLineUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    stocktakeId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    countedQty?: IntFieldUpdateOperationsInput | number
  }

  export type StocktakeLineCreateManyInput = {
    id?: number
    stocktakeId: number
    itemId: number
    locationId: number
    countedQty: number
  }

  export type StocktakeLineUpdateManyMutationInput = {
    countedQty?: IntFieldUpdateOperationsInput | number
  }

  export type StocktakeLineUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    stocktakeId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    countedQty?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StockListRelationFilter = {
    every?: StockWhereInput
    some?: StockWhereInput
    none?: StockWhereInput
  }

  export type ReceiptLineListRelationFilter = {
    every?: ReceiptLineWhereInput
    some?: ReceiptLineWhereInput
    none?: ReceiptLineWhereInput
  }

  export type DispatchLineListRelationFilter = {
    every?: DispatchLineWhereInput
    some?: DispatchLineWhereInput
    none?: DispatchLineWhereInput
  }

  export type StocktakeLineListRelationFilter = {
    every?: StocktakeLineWhereInput
    some?: StocktakeLineWhereInput
    none?: StocktakeLineWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type StockOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReceiptLineOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DispatchLineOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StocktakeLineOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ItemCountOrderByAggregateInput = {
    id?: SortOrder
    sku?: SortOrder
    name?: SortOrder
    unit?: SortOrder
    barcode?: SortOrder
    minStock?: SortOrder
    createdAt?: SortOrder
  }

  export type ItemAvgOrderByAggregateInput = {
    id?: SortOrder
    minStock?: SortOrder
  }

  export type ItemMaxOrderByAggregateInput = {
    id?: SortOrder
    sku?: SortOrder
    name?: SortOrder
    unit?: SortOrder
    barcode?: SortOrder
    minStock?: SortOrder
    createdAt?: SortOrder
  }

  export type ItemMinOrderByAggregateInput = {
    id?: SortOrder
    sku?: SortOrder
    name?: SortOrder
    unit?: SortOrder
    barcode?: SortOrder
    minStock?: SortOrder
    createdAt?: SortOrder
  }

  export type ItemSumOrderByAggregateInput = {
    id?: SortOrder
    minStock?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type LocationCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type LocationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LocationMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type LocationMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type LocationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ItemRelationFilter = {
    is?: ItemWhereInput
    isNot?: ItemWhereInput
  }

  export type LocationRelationFilter = {
    is?: LocationWhereInput
    isNot?: LocationWhereInput
  }

  export type StockItemIdLocationIdCompoundUniqueInput = {
    itemId: number
    locationId: number
  }

  export type StockCountOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    locationId?: SortOrder
    quantity?: SortOrder
  }

  export type StockAvgOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    locationId?: SortOrder
    quantity?: SortOrder
  }

  export type StockMaxOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    locationId?: SortOrder
    quantity?: SortOrder
  }

  export type StockMinOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    locationId?: SortOrder
    quantity?: SortOrder
  }

  export type StockSumOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    locationId?: SortOrder
    quantity?: SortOrder
  }

  export type ReceiptCountOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    supplier?: SortOrder
    status?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
  }

  export type ReceiptAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ReceiptMaxOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    supplier?: SortOrder
    status?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
  }

  export type ReceiptMinOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    supplier?: SortOrder
    status?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
  }

  export type ReceiptSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ReceiptRelationFilter = {
    is?: ReceiptWhereInput
    isNot?: ReceiptWhereInput
  }

  export type ReceiptLineCountOrderByAggregateInput = {
    id?: SortOrder
    receiptId?: SortOrder
    itemId?: SortOrder
    locationId?: SortOrder
    qty?: SortOrder
  }

  export type ReceiptLineAvgOrderByAggregateInput = {
    id?: SortOrder
    receiptId?: SortOrder
    itemId?: SortOrder
    locationId?: SortOrder
    qty?: SortOrder
  }

  export type ReceiptLineMaxOrderByAggregateInput = {
    id?: SortOrder
    receiptId?: SortOrder
    itemId?: SortOrder
    locationId?: SortOrder
    qty?: SortOrder
  }

  export type ReceiptLineMinOrderByAggregateInput = {
    id?: SortOrder
    receiptId?: SortOrder
    itemId?: SortOrder
    locationId?: SortOrder
    qty?: SortOrder
  }

  export type ReceiptLineSumOrderByAggregateInput = {
    id?: SortOrder
    receiptId?: SortOrder
    itemId?: SortOrder
    locationId?: SortOrder
    qty?: SortOrder
  }

  export type DispatchCountOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    customer?: SortOrder
    status?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
  }

  export type DispatchAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DispatchMaxOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    customer?: SortOrder
    status?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
  }

  export type DispatchMinOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    customer?: SortOrder
    status?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
  }

  export type DispatchSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DispatchRelationFilter = {
    is?: DispatchWhereInput
    isNot?: DispatchWhereInput
  }

  export type DispatchLineCountOrderByAggregateInput = {
    id?: SortOrder
    dispatchId?: SortOrder
    itemId?: SortOrder
    locationId?: SortOrder
    qty?: SortOrder
  }

  export type DispatchLineAvgOrderByAggregateInput = {
    id?: SortOrder
    dispatchId?: SortOrder
    itemId?: SortOrder
    locationId?: SortOrder
    qty?: SortOrder
  }

  export type DispatchLineMaxOrderByAggregateInput = {
    id?: SortOrder
    dispatchId?: SortOrder
    itemId?: SortOrder
    locationId?: SortOrder
    qty?: SortOrder
  }

  export type DispatchLineMinOrderByAggregateInput = {
    id?: SortOrder
    dispatchId?: SortOrder
    itemId?: SortOrder
    locationId?: SortOrder
    qty?: SortOrder
  }

  export type DispatchLineSumOrderByAggregateInput = {
    id?: SortOrder
    dispatchId?: SortOrder
    itemId?: SortOrder
    locationId?: SortOrder
    qty?: SortOrder
  }

  export type StocktakeCountOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    status?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
  }

  export type StocktakeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StocktakeMaxOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    status?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
  }

  export type StocktakeMinOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    status?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
  }

  export type StocktakeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StocktakeRelationFilter = {
    is?: StocktakeWhereInput
    isNot?: StocktakeWhereInput
  }

  export type StocktakeLineCountOrderByAggregateInput = {
    id?: SortOrder
    stocktakeId?: SortOrder
    itemId?: SortOrder
    locationId?: SortOrder
    countedQty?: SortOrder
  }

  export type StocktakeLineAvgOrderByAggregateInput = {
    id?: SortOrder
    stocktakeId?: SortOrder
    itemId?: SortOrder
    locationId?: SortOrder
    countedQty?: SortOrder
  }

  export type StocktakeLineMaxOrderByAggregateInput = {
    id?: SortOrder
    stocktakeId?: SortOrder
    itemId?: SortOrder
    locationId?: SortOrder
    countedQty?: SortOrder
  }

  export type StocktakeLineMinOrderByAggregateInput = {
    id?: SortOrder
    stocktakeId?: SortOrder
    itemId?: SortOrder
    locationId?: SortOrder
    countedQty?: SortOrder
  }

  export type StocktakeLineSumOrderByAggregateInput = {
    id?: SortOrder
    stocktakeId?: SortOrder
    itemId?: SortOrder
    locationId?: SortOrder
    countedQty?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StockCreateNestedManyWithoutItemInput = {
    create?: XOR<StockCreateWithoutItemInput, StockUncheckedCreateWithoutItemInput> | StockCreateWithoutItemInput[] | StockUncheckedCreateWithoutItemInput[]
    connectOrCreate?: StockCreateOrConnectWithoutItemInput | StockCreateOrConnectWithoutItemInput[]
    createMany?: StockCreateManyItemInputEnvelope
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
  }

  export type ReceiptLineCreateNestedManyWithoutItemInput = {
    create?: XOR<ReceiptLineCreateWithoutItemInput, ReceiptLineUncheckedCreateWithoutItemInput> | ReceiptLineCreateWithoutItemInput[] | ReceiptLineUncheckedCreateWithoutItemInput[]
    connectOrCreate?: ReceiptLineCreateOrConnectWithoutItemInput | ReceiptLineCreateOrConnectWithoutItemInput[]
    createMany?: ReceiptLineCreateManyItemInputEnvelope
    connect?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
  }

  export type DispatchLineCreateNestedManyWithoutItemInput = {
    create?: XOR<DispatchLineCreateWithoutItemInput, DispatchLineUncheckedCreateWithoutItemInput> | DispatchLineCreateWithoutItemInput[] | DispatchLineUncheckedCreateWithoutItemInput[]
    connectOrCreate?: DispatchLineCreateOrConnectWithoutItemInput | DispatchLineCreateOrConnectWithoutItemInput[]
    createMany?: DispatchLineCreateManyItemInputEnvelope
    connect?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
  }

  export type StocktakeLineCreateNestedManyWithoutItemInput = {
    create?: XOR<StocktakeLineCreateWithoutItemInput, StocktakeLineUncheckedCreateWithoutItemInput> | StocktakeLineCreateWithoutItemInput[] | StocktakeLineUncheckedCreateWithoutItemInput[]
    connectOrCreate?: StocktakeLineCreateOrConnectWithoutItemInput | StocktakeLineCreateOrConnectWithoutItemInput[]
    createMany?: StocktakeLineCreateManyItemInputEnvelope
    connect?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
  }

  export type StockUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<StockCreateWithoutItemInput, StockUncheckedCreateWithoutItemInput> | StockCreateWithoutItemInput[] | StockUncheckedCreateWithoutItemInput[]
    connectOrCreate?: StockCreateOrConnectWithoutItemInput | StockCreateOrConnectWithoutItemInput[]
    createMany?: StockCreateManyItemInputEnvelope
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
  }

  export type ReceiptLineUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<ReceiptLineCreateWithoutItemInput, ReceiptLineUncheckedCreateWithoutItemInput> | ReceiptLineCreateWithoutItemInput[] | ReceiptLineUncheckedCreateWithoutItemInput[]
    connectOrCreate?: ReceiptLineCreateOrConnectWithoutItemInput | ReceiptLineCreateOrConnectWithoutItemInput[]
    createMany?: ReceiptLineCreateManyItemInputEnvelope
    connect?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
  }

  export type DispatchLineUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<DispatchLineCreateWithoutItemInput, DispatchLineUncheckedCreateWithoutItemInput> | DispatchLineCreateWithoutItemInput[] | DispatchLineUncheckedCreateWithoutItemInput[]
    connectOrCreate?: DispatchLineCreateOrConnectWithoutItemInput | DispatchLineCreateOrConnectWithoutItemInput[]
    createMany?: DispatchLineCreateManyItemInputEnvelope
    connect?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
  }

  export type StocktakeLineUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<StocktakeLineCreateWithoutItemInput, StocktakeLineUncheckedCreateWithoutItemInput> | StocktakeLineCreateWithoutItemInput[] | StocktakeLineUncheckedCreateWithoutItemInput[]
    connectOrCreate?: StocktakeLineCreateOrConnectWithoutItemInput | StocktakeLineCreateOrConnectWithoutItemInput[]
    createMany?: StocktakeLineCreateManyItemInputEnvelope
    connect?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StockUpdateManyWithoutItemNestedInput = {
    create?: XOR<StockCreateWithoutItemInput, StockUncheckedCreateWithoutItemInput> | StockCreateWithoutItemInput[] | StockUncheckedCreateWithoutItemInput[]
    connectOrCreate?: StockCreateOrConnectWithoutItemInput | StockCreateOrConnectWithoutItemInput[]
    upsert?: StockUpsertWithWhereUniqueWithoutItemInput | StockUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: StockCreateManyItemInputEnvelope
    set?: StockWhereUniqueInput | StockWhereUniqueInput[]
    disconnect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    delete?: StockWhereUniqueInput | StockWhereUniqueInput[]
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    update?: StockUpdateWithWhereUniqueWithoutItemInput | StockUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: StockUpdateManyWithWhereWithoutItemInput | StockUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: StockScalarWhereInput | StockScalarWhereInput[]
  }

  export type ReceiptLineUpdateManyWithoutItemNestedInput = {
    create?: XOR<ReceiptLineCreateWithoutItemInput, ReceiptLineUncheckedCreateWithoutItemInput> | ReceiptLineCreateWithoutItemInput[] | ReceiptLineUncheckedCreateWithoutItemInput[]
    connectOrCreate?: ReceiptLineCreateOrConnectWithoutItemInput | ReceiptLineCreateOrConnectWithoutItemInput[]
    upsert?: ReceiptLineUpsertWithWhereUniqueWithoutItemInput | ReceiptLineUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: ReceiptLineCreateManyItemInputEnvelope
    set?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
    disconnect?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
    delete?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
    connect?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
    update?: ReceiptLineUpdateWithWhereUniqueWithoutItemInput | ReceiptLineUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: ReceiptLineUpdateManyWithWhereWithoutItemInput | ReceiptLineUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: ReceiptLineScalarWhereInput | ReceiptLineScalarWhereInput[]
  }

  export type DispatchLineUpdateManyWithoutItemNestedInput = {
    create?: XOR<DispatchLineCreateWithoutItemInput, DispatchLineUncheckedCreateWithoutItemInput> | DispatchLineCreateWithoutItemInput[] | DispatchLineUncheckedCreateWithoutItemInput[]
    connectOrCreate?: DispatchLineCreateOrConnectWithoutItemInput | DispatchLineCreateOrConnectWithoutItemInput[]
    upsert?: DispatchLineUpsertWithWhereUniqueWithoutItemInput | DispatchLineUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: DispatchLineCreateManyItemInputEnvelope
    set?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
    disconnect?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
    delete?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
    connect?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
    update?: DispatchLineUpdateWithWhereUniqueWithoutItemInput | DispatchLineUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: DispatchLineUpdateManyWithWhereWithoutItemInput | DispatchLineUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: DispatchLineScalarWhereInput | DispatchLineScalarWhereInput[]
  }

  export type StocktakeLineUpdateManyWithoutItemNestedInput = {
    create?: XOR<StocktakeLineCreateWithoutItemInput, StocktakeLineUncheckedCreateWithoutItemInput> | StocktakeLineCreateWithoutItemInput[] | StocktakeLineUncheckedCreateWithoutItemInput[]
    connectOrCreate?: StocktakeLineCreateOrConnectWithoutItemInput | StocktakeLineCreateOrConnectWithoutItemInput[]
    upsert?: StocktakeLineUpsertWithWhereUniqueWithoutItemInput | StocktakeLineUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: StocktakeLineCreateManyItemInputEnvelope
    set?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
    disconnect?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
    delete?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
    connect?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
    update?: StocktakeLineUpdateWithWhereUniqueWithoutItemInput | StocktakeLineUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: StocktakeLineUpdateManyWithWhereWithoutItemInput | StocktakeLineUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: StocktakeLineScalarWhereInput | StocktakeLineScalarWhereInput[]
  }

  export type StockUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<StockCreateWithoutItemInput, StockUncheckedCreateWithoutItemInput> | StockCreateWithoutItemInput[] | StockUncheckedCreateWithoutItemInput[]
    connectOrCreate?: StockCreateOrConnectWithoutItemInput | StockCreateOrConnectWithoutItemInput[]
    upsert?: StockUpsertWithWhereUniqueWithoutItemInput | StockUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: StockCreateManyItemInputEnvelope
    set?: StockWhereUniqueInput | StockWhereUniqueInput[]
    disconnect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    delete?: StockWhereUniqueInput | StockWhereUniqueInput[]
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    update?: StockUpdateWithWhereUniqueWithoutItemInput | StockUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: StockUpdateManyWithWhereWithoutItemInput | StockUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: StockScalarWhereInput | StockScalarWhereInput[]
  }

  export type ReceiptLineUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<ReceiptLineCreateWithoutItemInput, ReceiptLineUncheckedCreateWithoutItemInput> | ReceiptLineCreateWithoutItemInput[] | ReceiptLineUncheckedCreateWithoutItemInput[]
    connectOrCreate?: ReceiptLineCreateOrConnectWithoutItemInput | ReceiptLineCreateOrConnectWithoutItemInput[]
    upsert?: ReceiptLineUpsertWithWhereUniqueWithoutItemInput | ReceiptLineUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: ReceiptLineCreateManyItemInputEnvelope
    set?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
    disconnect?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
    delete?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
    connect?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
    update?: ReceiptLineUpdateWithWhereUniqueWithoutItemInput | ReceiptLineUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: ReceiptLineUpdateManyWithWhereWithoutItemInput | ReceiptLineUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: ReceiptLineScalarWhereInput | ReceiptLineScalarWhereInput[]
  }

  export type DispatchLineUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<DispatchLineCreateWithoutItemInput, DispatchLineUncheckedCreateWithoutItemInput> | DispatchLineCreateWithoutItemInput[] | DispatchLineUncheckedCreateWithoutItemInput[]
    connectOrCreate?: DispatchLineCreateOrConnectWithoutItemInput | DispatchLineCreateOrConnectWithoutItemInput[]
    upsert?: DispatchLineUpsertWithWhereUniqueWithoutItemInput | DispatchLineUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: DispatchLineCreateManyItemInputEnvelope
    set?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
    disconnect?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
    delete?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
    connect?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
    update?: DispatchLineUpdateWithWhereUniqueWithoutItemInput | DispatchLineUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: DispatchLineUpdateManyWithWhereWithoutItemInput | DispatchLineUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: DispatchLineScalarWhereInput | DispatchLineScalarWhereInput[]
  }

  export type StocktakeLineUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<StocktakeLineCreateWithoutItemInput, StocktakeLineUncheckedCreateWithoutItemInput> | StocktakeLineCreateWithoutItemInput[] | StocktakeLineUncheckedCreateWithoutItemInput[]
    connectOrCreate?: StocktakeLineCreateOrConnectWithoutItemInput | StocktakeLineCreateOrConnectWithoutItemInput[]
    upsert?: StocktakeLineUpsertWithWhereUniqueWithoutItemInput | StocktakeLineUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: StocktakeLineCreateManyItemInputEnvelope
    set?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
    disconnect?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
    delete?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
    connect?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
    update?: StocktakeLineUpdateWithWhereUniqueWithoutItemInput | StocktakeLineUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: StocktakeLineUpdateManyWithWhereWithoutItemInput | StocktakeLineUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: StocktakeLineScalarWhereInput | StocktakeLineScalarWhereInput[]
  }

  export type StockCreateNestedManyWithoutLocationInput = {
    create?: XOR<StockCreateWithoutLocationInput, StockUncheckedCreateWithoutLocationInput> | StockCreateWithoutLocationInput[] | StockUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: StockCreateOrConnectWithoutLocationInput | StockCreateOrConnectWithoutLocationInput[]
    createMany?: StockCreateManyLocationInputEnvelope
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
  }

  export type StocktakeLineCreateNestedManyWithoutLocationInput = {
    create?: XOR<StocktakeLineCreateWithoutLocationInput, StocktakeLineUncheckedCreateWithoutLocationInput> | StocktakeLineCreateWithoutLocationInput[] | StocktakeLineUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: StocktakeLineCreateOrConnectWithoutLocationInput | StocktakeLineCreateOrConnectWithoutLocationInput[]
    createMany?: StocktakeLineCreateManyLocationInputEnvelope
    connect?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
  }

  export type ReceiptLineCreateNestedManyWithoutLocationInput = {
    create?: XOR<ReceiptLineCreateWithoutLocationInput, ReceiptLineUncheckedCreateWithoutLocationInput> | ReceiptLineCreateWithoutLocationInput[] | ReceiptLineUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: ReceiptLineCreateOrConnectWithoutLocationInput | ReceiptLineCreateOrConnectWithoutLocationInput[]
    createMany?: ReceiptLineCreateManyLocationInputEnvelope
    connect?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
  }

  export type DispatchLineCreateNestedManyWithoutLocationInput = {
    create?: XOR<DispatchLineCreateWithoutLocationInput, DispatchLineUncheckedCreateWithoutLocationInput> | DispatchLineCreateWithoutLocationInput[] | DispatchLineUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: DispatchLineCreateOrConnectWithoutLocationInput | DispatchLineCreateOrConnectWithoutLocationInput[]
    createMany?: DispatchLineCreateManyLocationInputEnvelope
    connect?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
  }

  export type StockUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<StockCreateWithoutLocationInput, StockUncheckedCreateWithoutLocationInput> | StockCreateWithoutLocationInput[] | StockUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: StockCreateOrConnectWithoutLocationInput | StockCreateOrConnectWithoutLocationInput[]
    createMany?: StockCreateManyLocationInputEnvelope
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
  }

  export type StocktakeLineUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<StocktakeLineCreateWithoutLocationInput, StocktakeLineUncheckedCreateWithoutLocationInput> | StocktakeLineCreateWithoutLocationInput[] | StocktakeLineUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: StocktakeLineCreateOrConnectWithoutLocationInput | StocktakeLineCreateOrConnectWithoutLocationInput[]
    createMany?: StocktakeLineCreateManyLocationInputEnvelope
    connect?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
  }

  export type ReceiptLineUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<ReceiptLineCreateWithoutLocationInput, ReceiptLineUncheckedCreateWithoutLocationInput> | ReceiptLineCreateWithoutLocationInput[] | ReceiptLineUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: ReceiptLineCreateOrConnectWithoutLocationInput | ReceiptLineCreateOrConnectWithoutLocationInput[]
    createMany?: ReceiptLineCreateManyLocationInputEnvelope
    connect?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
  }

  export type DispatchLineUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<DispatchLineCreateWithoutLocationInput, DispatchLineUncheckedCreateWithoutLocationInput> | DispatchLineCreateWithoutLocationInput[] | DispatchLineUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: DispatchLineCreateOrConnectWithoutLocationInput | DispatchLineCreateOrConnectWithoutLocationInput[]
    createMany?: DispatchLineCreateManyLocationInputEnvelope
    connect?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
  }

  export type StockUpdateManyWithoutLocationNestedInput = {
    create?: XOR<StockCreateWithoutLocationInput, StockUncheckedCreateWithoutLocationInput> | StockCreateWithoutLocationInput[] | StockUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: StockCreateOrConnectWithoutLocationInput | StockCreateOrConnectWithoutLocationInput[]
    upsert?: StockUpsertWithWhereUniqueWithoutLocationInput | StockUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: StockCreateManyLocationInputEnvelope
    set?: StockWhereUniqueInput | StockWhereUniqueInput[]
    disconnect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    delete?: StockWhereUniqueInput | StockWhereUniqueInput[]
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    update?: StockUpdateWithWhereUniqueWithoutLocationInput | StockUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: StockUpdateManyWithWhereWithoutLocationInput | StockUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: StockScalarWhereInput | StockScalarWhereInput[]
  }

  export type StocktakeLineUpdateManyWithoutLocationNestedInput = {
    create?: XOR<StocktakeLineCreateWithoutLocationInput, StocktakeLineUncheckedCreateWithoutLocationInput> | StocktakeLineCreateWithoutLocationInput[] | StocktakeLineUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: StocktakeLineCreateOrConnectWithoutLocationInput | StocktakeLineCreateOrConnectWithoutLocationInput[]
    upsert?: StocktakeLineUpsertWithWhereUniqueWithoutLocationInput | StocktakeLineUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: StocktakeLineCreateManyLocationInputEnvelope
    set?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
    disconnect?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
    delete?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
    connect?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
    update?: StocktakeLineUpdateWithWhereUniqueWithoutLocationInput | StocktakeLineUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: StocktakeLineUpdateManyWithWhereWithoutLocationInput | StocktakeLineUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: StocktakeLineScalarWhereInput | StocktakeLineScalarWhereInput[]
  }

  export type ReceiptLineUpdateManyWithoutLocationNestedInput = {
    create?: XOR<ReceiptLineCreateWithoutLocationInput, ReceiptLineUncheckedCreateWithoutLocationInput> | ReceiptLineCreateWithoutLocationInput[] | ReceiptLineUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: ReceiptLineCreateOrConnectWithoutLocationInput | ReceiptLineCreateOrConnectWithoutLocationInput[]
    upsert?: ReceiptLineUpsertWithWhereUniqueWithoutLocationInput | ReceiptLineUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: ReceiptLineCreateManyLocationInputEnvelope
    set?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
    disconnect?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
    delete?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
    connect?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
    update?: ReceiptLineUpdateWithWhereUniqueWithoutLocationInput | ReceiptLineUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: ReceiptLineUpdateManyWithWhereWithoutLocationInput | ReceiptLineUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: ReceiptLineScalarWhereInput | ReceiptLineScalarWhereInput[]
  }

  export type DispatchLineUpdateManyWithoutLocationNestedInput = {
    create?: XOR<DispatchLineCreateWithoutLocationInput, DispatchLineUncheckedCreateWithoutLocationInput> | DispatchLineCreateWithoutLocationInput[] | DispatchLineUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: DispatchLineCreateOrConnectWithoutLocationInput | DispatchLineCreateOrConnectWithoutLocationInput[]
    upsert?: DispatchLineUpsertWithWhereUniqueWithoutLocationInput | DispatchLineUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: DispatchLineCreateManyLocationInputEnvelope
    set?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
    disconnect?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
    delete?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
    connect?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
    update?: DispatchLineUpdateWithWhereUniqueWithoutLocationInput | DispatchLineUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: DispatchLineUpdateManyWithWhereWithoutLocationInput | DispatchLineUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: DispatchLineScalarWhereInput | DispatchLineScalarWhereInput[]
  }

  export type StockUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<StockCreateWithoutLocationInput, StockUncheckedCreateWithoutLocationInput> | StockCreateWithoutLocationInput[] | StockUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: StockCreateOrConnectWithoutLocationInput | StockCreateOrConnectWithoutLocationInput[]
    upsert?: StockUpsertWithWhereUniqueWithoutLocationInput | StockUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: StockCreateManyLocationInputEnvelope
    set?: StockWhereUniqueInput | StockWhereUniqueInput[]
    disconnect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    delete?: StockWhereUniqueInput | StockWhereUniqueInput[]
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    update?: StockUpdateWithWhereUniqueWithoutLocationInput | StockUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: StockUpdateManyWithWhereWithoutLocationInput | StockUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: StockScalarWhereInput | StockScalarWhereInput[]
  }

  export type StocktakeLineUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<StocktakeLineCreateWithoutLocationInput, StocktakeLineUncheckedCreateWithoutLocationInput> | StocktakeLineCreateWithoutLocationInput[] | StocktakeLineUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: StocktakeLineCreateOrConnectWithoutLocationInput | StocktakeLineCreateOrConnectWithoutLocationInput[]
    upsert?: StocktakeLineUpsertWithWhereUniqueWithoutLocationInput | StocktakeLineUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: StocktakeLineCreateManyLocationInputEnvelope
    set?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
    disconnect?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
    delete?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
    connect?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
    update?: StocktakeLineUpdateWithWhereUniqueWithoutLocationInput | StocktakeLineUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: StocktakeLineUpdateManyWithWhereWithoutLocationInput | StocktakeLineUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: StocktakeLineScalarWhereInput | StocktakeLineScalarWhereInput[]
  }

  export type ReceiptLineUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<ReceiptLineCreateWithoutLocationInput, ReceiptLineUncheckedCreateWithoutLocationInput> | ReceiptLineCreateWithoutLocationInput[] | ReceiptLineUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: ReceiptLineCreateOrConnectWithoutLocationInput | ReceiptLineCreateOrConnectWithoutLocationInput[]
    upsert?: ReceiptLineUpsertWithWhereUniqueWithoutLocationInput | ReceiptLineUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: ReceiptLineCreateManyLocationInputEnvelope
    set?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
    disconnect?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
    delete?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
    connect?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
    update?: ReceiptLineUpdateWithWhereUniqueWithoutLocationInput | ReceiptLineUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: ReceiptLineUpdateManyWithWhereWithoutLocationInput | ReceiptLineUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: ReceiptLineScalarWhereInput | ReceiptLineScalarWhereInput[]
  }

  export type DispatchLineUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<DispatchLineCreateWithoutLocationInput, DispatchLineUncheckedCreateWithoutLocationInput> | DispatchLineCreateWithoutLocationInput[] | DispatchLineUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: DispatchLineCreateOrConnectWithoutLocationInput | DispatchLineCreateOrConnectWithoutLocationInput[]
    upsert?: DispatchLineUpsertWithWhereUniqueWithoutLocationInput | DispatchLineUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: DispatchLineCreateManyLocationInputEnvelope
    set?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
    disconnect?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
    delete?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
    connect?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
    update?: DispatchLineUpdateWithWhereUniqueWithoutLocationInput | DispatchLineUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: DispatchLineUpdateManyWithWhereWithoutLocationInput | DispatchLineUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: DispatchLineScalarWhereInput | DispatchLineScalarWhereInput[]
  }

  export type ItemCreateNestedOneWithoutStocksInput = {
    create?: XOR<ItemCreateWithoutStocksInput, ItemUncheckedCreateWithoutStocksInput>
    connectOrCreate?: ItemCreateOrConnectWithoutStocksInput
    connect?: ItemWhereUniqueInput
  }

  export type LocationCreateNestedOneWithoutStocksInput = {
    create?: XOR<LocationCreateWithoutStocksInput, LocationUncheckedCreateWithoutStocksInput>
    connectOrCreate?: LocationCreateOrConnectWithoutStocksInput
    connect?: LocationWhereUniqueInput
  }

  export type ItemUpdateOneRequiredWithoutStocksNestedInput = {
    create?: XOR<ItemCreateWithoutStocksInput, ItemUncheckedCreateWithoutStocksInput>
    connectOrCreate?: ItemCreateOrConnectWithoutStocksInput
    upsert?: ItemUpsertWithoutStocksInput
    connect?: ItemWhereUniqueInput
    update?: XOR<XOR<ItemUpdateToOneWithWhereWithoutStocksInput, ItemUpdateWithoutStocksInput>, ItemUncheckedUpdateWithoutStocksInput>
  }

  export type LocationUpdateOneRequiredWithoutStocksNestedInput = {
    create?: XOR<LocationCreateWithoutStocksInput, LocationUncheckedCreateWithoutStocksInput>
    connectOrCreate?: LocationCreateOrConnectWithoutStocksInput
    upsert?: LocationUpsertWithoutStocksInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutStocksInput, LocationUpdateWithoutStocksInput>, LocationUncheckedUpdateWithoutStocksInput>
  }

  export type ReceiptLineCreateNestedManyWithoutReceiptInput = {
    create?: XOR<ReceiptLineCreateWithoutReceiptInput, ReceiptLineUncheckedCreateWithoutReceiptInput> | ReceiptLineCreateWithoutReceiptInput[] | ReceiptLineUncheckedCreateWithoutReceiptInput[]
    connectOrCreate?: ReceiptLineCreateOrConnectWithoutReceiptInput | ReceiptLineCreateOrConnectWithoutReceiptInput[]
    createMany?: ReceiptLineCreateManyReceiptInputEnvelope
    connect?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
  }

  export type ReceiptLineUncheckedCreateNestedManyWithoutReceiptInput = {
    create?: XOR<ReceiptLineCreateWithoutReceiptInput, ReceiptLineUncheckedCreateWithoutReceiptInput> | ReceiptLineCreateWithoutReceiptInput[] | ReceiptLineUncheckedCreateWithoutReceiptInput[]
    connectOrCreate?: ReceiptLineCreateOrConnectWithoutReceiptInput | ReceiptLineCreateOrConnectWithoutReceiptInput[]
    createMany?: ReceiptLineCreateManyReceiptInputEnvelope
    connect?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
  }

  export type ReceiptLineUpdateManyWithoutReceiptNestedInput = {
    create?: XOR<ReceiptLineCreateWithoutReceiptInput, ReceiptLineUncheckedCreateWithoutReceiptInput> | ReceiptLineCreateWithoutReceiptInput[] | ReceiptLineUncheckedCreateWithoutReceiptInput[]
    connectOrCreate?: ReceiptLineCreateOrConnectWithoutReceiptInput | ReceiptLineCreateOrConnectWithoutReceiptInput[]
    upsert?: ReceiptLineUpsertWithWhereUniqueWithoutReceiptInput | ReceiptLineUpsertWithWhereUniqueWithoutReceiptInput[]
    createMany?: ReceiptLineCreateManyReceiptInputEnvelope
    set?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
    disconnect?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
    delete?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
    connect?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
    update?: ReceiptLineUpdateWithWhereUniqueWithoutReceiptInput | ReceiptLineUpdateWithWhereUniqueWithoutReceiptInput[]
    updateMany?: ReceiptLineUpdateManyWithWhereWithoutReceiptInput | ReceiptLineUpdateManyWithWhereWithoutReceiptInput[]
    deleteMany?: ReceiptLineScalarWhereInput | ReceiptLineScalarWhereInput[]
  }

  export type ReceiptLineUncheckedUpdateManyWithoutReceiptNestedInput = {
    create?: XOR<ReceiptLineCreateWithoutReceiptInput, ReceiptLineUncheckedCreateWithoutReceiptInput> | ReceiptLineCreateWithoutReceiptInput[] | ReceiptLineUncheckedCreateWithoutReceiptInput[]
    connectOrCreate?: ReceiptLineCreateOrConnectWithoutReceiptInput | ReceiptLineCreateOrConnectWithoutReceiptInput[]
    upsert?: ReceiptLineUpsertWithWhereUniqueWithoutReceiptInput | ReceiptLineUpsertWithWhereUniqueWithoutReceiptInput[]
    createMany?: ReceiptLineCreateManyReceiptInputEnvelope
    set?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
    disconnect?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
    delete?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
    connect?: ReceiptLineWhereUniqueInput | ReceiptLineWhereUniqueInput[]
    update?: ReceiptLineUpdateWithWhereUniqueWithoutReceiptInput | ReceiptLineUpdateWithWhereUniqueWithoutReceiptInput[]
    updateMany?: ReceiptLineUpdateManyWithWhereWithoutReceiptInput | ReceiptLineUpdateManyWithWhereWithoutReceiptInput[]
    deleteMany?: ReceiptLineScalarWhereInput | ReceiptLineScalarWhereInput[]
  }

  export type ReceiptCreateNestedOneWithoutLinesInput = {
    create?: XOR<ReceiptCreateWithoutLinesInput, ReceiptUncheckedCreateWithoutLinesInput>
    connectOrCreate?: ReceiptCreateOrConnectWithoutLinesInput
    connect?: ReceiptWhereUniqueInput
  }

  export type ItemCreateNestedOneWithoutReceiptsInput = {
    create?: XOR<ItemCreateWithoutReceiptsInput, ItemUncheckedCreateWithoutReceiptsInput>
    connectOrCreate?: ItemCreateOrConnectWithoutReceiptsInput
    connect?: ItemWhereUniqueInput
  }

  export type LocationCreateNestedOneWithoutReceiptLinesInput = {
    create?: XOR<LocationCreateWithoutReceiptLinesInput, LocationUncheckedCreateWithoutReceiptLinesInput>
    connectOrCreate?: LocationCreateOrConnectWithoutReceiptLinesInput
    connect?: LocationWhereUniqueInput
  }

  export type ReceiptUpdateOneRequiredWithoutLinesNestedInput = {
    create?: XOR<ReceiptCreateWithoutLinesInput, ReceiptUncheckedCreateWithoutLinesInput>
    connectOrCreate?: ReceiptCreateOrConnectWithoutLinesInput
    upsert?: ReceiptUpsertWithoutLinesInput
    connect?: ReceiptWhereUniqueInput
    update?: XOR<XOR<ReceiptUpdateToOneWithWhereWithoutLinesInput, ReceiptUpdateWithoutLinesInput>, ReceiptUncheckedUpdateWithoutLinesInput>
  }

  export type ItemUpdateOneRequiredWithoutReceiptsNestedInput = {
    create?: XOR<ItemCreateWithoutReceiptsInput, ItemUncheckedCreateWithoutReceiptsInput>
    connectOrCreate?: ItemCreateOrConnectWithoutReceiptsInput
    upsert?: ItemUpsertWithoutReceiptsInput
    connect?: ItemWhereUniqueInput
    update?: XOR<XOR<ItemUpdateToOneWithWhereWithoutReceiptsInput, ItemUpdateWithoutReceiptsInput>, ItemUncheckedUpdateWithoutReceiptsInput>
  }

  export type LocationUpdateOneRequiredWithoutReceiptLinesNestedInput = {
    create?: XOR<LocationCreateWithoutReceiptLinesInput, LocationUncheckedCreateWithoutReceiptLinesInput>
    connectOrCreate?: LocationCreateOrConnectWithoutReceiptLinesInput
    upsert?: LocationUpsertWithoutReceiptLinesInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutReceiptLinesInput, LocationUpdateWithoutReceiptLinesInput>, LocationUncheckedUpdateWithoutReceiptLinesInput>
  }

  export type DispatchLineCreateNestedManyWithoutDispatchInput = {
    create?: XOR<DispatchLineCreateWithoutDispatchInput, DispatchLineUncheckedCreateWithoutDispatchInput> | DispatchLineCreateWithoutDispatchInput[] | DispatchLineUncheckedCreateWithoutDispatchInput[]
    connectOrCreate?: DispatchLineCreateOrConnectWithoutDispatchInput | DispatchLineCreateOrConnectWithoutDispatchInput[]
    createMany?: DispatchLineCreateManyDispatchInputEnvelope
    connect?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
  }

  export type DispatchLineUncheckedCreateNestedManyWithoutDispatchInput = {
    create?: XOR<DispatchLineCreateWithoutDispatchInput, DispatchLineUncheckedCreateWithoutDispatchInput> | DispatchLineCreateWithoutDispatchInput[] | DispatchLineUncheckedCreateWithoutDispatchInput[]
    connectOrCreate?: DispatchLineCreateOrConnectWithoutDispatchInput | DispatchLineCreateOrConnectWithoutDispatchInput[]
    createMany?: DispatchLineCreateManyDispatchInputEnvelope
    connect?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
  }

  export type DispatchLineUpdateManyWithoutDispatchNestedInput = {
    create?: XOR<DispatchLineCreateWithoutDispatchInput, DispatchLineUncheckedCreateWithoutDispatchInput> | DispatchLineCreateWithoutDispatchInput[] | DispatchLineUncheckedCreateWithoutDispatchInput[]
    connectOrCreate?: DispatchLineCreateOrConnectWithoutDispatchInput | DispatchLineCreateOrConnectWithoutDispatchInput[]
    upsert?: DispatchLineUpsertWithWhereUniqueWithoutDispatchInput | DispatchLineUpsertWithWhereUniqueWithoutDispatchInput[]
    createMany?: DispatchLineCreateManyDispatchInputEnvelope
    set?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
    disconnect?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
    delete?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
    connect?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
    update?: DispatchLineUpdateWithWhereUniqueWithoutDispatchInput | DispatchLineUpdateWithWhereUniqueWithoutDispatchInput[]
    updateMany?: DispatchLineUpdateManyWithWhereWithoutDispatchInput | DispatchLineUpdateManyWithWhereWithoutDispatchInput[]
    deleteMany?: DispatchLineScalarWhereInput | DispatchLineScalarWhereInput[]
  }

  export type DispatchLineUncheckedUpdateManyWithoutDispatchNestedInput = {
    create?: XOR<DispatchLineCreateWithoutDispatchInput, DispatchLineUncheckedCreateWithoutDispatchInput> | DispatchLineCreateWithoutDispatchInput[] | DispatchLineUncheckedCreateWithoutDispatchInput[]
    connectOrCreate?: DispatchLineCreateOrConnectWithoutDispatchInput | DispatchLineCreateOrConnectWithoutDispatchInput[]
    upsert?: DispatchLineUpsertWithWhereUniqueWithoutDispatchInput | DispatchLineUpsertWithWhereUniqueWithoutDispatchInput[]
    createMany?: DispatchLineCreateManyDispatchInputEnvelope
    set?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
    disconnect?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
    delete?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
    connect?: DispatchLineWhereUniqueInput | DispatchLineWhereUniqueInput[]
    update?: DispatchLineUpdateWithWhereUniqueWithoutDispatchInput | DispatchLineUpdateWithWhereUniqueWithoutDispatchInput[]
    updateMany?: DispatchLineUpdateManyWithWhereWithoutDispatchInput | DispatchLineUpdateManyWithWhereWithoutDispatchInput[]
    deleteMany?: DispatchLineScalarWhereInput | DispatchLineScalarWhereInput[]
  }

  export type DispatchCreateNestedOneWithoutLinesInput = {
    create?: XOR<DispatchCreateWithoutLinesInput, DispatchUncheckedCreateWithoutLinesInput>
    connectOrCreate?: DispatchCreateOrConnectWithoutLinesInput
    connect?: DispatchWhereUniqueInput
  }

  export type ItemCreateNestedOneWithoutDispatchesInput = {
    create?: XOR<ItemCreateWithoutDispatchesInput, ItemUncheckedCreateWithoutDispatchesInput>
    connectOrCreate?: ItemCreateOrConnectWithoutDispatchesInput
    connect?: ItemWhereUniqueInput
  }

  export type LocationCreateNestedOneWithoutDispatchLinesInput = {
    create?: XOR<LocationCreateWithoutDispatchLinesInput, LocationUncheckedCreateWithoutDispatchLinesInput>
    connectOrCreate?: LocationCreateOrConnectWithoutDispatchLinesInput
    connect?: LocationWhereUniqueInput
  }

  export type DispatchUpdateOneRequiredWithoutLinesNestedInput = {
    create?: XOR<DispatchCreateWithoutLinesInput, DispatchUncheckedCreateWithoutLinesInput>
    connectOrCreate?: DispatchCreateOrConnectWithoutLinesInput
    upsert?: DispatchUpsertWithoutLinesInput
    connect?: DispatchWhereUniqueInput
    update?: XOR<XOR<DispatchUpdateToOneWithWhereWithoutLinesInput, DispatchUpdateWithoutLinesInput>, DispatchUncheckedUpdateWithoutLinesInput>
  }

  export type ItemUpdateOneRequiredWithoutDispatchesNestedInput = {
    create?: XOR<ItemCreateWithoutDispatchesInput, ItemUncheckedCreateWithoutDispatchesInput>
    connectOrCreate?: ItemCreateOrConnectWithoutDispatchesInput
    upsert?: ItemUpsertWithoutDispatchesInput
    connect?: ItemWhereUniqueInput
    update?: XOR<XOR<ItemUpdateToOneWithWhereWithoutDispatchesInput, ItemUpdateWithoutDispatchesInput>, ItemUncheckedUpdateWithoutDispatchesInput>
  }

  export type LocationUpdateOneRequiredWithoutDispatchLinesNestedInput = {
    create?: XOR<LocationCreateWithoutDispatchLinesInput, LocationUncheckedCreateWithoutDispatchLinesInput>
    connectOrCreate?: LocationCreateOrConnectWithoutDispatchLinesInput
    upsert?: LocationUpsertWithoutDispatchLinesInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutDispatchLinesInput, LocationUpdateWithoutDispatchLinesInput>, LocationUncheckedUpdateWithoutDispatchLinesInput>
  }

  export type StocktakeLineCreateNestedManyWithoutStocktakeInput = {
    create?: XOR<StocktakeLineCreateWithoutStocktakeInput, StocktakeLineUncheckedCreateWithoutStocktakeInput> | StocktakeLineCreateWithoutStocktakeInput[] | StocktakeLineUncheckedCreateWithoutStocktakeInput[]
    connectOrCreate?: StocktakeLineCreateOrConnectWithoutStocktakeInput | StocktakeLineCreateOrConnectWithoutStocktakeInput[]
    createMany?: StocktakeLineCreateManyStocktakeInputEnvelope
    connect?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
  }

  export type StocktakeLineUncheckedCreateNestedManyWithoutStocktakeInput = {
    create?: XOR<StocktakeLineCreateWithoutStocktakeInput, StocktakeLineUncheckedCreateWithoutStocktakeInput> | StocktakeLineCreateWithoutStocktakeInput[] | StocktakeLineUncheckedCreateWithoutStocktakeInput[]
    connectOrCreate?: StocktakeLineCreateOrConnectWithoutStocktakeInput | StocktakeLineCreateOrConnectWithoutStocktakeInput[]
    createMany?: StocktakeLineCreateManyStocktakeInputEnvelope
    connect?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
  }

  export type StocktakeLineUpdateManyWithoutStocktakeNestedInput = {
    create?: XOR<StocktakeLineCreateWithoutStocktakeInput, StocktakeLineUncheckedCreateWithoutStocktakeInput> | StocktakeLineCreateWithoutStocktakeInput[] | StocktakeLineUncheckedCreateWithoutStocktakeInput[]
    connectOrCreate?: StocktakeLineCreateOrConnectWithoutStocktakeInput | StocktakeLineCreateOrConnectWithoutStocktakeInput[]
    upsert?: StocktakeLineUpsertWithWhereUniqueWithoutStocktakeInput | StocktakeLineUpsertWithWhereUniqueWithoutStocktakeInput[]
    createMany?: StocktakeLineCreateManyStocktakeInputEnvelope
    set?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
    disconnect?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
    delete?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
    connect?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
    update?: StocktakeLineUpdateWithWhereUniqueWithoutStocktakeInput | StocktakeLineUpdateWithWhereUniqueWithoutStocktakeInput[]
    updateMany?: StocktakeLineUpdateManyWithWhereWithoutStocktakeInput | StocktakeLineUpdateManyWithWhereWithoutStocktakeInput[]
    deleteMany?: StocktakeLineScalarWhereInput | StocktakeLineScalarWhereInput[]
  }

  export type StocktakeLineUncheckedUpdateManyWithoutStocktakeNestedInput = {
    create?: XOR<StocktakeLineCreateWithoutStocktakeInput, StocktakeLineUncheckedCreateWithoutStocktakeInput> | StocktakeLineCreateWithoutStocktakeInput[] | StocktakeLineUncheckedCreateWithoutStocktakeInput[]
    connectOrCreate?: StocktakeLineCreateOrConnectWithoutStocktakeInput | StocktakeLineCreateOrConnectWithoutStocktakeInput[]
    upsert?: StocktakeLineUpsertWithWhereUniqueWithoutStocktakeInput | StocktakeLineUpsertWithWhereUniqueWithoutStocktakeInput[]
    createMany?: StocktakeLineCreateManyStocktakeInputEnvelope
    set?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
    disconnect?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
    delete?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
    connect?: StocktakeLineWhereUniqueInput | StocktakeLineWhereUniqueInput[]
    update?: StocktakeLineUpdateWithWhereUniqueWithoutStocktakeInput | StocktakeLineUpdateWithWhereUniqueWithoutStocktakeInput[]
    updateMany?: StocktakeLineUpdateManyWithWhereWithoutStocktakeInput | StocktakeLineUpdateManyWithWhereWithoutStocktakeInput[]
    deleteMany?: StocktakeLineScalarWhereInput | StocktakeLineScalarWhereInput[]
  }

  export type StocktakeCreateNestedOneWithoutLinesInput = {
    create?: XOR<StocktakeCreateWithoutLinesInput, StocktakeUncheckedCreateWithoutLinesInput>
    connectOrCreate?: StocktakeCreateOrConnectWithoutLinesInput
    connect?: StocktakeWhereUniqueInput
  }

  export type ItemCreateNestedOneWithoutStocktakesInput = {
    create?: XOR<ItemCreateWithoutStocktakesInput, ItemUncheckedCreateWithoutStocktakesInput>
    connectOrCreate?: ItemCreateOrConnectWithoutStocktakesInput
    connect?: ItemWhereUniqueInput
  }

  export type LocationCreateNestedOneWithoutStocktakesInput = {
    create?: XOR<LocationCreateWithoutStocktakesInput, LocationUncheckedCreateWithoutStocktakesInput>
    connectOrCreate?: LocationCreateOrConnectWithoutStocktakesInput
    connect?: LocationWhereUniqueInput
  }

  export type StocktakeUpdateOneRequiredWithoutLinesNestedInput = {
    create?: XOR<StocktakeCreateWithoutLinesInput, StocktakeUncheckedCreateWithoutLinesInput>
    connectOrCreate?: StocktakeCreateOrConnectWithoutLinesInput
    upsert?: StocktakeUpsertWithoutLinesInput
    connect?: StocktakeWhereUniqueInput
    update?: XOR<XOR<StocktakeUpdateToOneWithWhereWithoutLinesInput, StocktakeUpdateWithoutLinesInput>, StocktakeUncheckedUpdateWithoutLinesInput>
  }

  export type ItemUpdateOneRequiredWithoutStocktakesNestedInput = {
    create?: XOR<ItemCreateWithoutStocktakesInput, ItemUncheckedCreateWithoutStocktakesInput>
    connectOrCreate?: ItemCreateOrConnectWithoutStocktakesInput
    upsert?: ItemUpsertWithoutStocktakesInput
    connect?: ItemWhereUniqueInput
    update?: XOR<XOR<ItemUpdateToOneWithWhereWithoutStocktakesInput, ItemUpdateWithoutStocktakesInput>, ItemUncheckedUpdateWithoutStocktakesInput>
  }

  export type LocationUpdateOneRequiredWithoutStocktakesNestedInput = {
    create?: XOR<LocationCreateWithoutStocktakesInput, LocationUncheckedCreateWithoutStocktakesInput>
    connectOrCreate?: LocationCreateOrConnectWithoutStocktakesInput
    upsert?: LocationUpsertWithoutStocktakesInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutStocktakesInput, LocationUpdateWithoutStocktakesInput>, LocationUncheckedUpdateWithoutStocktakesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type StockCreateWithoutItemInput = {
    quantity?: number
    location: LocationCreateNestedOneWithoutStocksInput
  }

  export type StockUncheckedCreateWithoutItemInput = {
    id?: number
    locationId: number
    quantity?: number
  }

  export type StockCreateOrConnectWithoutItemInput = {
    where: StockWhereUniqueInput
    create: XOR<StockCreateWithoutItemInput, StockUncheckedCreateWithoutItemInput>
  }

  export type StockCreateManyItemInputEnvelope = {
    data: StockCreateManyItemInput | StockCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type ReceiptLineCreateWithoutItemInput = {
    qty: number
    receipt: ReceiptCreateNestedOneWithoutLinesInput
    location: LocationCreateNestedOneWithoutReceiptLinesInput
  }

  export type ReceiptLineUncheckedCreateWithoutItemInput = {
    id?: number
    receiptId: number
    locationId: number
    qty: number
  }

  export type ReceiptLineCreateOrConnectWithoutItemInput = {
    where: ReceiptLineWhereUniqueInput
    create: XOR<ReceiptLineCreateWithoutItemInput, ReceiptLineUncheckedCreateWithoutItemInput>
  }

  export type ReceiptLineCreateManyItemInputEnvelope = {
    data: ReceiptLineCreateManyItemInput | ReceiptLineCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type DispatchLineCreateWithoutItemInput = {
    qty: number
    dispatch: DispatchCreateNestedOneWithoutLinesInput
    location: LocationCreateNestedOneWithoutDispatchLinesInput
  }

  export type DispatchLineUncheckedCreateWithoutItemInput = {
    id?: number
    dispatchId: number
    locationId: number
    qty: number
  }

  export type DispatchLineCreateOrConnectWithoutItemInput = {
    where: DispatchLineWhereUniqueInput
    create: XOR<DispatchLineCreateWithoutItemInput, DispatchLineUncheckedCreateWithoutItemInput>
  }

  export type DispatchLineCreateManyItemInputEnvelope = {
    data: DispatchLineCreateManyItemInput | DispatchLineCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type StocktakeLineCreateWithoutItemInput = {
    countedQty: number
    stocktake: StocktakeCreateNestedOneWithoutLinesInput
    location: LocationCreateNestedOneWithoutStocktakesInput
  }

  export type StocktakeLineUncheckedCreateWithoutItemInput = {
    id?: number
    stocktakeId: number
    locationId: number
    countedQty: number
  }

  export type StocktakeLineCreateOrConnectWithoutItemInput = {
    where: StocktakeLineWhereUniqueInput
    create: XOR<StocktakeLineCreateWithoutItemInput, StocktakeLineUncheckedCreateWithoutItemInput>
  }

  export type StocktakeLineCreateManyItemInputEnvelope = {
    data: StocktakeLineCreateManyItemInput | StocktakeLineCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type StockUpsertWithWhereUniqueWithoutItemInput = {
    where: StockWhereUniqueInput
    update: XOR<StockUpdateWithoutItemInput, StockUncheckedUpdateWithoutItemInput>
    create: XOR<StockCreateWithoutItemInput, StockUncheckedCreateWithoutItemInput>
  }

  export type StockUpdateWithWhereUniqueWithoutItemInput = {
    where: StockWhereUniqueInput
    data: XOR<StockUpdateWithoutItemInput, StockUncheckedUpdateWithoutItemInput>
  }

  export type StockUpdateManyWithWhereWithoutItemInput = {
    where: StockScalarWhereInput
    data: XOR<StockUpdateManyMutationInput, StockUncheckedUpdateManyWithoutItemInput>
  }

  export type StockScalarWhereInput = {
    AND?: StockScalarWhereInput | StockScalarWhereInput[]
    OR?: StockScalarWhereInput[]
    NOT?: StockScalarWhereInput | StockScalarWhereInput[]
    id?: IntFilter<"Stock"> | number
    itemId?: IntFilter<"Stock"> | number
    locationId?: IntFilter<"Stock"> | number
    quantity?: IntFilter<"Stock"> | number
  }

  export type ReceiptLineUpsertWithWhereUniqueWithoutItemInput = {
    where: ReceiptLineWhereUniqueInput
    update: XOR<ReceiptLineUpdateWithoutItemInput, ReceiptLineUncheckedUpdateWithoutItemInput>
    create: XOR<ReceiptLineCreateWithoutItemInput, ReceiptLineUncheckedCreateWithoutItemInput>
  }

  export type ReceiptLineUpdateWithWhereUniqueWithoutItemInput = {
    where: ReceiptLineWhereUniqueInput
    data: XOR<ReceiptLineUpdateWithoutItemInput, ReceiptLineUncheckedUpdateWithoutItemInput>
  }

  export type ReceiptLineUpdateManyWithWhereWithoutItemInput = {
    where: ReceiptLineScalarWhereInput
    data: XOR<ReceiptLineUpdateManyMutationInput, ReceiptLineUncheckedUpdateManyWithoutItemInput>
  }

  export type ReceiptLineScalarWhereInput = {
    AND?: ReceiptLineScalarWhereInput | ReceiptLineScalarWhereInput[]
    OR?: ReceiptLineScalarWhereInput[]
    NOT?: ReceiptLineScalarWhereInput | ReceiptLineScalarWhereInput[]
    id?: IntFilter<"ReceiptLine"> | number
    receiptId?: IntFilter<"ReceiptLine"> | number
    itemId?: IntFilter<"ReceiptLine"> | number
    locationId?: IntFilter<"ReceiptLine"> | number
    qty?: IntFilter<"ReceiptLine"> | number
  }

  export type DispatchLineUpsertWithWhereUniqueWithoutItemInput = {
    where: DispatchLineWhereUniqueInput
    update: XOR<DispatchLineUpdateWithoutItemInput, DispatchLineUncheckedUpdateWithoutItemInput>
    create: XOR<DispatchLineCreateWithoutItemInput, DispatchLineUncheckedCreateWithoutItemInput>
  }

  export type DispatchLineUpdateWithWhereUniqueWithoutItemInput = {
    where: DispatchLineWhereUniqueInput
    data: XOR<DispatchLineUpdateWithoutItemInput, DispatchLineUncheckedUpdateWithoutItemInput>
  }

  export type DispatchLineUpdateManyWithWhereWithoutItemInput = {
    where: DispatchLineScalarWhereInput
    data: XOR<DispatchLineUpdateManyMutationInput, DispatchLineUncheckedUpdateManyWithoutItemInput>
  }

  export type DispatchLineScalarWhereInput = {
    AND?: DispatchLineScalarWhereInput | DispatchLineScalarWhereInput[]
    OR?: DispatchLineScalarWhereInput[]
    NOT?: DispatchLineScalarWhereInput | DispatchLineScalarWhereInput[]
    id?: IntFilter<"DispatchLine"> | number
    dispatchId?: IntFilter<"DispatchLine"> | number
    itemId?: IntFilter<"DispatchLine"> | number
    locationId?: IntFilter<"DispatchLine"> | number
    qty?: IntFilter<"DispatchLine"> | number
  }

  export type StocktakeLineUpsertWithWhereUniqueWithoutItemInput = {
    where: StocktakeLineWhereUniqueInput
    update: XOR<StocktakeLineUpdateWithoutItemInput, StocktakeLineUncheckedUpdateWithoutItemInput>
    create: XOR<StocktakeLineCreateWithoutItemInput, StocktakeLineUncheckedCreateWithoutItemInput>
  }

  export type StocktakeLineUpdateWithWhereUniqueWithoutItemInput = {
    where: StocktakeLineWhereUniqueInput
    data: XOR<StocktakeLineUpdateWithoutItemInput, StocktakeLineUncheckedUpdateWithoutItemInput>
  }

  export type StocktakeLineUpdateManyWithWhereWithoutItemInput = {
    where: StocktakeLineScalarWhereInput
    data: XOR<StocktakeLineUpdateManyMutationInput, StocktakeLineUncheckedUpdateManyWithoutItemInput>
  }

  export type StocktakeLineScalarWhereInput = {
    AND?: StocktakeLineScalarWhereInput | StocktakeLineScalarWhereInput[]
    OR?: StocktakeLineScalarWhereInput[]
    NOT?: StocktakeLineScalarWhereInput | StocktakeLineScalarWhereInput[]
    id?: IntFilter<"StocktakeLine"> | number
    stocktakeId?: IntFilter<"StocktakeLine"> | number
    itemId?: IntFilter<"StocktakeLine"> | number
    locationId?: IntFilter<"StocktakeLine"> | number
    countedQty?: IntFilter<"StocktakeLine"> | number
  }

  export type StockCreateWithoutLocationInput = {
    quantity?: number
    item: ItemCreateNestedOneWithoutStocksInput
  }

  export type StockUncheckedCreateWithoutLocationInput = {
    id?: number
    itemId: number
    quantity?: number
  }

  export type StockCreateOrConnectWithoutLocationInput = {
    where: StockWhereUniqueInput
    create: XOR<StockCreateWithoutLocationInput, StockUncheckedCreateWithoutLocationInput>
  }

  export type StockCreateManyLocationInputEnvelope = {
    data: StockCreateManyLocationInput | StockCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type StocktakeLineCreateWithoutLocationInput = {
    countedQty: number
    stocktake: StocktakeCreateNestedOneWithoutLinesInput
    item: ItemCreateNestedOneWithoutStocktakesInput
  }

  export type StocktakeLineUncheckedCreateWithoutLocationInput = {
    id?: number
    stocktakeId: number
    itemId: number
    countedQty: number
  }

  export type StocktakeLineCreateOrConnectWithoutLocationInput = {
    where: StocktakeLineWhereUniqueInput
    create: XOR<StocktakeLineCreateWithoutLocationInput, StocktakeLineUncheckedCreateWithoutLocationInput>
  }

  export type StocktakeLineCreateManyLocationInputEnvelope = {
    data: StocktakeLineCreateManyLocationInput | StocktakeLineCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type ReceiptLineCreateWithoutLocationInput = {
    qty: number
    receipt: ReceiptCreateNestedOneWithoutLinesInput
    item: ItemCreateNestedOneWithoutReceiptsInput
  }

  export type ReceiptLineUncheckedCreateWithoutLocationInput = {
    id?: number
    receiptId: number
    itemId: number
    qty: number
  }

  export type ReceiptLineCreateOrConnectWithoutLocationInput = {
    where: ReceiptLineWhereUniqueInput
    create: XOR<ReceiptLineCreateWithoutLocationInput, ReceiptLineUncheckedCreateWithoutLocationInput>
  }

  export type ReceiptLineCreateManyLocationInputEnvelope = {
    data: ReceiptLineCreateManyLocationInput | ReceiptLineCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type DispatchLineCreateWithoutLocationInput = {
    qty: number
    dispatch: DispatchCreateNestedOneWithoutLinesInput
    item: ItemCreateNestedOneWithoutDispatchesInput
  }

  export type DispatchLineUncheckedCreateWithoutLocationInput = {
    id?: number
    dispatchId: number
    itemId: number
    qty: number
  }

  export type DispatchLineCreateOrConnectWithoutLocationInput = {
    where: DispatchLineWhereUniqueInput
    create: XOR<DispatchLineCreateWithoutLocationInput, DispatchLineUncheckedCreateWithoutLocationInput>
  }

  export type DispatchLineCreateManyLocationInputEnvelope = {
    data: DispatchLineCreateManyLocationInput | DispatchLineCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type StockUpsertWithWhereUniqueWithoutLocationInput = {
    where: StockWhereUniqueInput
    update: XOR<StockUpdateWithoutLocationInput, StockUncheckedUpdateWithoutLocationInput>
    create: XOR<StockCreateWithoutLocationInput, StockUncheckedCreateWithoutLocationInput>
  }

  export type StockUpdateWithWhereUniqueWithoutLocationInput = {
    where: StockWhereUniqueInput
    data: XOR<StockUpdateWithoutLocationInput, StockUncheckedUpdateWithoutLocationInput>
  }

  export type StockUpdateManyWithWhereWithoutLocationInput = {
    where: StockScalarWhereInput
    data: XOR<StockUpdateManyMutationInput, StockUncheckedUpdateManyWithoutLocationInput>
  }

  export type StocktakeLineUpsertWithWhereUniqueWithoutLocationInput = {
    where: StocktakeLineWhereUniqueInput
    update: XOR<StocktakeLineUpdateWithoutLocationInput, StocktakeLineUncheckedUpdateWithoutLocationInput>
    create: XOR<StocktakeLineCreateWithoutLocationInput, StocktakeLineUncheckedCreateWithoutLocationInput>
  }

  export type StocktakeLineUpdateWithWhereUniqueWithoutLocationInput = {
    where: StocktakeLineWhereUniqueInput
    data: XOR<StocktakeLineUpdateWithoutLocationInput, StocktakeLineUncheckedUpdateWithoutLocationInput>
  }

  export type StocktakeLineUpdateManyWithWhereWithoutLocationInput = {
    where: StocktakeLineScalarWhereInput
    data: XOR<StocktakeLineUpdateManyMutationInput, StocktakeLineUncheckedUpdateManyWithoutLocationInput>
  }

  export type ReceiptLineUpsertWithWhereUniqueWithoutLocationInput = {
    where: ReceiptLineWhereUniqueInput
    update: XOR<ReceiptLineUpdateWithoutLocationInput, ReceiptLineUncheckedUpdateWithoutLocationInput>
    create: XOR<ReceiptLineCreateWithoutLocationInput, ReceiptLineUncheckedCreateWithoutLocationInput>
  }

  export type ReceiptLineUpdateWithWhereUniqueWithoutLocationInput = {
    where: ReceiptLineWhereUniqueInput
    data: XOR<ReceiptLineUpdateWithoutLocationInput, ReceiptLineUncheckedUpdateWithoutLocationInput>
  }

  export type ReceiptLineUpdateManyWithWhereWithoutLocationInput = {
    where: ReceiptLineScalarWhereInput
    data: XOR<ReceiptLineUpdateManyMutationInput, ReceiptLineUncheckedUpdateManyWithoutLocationInput>
  }

  export type DispatchLineUpsertWithWhereUniqueWithoutLocationInput = {
    where: DispatchLineWhereUniqueInput
    update: XOR<DispatchLineUpdateWithoutLocationInput, DispatchLineUncheckedUpdateWithoutLocationInput>
    create: XOR<DispatchLineCreateWithoutLocationInput, DispatchLineUncheckedCreateWithoutLocationInput>
  }

  export type DispatchLineUpdateWithWhereUniqueWithoutLocationInput = {
    where: DispatchLineWhereUniqueInput
    data: XOR<DispatchLineUpdateWithoutLocationInput, DispatchLineUncheckedUpdateWithoutLocationInput>
  }

  export type DispatchLineUpdateManyWithWhereWithoutLocationInput = {
    where: DispatchLineScalarWhereInput
    data: XOR<DispatchLineUpdateManyMutationInput, DispatchLineUncheckedUpdateManyWithoutLocationInput>
  }

  export type ItemCreateWithoutStocksInput = {
    sku: string
    name: string
    unit?: string
    barcode?: string | null
    minStock?: number | null
    createdAt?: Date | string
    receipts?: ReceiptLineCreateNestedManyWithoutItemInput
    dispatches?: DispatchLineCreateNestedManyWithoutItemInput
    stocktakes?: StocktakeLineCreateNestedManyWithoutItemInput
  }

  export type ItemUncheckedCreateWithoutStocksInput = {
    id?: number
    sku: string
    name: string
    unit?: string
    barcode?: string | null
    minStock?: number | null
    createdAt?: Date | string
    receipts?: ReceiptLineUncheckedCreateNestedManyWithoutItemInput
    dispatches?: DispatchLineUncheckedCreateNestedManyWithoutItemInput
    stocktakes?: StocktakeLineUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemCreateOrConnectWithoutStocksInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutStocksInput, ItemUncheckedCreateWithoutStocksInput>
  }

  export type LocationCreateWithoutStocksInput = {
    code: string
    description?: string | null
    createdAt?: Date | string
    stocktakes?: StocktakeLineCreateNestedManyWithoutLocationInput
    receiptLines?: ReceiptLineCreateNestedManyWithoutLocationInput
    dispatchLines?: DispatchLineCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutStocksInput = {
    id?: number
    code: string
    description?: string | null
    createdAt?: Date | string
    stocktakes?: StocktakeLineUncheckedCreateNestedManyWithoutLocationInput
    receiptLines?: ReceiptLineUncheckedCreateNestedManyWithoutLocationInput
    dispatchLines?: DispatchLineUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutStocksInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutStocksInput, LocationUncheckedCreateWithoutStocksInput>
  }

  export type ItemUpsertWithoutStocksInput = {
    update: XOR<ItemUpdateWithoutStocksInput, ItemUncheckedUpdateWithoutStocksInput>
    create: XOR<ItemCreateWithoutStocksInput, ItemUncheckedCreateWithoutStocksInput>
    where?: ItemWhereInput
  }

  export type ItemUpdateToOneWithWhereWithoutStocksInput = {
    where?: ItemWhereInput
    data: XOR<ItemUpdateWithoutStocksInput, ItemUncheckedUpdateWithoutStocksInput>
  }

  export type ItemUpdateWithoutStocksInput = {
    sku?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    minStock?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receipts?: ReceiptLineUpdateManyWithoutItemNestedInput
    dispatches?: DispatchLineUpdateManyWithoutItemNestedInput
    stocktakes?: StocktakeLineUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateWithoutStocksInput = {
    id?: IntFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    minStock?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receipts?: ReceiptLineUncheckedUpdateManyWithoutItemNestedInput
    dispatches?: DispatchLineUncheckedUpdateManyWithoutItemNestedInput
    stocktakes?: StocktakeLineUncheckedUpdateManyWithoutItemNestedInput
  }

  export type LocationUpsertWithoutStocksInput = {
    update: XOR<LocationUpdateWithoutStocksInput, LocationUncheckedUpdateWithoutStocksInput>
    create: XOR<LocationCreateWithoutStocksInput, LocationUncheckedCreateWithoutStocksInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutStocksInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutStocksInput, LocationUncheckedUpdateWithoutStocksInput>
  }

  export type LocationUpdateWithoutStocksInput = {
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stocktakes?: StocktakeLineUpdateManyWithoutLocationNestedInput
    receiptLines?: ReceiptLineUpdateManyWithoutLocationNestedInput
    dispatchLines?: DispatchLineUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutStocksInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stocktakes?: StocktakeLineUncheckedUpdateManyWithoutLocationNestedInput
    receiptLines?: ReceiptLineUncheckedUpdateManyWithoutLocationNestedInput
    dispatchLines?: DispatchLineUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type ReceiptLineCreateWithoutReceiptInput = {
    qty: number
    item: ItemCreateNestedOneWithoutReceiptsInput
    location: LocationCreateNestedOneWithoutReceiptLinesInput
  }

  export type ReceiptLineUncheckedCreateWithoutReceiptInput = {
    id?: number
    itemId: number
    locationId: number
    qty: number
  }

  export type ReceiptLineCreateOrConnectWithoutReceiptInput = {
    where: ReceiptLineWhereUniqueInput
    create: XOR<ReceiptLineCreateWithoutReceiptInput, ReceiptLineUncheckedCreateWithoutReceiptInput>
  }

  export type ReceiptLineCreateManyReceiptInputEnvelope = {
    data: ReceiptLineCreateManyReceiptInput | ReceiptLineCreateManyReceiptInput[]
    skipDuplicates?: boolean
  }

  export type ReceiptLineUpsertWithWhereUniqueWithoutReceiptInput = {
    where: ReceiptLineWhereUniqueInput
    update: XOR<ReceiptLineUpdateWithoutReceiptInput, ReceiptLineUncheckedUpdateWithoutReceiptInput>
    create: XOR<ReceiptLineCreateWithoutReceiptInput, ReceiptLineUncheckedCreateWithoutReceiptInput>
  }

  export type ReceiptLineUpdateWithWhereUniqueWithoutReceiptInput = {
    where: ReceiptLineWhereUniqueInput
    data: XOR<ReceiptLineUpdateWithoutReceiptInput, ReceiptLineUncheckedUpdateWithoutReceiptInput>
  }

  export type ReceiptLineUpdateManyWithWhereWithoutReceiptInput = {
    where: ReceiptLineScalarWhereInput
    data: XOR<ReceiptLineUpdateManyMutationInput, ReceiptLineUncheckedUpdateManyWithoutReceiptInput>
  }

  export type ReceiptCreateWithoutLinesInput = {
    number: string
    supplier?: string | null
    status?: string
    date?: Date | string
    createdAt?: Date | string
  }

  export type ReceiptUncheckedCreateWithoutLinesInput = {
    id?: number
    number: string
    supplier?: string | null
    status?: string
    date?: Date | string
    createdAt?: Date | string
  }

  export type ReceiptCreateOrConnectWithoutLinesInput = {
    where: ReceiptWhereUniqueInput
    create: XOR<ReceiptCreateWithoutLinesInput, ReceiptUncheckedCreateWithoutLinesInput>
  }

  export type ItemCreateWithoutReceiptsInput = {
    sku: string
    name: string
    unit?: string
    barcode?: string | null
    minStock?: number | null
    createdAt?: Date | string
    stocks?: StockCreateNestedManyWithoutItemInput
    dispatches?: DispatchLineCreateNestedManyWithoutItemInput
    stocktakes?: StocktakeLineCreateNestedManyWithoutItemInput
  }

  export type ItemUncheckedCreateWithoutReceiptsInput = {
    id?: number
    sku: string
    name: string
    unit?: string
    barcode?: string | null
    minStock?: number | null
    createdAt?: Date | string
    stocks?: StockUncheckedCreateNestedManyWithoutItemInput
    dispatches?: DispatchLineUncheckedCreateNestedManyWithoutItemInput
    stocktakes?: StocktakeLineUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemCreateOrConnectWithoutReceiptsInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutReceiptsInput, ItemUncheckedCreateWithoutReceiptsInput>
  }

  export type LocationCreateWithoutReceiptLinesInput = {
    code: string
    description?: string | null
    createdAt?: Date | string
    stocks?: StockCreateNestedManyWithoutLocationInput
    stocktakes?: StocktakeLineCreateNestedManyWithoutLocationInput
    dispatchLines?: DispatchLineCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutReceiptLinesInput = {
    id?: number
    code: string
    description?: string | null
    createdAt?: Date | string
    stocks?: StockUncheckedCreateNestedManyWithoutLocationInput
    stocktakes?: StocktakeLineUncheckedCreateNestedManyWithoutLocationInput
    dispatchLines?: DispatchLineUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutReceiptLinesInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutReceiptLinesInput, LocationUncheckedCreateWithoutReceiptLinesInput>
  }

  export type ReceiptUpsertWithoutLinesInput = {
    update: XOR<ReceiptUpdateWithoutLinesInput, ReceiptUncheckedUpdateWithoutLinesInput>
    create: XOR<ReceiptCreateWithoutLinesInput, ReceiptUncheckedCreateWithoutLinesInput>
    where?: ReceiptWhereInput
  }

  export type ReceiptUpdateToOneWithWhereWithoutLinesInput = {
    where?: ReceiptWhereInput
    data: XOR<ReceiptUpdateWithoutLinesInput, ReceiptUncheckedUpdateWithoutLinesInput>
  }

  export type ReceiptUpdateWithoutLinesInput = {
    number?: StringFieldUpdateOperationsInput | string
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptUncheckedUpdateWithoutLinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemUpsertWithoutReceiptsInput = {
    update: XOR<ItemUpdateWithoutReceiptsInput, ItemUncheckedUpdateWithoutReceiptsInput>
    create: XOR<ItemCreateWithoutReceiptsInput, ItemUncheckedCreateWithoutReceiptsInput>
    where?: ItemWhereInput
  }

  export type ItemUpdateToOneWithWhereWithoutReceiptsInput = {
    where?: ItemWhereInput
    data: XOR<ItemUpdateWithoutReceiptsInput, ItemUncheckedUpdateWithoutReceiptsInput>
  }

  export type ItemUpdateWithoutReceiptsInput = {
    sku?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    minStock?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stocks?: StockUpdateManyWithoutItemNestedInput
    dispatches?: DispatchLineUpdateManyWithoutItemNestedInput
    stocktakes?: StocktakeLineUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateWithoutReceiptsInput = {
    id?: IntFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    minStock?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stocks?: StockUncheckedUpdateManyWithoutItemNestedInput
    dispatches?: DispatchLineUncheckedUpdateManyWithoutItemNestedInput
    stocktakes?: StocktakeLineUncheckedUpdateManyWithoutItemNestedInput
  }

  export type LocationUpsertWithoutReceiptLinesInput = {
    update: XOR<LocationUpdateWithoutReceiptLinesInput, LocationUncheckedUpdateWithoutReceiptLinesInput>
    create: XOR<LocationCreateWithoutReceiptLinesInput, LocationUncheckedCreateWithoutReceiptLinesInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutReceiptLinesInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutReceiptLinesInput, LocationUncheckedUpdateWithoutReceiptLinesInput>
  }

  export type LocationUpdateWithoutReceiptLinesInput = {
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stocks?: StockUpdateManyWithoutLocationNestedInput
    stocktakes?: StocktakeLineUpdateManyWithoutLocationNestedInput
    dispatchLines?: DispatchLineUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutReceiptLinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stocks?: StockUncheckedUpdateManyWithoutLocationNestedInput
    stocktakes?: StocktakeLineUncheckedUpdateManyWithoutLocationNestedInput
    dispatchLines?: DispatchLineUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type DispatchLineCreateWithoutDispatchInput = {
    qty: number
    item: ItemCreateNestedOneWithoutDispatchesInput
    location: LocationCreateNestedOneWithoutDispatchLinesInput
  }

  export type DispatchLineUncheckedCreateWithoutDispatchInput = {
    id?: number
    itemId: number
    locationId: number
    qty: number
  }

  export type DispatchLineCreateOrConnectWithoutDispatchInput = {
    where: DispatchLineWhereUniqueInput
    create: XOR<DispatchLineCreateWithoutDispatchInput, DispatchLineUncheckedCreateWithoutDispatchInput>
  }

  export type DispatchLineCreateManyDispatchInputEnvelope = {
    data: DispatchLineCreateManyDispatchInput | DispatchLineCreateManyDispatchInput[]
    skipDuplicates?: boolean
  }

  export type DispatchLineUpsertWithWhereUniqueWithoutDispatchInput = {
    where: DispatchLineWhereUniqueInput
    update: XOR<DispatchLineUpdateWithoutDispatchInput, DispatchLineUncheckedUpdateWithoutDispatchInput>
    create: XOR<DispatchLineCreateWithoutDispatchInput, DispatchLineUncheckedCreateWithoutDispatchInput>
  }

  export type DispatchLineUpdateWithWhereUniqueWithoutDispatchInput = {
    where: DispatchLineWhereUniqueInput
    data: XOR<DispatchLineUpdateWithoutDispatchInput, DispatchLineUncheckedUpdateWithoutDispatchInput>
  }

  export type DispatchLineUpdateManyWithWhereWithoutDispatchInput = {
    where: DispatchLineScalarWhereInput
    data: XOR<DispatchLineUpdateManyMutationInput, DispatchLineUncheckedUpdateManyWithoutDispatchInput>
  }

  export type DispatchCreateWithoutLinesInput = {
    number: string
    customer?: string | null
    status?: string
    date?: Date | string
    createdAt?: Date | string
  }

  export type DispatchUncheckedCreateWithoutLinesInput = {
    id?: number
    number: string
    customer?: string | null
    status?: string
    date?: Date | string
    createdAt?: Date | string
  }

  export type DispatchCreateOrConnectWithoutLinesInput = {
    where: DispatchWhereUniqueInput
    create: XOR<DispatchCreateWithoutLinesInput, DispatchUncheckedCreateWithoutLinesInput>
  }

  export type ItemCreateWithoutDispatchesInput = {
    sku: string
    name: string
    unit?: string
    barcode?: string | null
    minStock?: number | null
    createdAt?: Date | string
    stocks?: StockCreateNestedManyWithoutItemInput
    receipts?: ReceiptLineCreateNestedManyWithoutItemInput
    stocktakes?: StocktakeLineCreateNestedManyWithoutItemInput
  }

  export type ItemUncheckedCreateWithoutDispatchesInput = {
    id?: number
    sku: string
    name: string
    unit?: string
    barcode?: string | null
    minStock?: number | null
    createdAt?: Date | string
    stocks?: StockUncheckedCreateNestedManyWithoutItemInput
    receipts?: ReceiptLineUncheckedCreateNestedManyWithoutItemInput
    stocktakes?: StocktakeLineUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemCreateOrConnectWithoutDispatchesInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutDispatchesInput, ItemUncheckedCreateWithoutDispatchesInput>
  }

  export type LocationCreateWithoutDispatchLinesInput = {
    code: string
    description?: string | null
    createdAt?: Date | string
    stocks?: StockCreateNestedManyWithoutLocationInput
    stocktakes?: StocktakeLineCreateNestedManyWithoutLocationInput
    receiptLines?: ReceiptLineCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutDispatchLinesInput = {
    id?: number
    code: string
    description?: string | null
    createdAt?: Date | string
    stocks?: StockUncheckedCreateNestedManyWithoutLocationInput
    stocktakes?: StocktakeLineUncheckedCreateNestedManyWithoutLocationInput
    receiptLines?: ReceiptLineUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutDispatchLinesInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutDispatchLinesInput, LocationUncheckedCreateWithoutDispatchLinesInput>
  }

  export type DispatchUpsertWithoutLinesInput = {
    update: XOR<DispatchUpdateWithoutLinesInput, DispatchUncheckedUpdateWithoutLinesInput>
    create: XOR<DispatchCreateWithoutLinesInput, DispatchUncheckedCreateWithoutLinesInput>
    where?: DispatchWhereInput
  }

  export type DispatchUpdateToOneWithWhereWithoutLinesInput = {
    where?: DispatchWhereInput
    data: XOR<DispatchUpdateWithoutLinesInput, DispatchUncheckedUpdateWithoutLinesInput>
  }

  export type DispatchUpdateWithoutLinesInput = {
    number?: StringFieldUpdateOperationsInput | string
    customer?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DispatchUncheckedUpdateWithoutLinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    customer?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemUpsertWithoutDispatchesInput = {
    update: XOR<ItemUpdateWithoutDispatchesInput, ItemUncheckedUpdateWithoutDispatchesInput>
    create: XOR<ItemCreateWithoutDispatchesInput, ItemUncheckedCreateWithoutDispatchesInput>
    where?: ItemWhereInput
  }

  export type ItemUpdateToOneWithWhereWithoutDispatchesInput = {
    where?: ItemWhereInput
    data: XOR<ItemUpdateWithoutDispatchesInput, ItemUncheckedUpdateWithoutDispatchesInput>
  }

  export type ItemUpdateWithoutDispatchesInput = {
    sku?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    minStock?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stocks?: StockUpdateManyWithoutItemNestedInput
    receipts?: ReceiptLineUpdateManyWithoutItemNestedInput
    stocktakes?: StocktakeLineUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateWithoutDispatchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    minStock?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stocks?: StockUncheckedUpdateManyWithoutItemNestedInput
    receipts?: ReceiptLineUncheckedUpdateManyWithoutItemNestedInput
    stocktakes?: StocktakeLineUncheckedUpdateManyWithoutItemNestedInput
  }

  export type LocationUpsertWithoutDispatchLinesInput = {
    update: XOR<LocationUpdateWithoutDispatchLinesInput, LocationUncheckedUpdateWithoutDispatchLinesInput>
    create: XOR<LocationCreateWithoutDispatchLinesInput, LocationUncheckedCreateWithoutDispatchLinesInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutDispatchLinesInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutDispatchLinesInput, LocationUncheckedUpdateWithoutDispatchLinesInput>
  }

  export type LocationUpdateWithoutDispatchLinesInput = {
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stocks?: StockUpdateManyWithoutLocationNestedInput
    stocktakes?: StocktakeLineUpdateManyWithoutLocationNestedInput
    receiptLines?: ReceiptLineUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutDispatchLinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stocks?: StockUncheckedUpdateManyWithoutLocationNestedInput
    stocktakes?: StocktakeLineUncheckedUpdateManyWithoutLocationNestedInput
    receiptLines?: ReceiptLineUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type StocktakeLineCreateWithoutStocktakeInput = {
    countedQty: number
    item: ItemCreateNestedOneWithoutStocktakesInput
    location: LocationCreateNestedOneWithoutStocktakesInput
  }

  export type StocktakeLineUncheckedCreateWithoutStocktakeInput = {
    id?: number
    itemId: number
    locationId: number
    countedQty: number
  }

  export type StocktakeLineCreateOrConnectWithoutStocktakeInput = {
    where: StocktakeLineWhereUniqueInput
    create: XOR<StocktakeLineCreateWithoutStocktakeInput, StocktakeLineUncheckedCreateWithoutStocktakeInput>
  }

  export type StocktakeLineCreateManyStocktakeInputEnvelope = {
    data: StocktakeLineCreateManyStocktakeInput | StocktakeLineCreateManyStocktakeInput[]
    skipDuplicates?: boolean
  }

  export type StocktakeLineUpsertWithWhereUniqueWithoutStocktakeInput = {
    where: StocktakeLineWhereUniqueInput
    update: XOR<StocktakeLineUpdateWithoutStocktakeInput, StocktakeLineUncheckedUpdateWithoutStocktakeInput>
    create: XOR<StocktakeLineCreateWithoutStocktakeInput, StocktakeLineUncheckedCreateWithoutStocktakeInput>
  }

  export type StocktakeLineUpdateWithWhereUniqueWithoutStocktakeInput = {
    where: StocktakeLineWhereUniqueInput
    data: XOR<StocktakeLineUpdateWithoutStocktakeInput, StocktakeLineUncheckedUpdateWithoutStocktakeInput>
  }

  export type StocktakeLineUpdateManyWithWhereWithoutStocktakeInput = {
    where: StocktakeLineScalarWhereInput
    data: XOR<StocktakeLineUpdateManyMutationInput, StocktakeLineUncheckedUpdateManyWithoutStocktakeInput>
  }

  export type StocktakeCreateWithoutLinesInput = {
    number: string
    status?: string
    date?: Date | string
    createdAt?: Date | string
  }

  export type StocktakeUncheckedCreateWithoutLinesInput = {
    id?: number
    number: string
    status?: string
    date?: Date | string
    createdAt?: Date | string
  }

  export type StocktakeCreateOrConnectWithoutLinesInput = {
    where: StocktakeWhereUniqueInput
    create: XOR<StocktakeCreateWithoutLinesInput, StocktakeUncheckedCreateWithoutLinesInput>
  }

  export type ItemCreateWithoutStocktakesInput = {
    sku: string
    name: string
    unit?: string
    barcode?: string | null
    minStock?: number | null
    createdAt?: Date | string
    stocks?: StockCreateNestedManyWithoutItemInput
    receipts?: ReceiptLineCreateNestedManyWithoutItemInput
    dispatches?: DispatchLineCreateNestedManyWithoutItemInput
  }

  export type ItemUncheckedCreateWithoutStocktakesInput = {
    id?: number
    sku: string
    name: string
    unit?: string
    barcode?: string | null
    minStock?: number | null
    createdAt?: Date | string
    stocks?: StockUncheckedCreateNestedManyWithoutItemInput
    receipts?: ReceiptLineUncheckedCreateNestedManyWithoutItemInput
    dispatches?: DispatchLineUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemCreateOrConnectWithoutStocktakesInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutStocktakesInput, ItemUncheckedCreateWithoutStocktakesInput>
  }

  export type LocationCreateWithoutStocktakesInput = {
    code: string
    description?: string | null
    createdAt?: Date | string
    stocks?: StockCreateNestedManyWithoutLocationInput
    receiptLines?: ReceiptLineCreateNestedManyWithoutLocationInput
    dispatchLines?: DispatchLineCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutStocktakesInput = {
    id?: number
    code: string
    description?: string | null
    createdAt?: Date | string
    stocks?: StockUncheckedCreateNestedManyWithoutLocationInput
    receiptLines?: ReceiptLineUncheckedCreateNestedManyWithoutLocationInput
    dispatchLines?: DispatchLineUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutStocktakesInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutStocktakesInput, LocationUncheckedCreateWithoutStocktakesInput>
  }

  export type StocktakeUpsertWithoutLinesInput = {
    update: XOR<StocktakeUpdateWithoutLinesInput, StocktakeUncheckedUpdateWithoutLinesInput>
    create: XOR<StocktakeCreateWithoutLinesInput, StocktakeUncheckedCreateWithoutLinesInput>
    where?: StocktakeWhereInput
  }

  export type StocktakeUpdateToOneWithWhereWithoutLinesInput = {
    where?: StocktakeWhereInput
    data: XOR<StocktakeUpdateWithoutLinesInput, StocktakeUncheckedUpdateWithoutLinesInput>
  }

  export type StocktakeUpdateWithoutLinesInput = {
    number?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StocktakeUncheckedUpdateWithoutLinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemUpsertWithoutStocktakesInput = {
    update: XOR<ItemUpdateWithoutStocktakesInput, ItemUncheckedUpdateWithoutStocktakesInput>
    create: XOR<ItemCreateWithoutStocktakesInput, ItemUncheckedCreateWithoutStocktakesInput>
    where?: ItemWhereInput
  }

  export type ItemUpdateToOneWithWhereWithoutStocktakesInput = {
    where?: ItemWhereInput
    data: XOR<ItemUpdateWithoutStocktakesInput, ItemUncheckedUpdateWithoutStocktakesInput>
  }

  export type ItemUpdateWithoutStocktakesInput = {
    sku?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    minStock?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stocks?: StockUpdateManyWithoutItemNestedInput
    receipts?: ReceiptLineUpdateManyWithoutItemNestedInput
    dispatches?: DispatchLineUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateWithoutStocktakesInput = {
    id?: IntFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    minStock?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stocks?: StockUncheckedUpdateManyWithoutItemNestedInput
    receipts?: ReceiptLineUncheckedUpdateManyWithoutItemNestedInput
    dispatches?: DispatchLineUncheckedUpdateManyWithoutItemNestedInput
  }

  export type LocationUpsertWithoutStocktakesInput = {
    update: XOR<LocationUpdateWithoutStocktakesInput, LocationUncheckedUpdateWithoutStocktakesInput>
    create: XOR<LocationCreateWithoutStocktakesInput, LocationUncheckedCreateWithoutStocktakesInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutStocktakesInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutStocktakesInput, LocationUncheckedUpdateWithoutStocktakesInput>
  }

  export type LocationUpdateWithoutStocktakesInput = {
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stocks?: StockUpdateManyWithoutLocationNestedInput
    receiptLines?: ReceiptLineUpdateManyWithoutLocationNestedInput
    dispatchLines?: DispatchLineUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutStocktakesInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stocks?: StockUncheckedUpdateManyWithoutLocationNestedInput
    receiptLines?: ReceiptLineUncheckedUpdateManyWithoutLocationNestedInput
    dispatchLines?: DispatchLineUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type StockCreateManyItemInput = {
    id?: number
    locationId: number
    quantity?: number
  }

  export type ReceiptLineCreateManyItemInput = {
    id?: number
    receiptId: number
    locationId: number
    qty: number
  }

  export type DispatchLineCreateManyItemInput = {
    id?: number
    dispatchId: number
    locationId: number
    qty: number
  }

  export type StocktakeLineCreateManyItemInput = {
    id?: number
    stocktakeId: number
    locationId: number
    countedQty: number
  }

  export type StockUpdateWithoutItemInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    location?: LocationUpdateOneRequiredWithoutStocksNestedInput
  }

  export type StockUncheckedUpdateWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type StockUncheckedUpdateManyWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type ReceiptLineUpdateWithoutItemInput = {
    qty?: IntFieldUpdateOperationsInput | number
    receipt?: ReceiptUpdateOneRequiredWithoutLinesNestedInput
    location?: LocationUpdateOneRequiredWithoutReceiptLinesNestedInput
  }

  export type ReceiptLineUncheckedUpdateWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    receiptId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
  }

  export type ReceiptLineUncheckedUpdateManyWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    receiptId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
  }

  export type DispatchLineUpdateWithoutItemInput = {
    qty?: IntFieldUpdateOperationsInput | number
    dispatch?: DispatchUpdateOneRequiredWithoutLinesNestedInput
    location?: LocationUpdateOneRequiredWithoutDispatchLinesNestedInput
  }

  export type DispatchLineUncheckedUpdateWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    dispatchId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
  }

  export type DispatchLineUncheckedUpdateManyWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    dispatchId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
  }

  export type StocktakeLineUpdateWithoutItemInput = {
    countedQty?: IntFieldUpdateOperationsInput | number
    stocktake?: StocktakeUpdateOneRequiredWithoutLinesNestedInput
    location?: LocationUpdateOneRequiredWithoutStocktakesNestedInput
  }

  export type StocktakeLineUncheckedUpdateWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    stocktakeId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    countedQty?: IntFieldUpdateOperationsInput | number
  }

  export type StocktakeLineUncheckedUpdateManyWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    stocktakeId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    countedQty?: IntFieldUpdateOperationsInput | number
  }

  export type StockCreateManyLocationInput = {
    id?: number
    itemId: number
    quantity?: number
  }

  export type StocktakeLineCreateManyLocationInput = {
    id?: number
    stocktakeId: number
    itemId: number
    countedQty: number
  }

  export type ReceiptLineCreateManyLocationInput = {
    id?: number
    receiptId: number
    itemId: number
    qty: number
  }

  export type DispatchLineCreateManyLocationInput = {
    id?: number
    dispatchId: number
    itemId: number
    qty: number
  }

  export type StockUpdateWithoutLocationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    item?: ItemUpdateOneRequiredWithoutStocksNestedInput
  }

  export type StockUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type StockUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type StocktakeLineUpdateWithoutLocationInput = {
    countedQty?: IntFieldUpdateOperationsInput | number
    stocktake?: StocktakeUpdateOneRequiredWithoutLinesNestedInput
    item?: ItemUpdateOneRequiredWithoutStocktakesNestedInput
  }

  export type StocktakeLineUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    stocktakeId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    countedQty?: IntFieldUpdateOperationsInput | number
  }

  export type StocktakeLineUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    stocktakeId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    countedQty?: IntFieldUpdateOperationsInput | number
  }

  export type ReceiptLineUpdateWithoutLocationInput = {
    qty?: IntFieldUpdateOperationsInput | number
    receipt?: ReceiptUpdateOneRequiredWithoutLinesNestedInput
    item?: ItemUpdateOneRequiredWithoutReceiptsNestedInput
  }

  export type ReceiptLineUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    receiptId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
  }

  export type ReceiptLineUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    receiptId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
  }

  export type DispatchLineUpdateWithoutLocationInput = {
    qty?: IntFieldUpdateOperationsInput | number
    dispatch?: DispatchUpdateOneRequiredWithoutLinesNestedInput
    item?: ItemUpdateOneRequiredWithoutDispatchesNestedInput
  }

  export type DispatchLineUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    dispatchId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
  }

  export type DispatchLineUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    dispatchId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
  }

  export type ReceiptLineCreateManyReceiptInput = {
    id?: number
    itemId: number
    locationId: number
    qty: number
  }

  export type ReceiptLineUpdateWithoutReceiptInput = {
    qty?: IntFieldUpdateOperationsInput | number
    item?: ItemUpdateOneRequiredWithoutReceiptsNestedInput
    location?: LocationUpdateOneRequiredWithoutReceiptLinesNestedInput
  }

  export type ReceiptLineUncheckedUpdateWithoutReceiptInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
  }

  export type ReceiptLineUncheckedUpdateManyWithoutReceiptInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
  }

  export type DispatchLineCreateManyDispatchInput = {
    id?: number
    itemId: number
    locationId: number
    qty: number
  }

  export type DispatchLineUpdateWithoutDispatchInput = {
    qty?: IntFieldUpdateOperationsInput | number
    item?: ItemUpdateOneRequiredWithoutDispatchesNestedInput
    location?: LocationUpdateOneRequiredWithoutDispatchLinesNestedInput
  }

  export type DispatchLineUncheckedUpdateWithoutDispatchInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
  }

  export type DispatchLineUncheckedUpdateManyWithoutDispatchInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
  }

  export type StocktakeLineCreateManyStocktakeInput = {
    id?: number
    itemId: number
    locationId: number
    countedQty: number
  }

  export type StocktakeLineUpdateWithoutStocktakeInput = {
    countedQty?: IntFieldUpdateOperationsInput | number
    item?: ItemUpdateOneRequiredWithoutStocktakesNestedInput
    location?: LocationUpdateOneRequiredWithoutStocktakesNestedInput
  }

  export type StocktakeLineUncheckedUpdateWithoutStocktakeInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    countedQty?: IntFieldUpdateOperationsInput | number
  }

  export type StocktakeLineUncheckedUpdateManyWithoutStocktakeInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    countedQty?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ItemCountOutputTypeDefaultArgs instead
     */
    export type ItemCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ItemCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationCountOutputTypeDefaultArgs instead
     */
    export type LocationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReceiptCountOutputTypeDefaultArgs instead
     */
    export type ReceiptCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReceiptCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DispatchCountOutputTypeDefaultArgs instead
     */
    export type DispatchCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DispatchCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StocktakeCountOutputTypeDefaultArgs instead
     */
    export type StocktakeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StocktakeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ItemDefaultArgs instead
     */
    export type ItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationDefaultArgs instead
     */
    export type LocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StockDefaultArgs instead
     */
    export type StockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StockDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReceiptDefaultArgs instead
     */
    export type ReceiptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReceiptDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReceiptLineDefaultArgs instead
     */
    export type ReceiptLineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReceiptLineDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DispatchDefaultArgs instead
     */
    export type DispatchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DispatchDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DispatchLineDefaultArgs instead
     */
    export type DispatchLineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DispatchLineDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StocktakeDefaultArgs instead
     */
    export type StocktakeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StocktakeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StocktakeLineDefaultArgs instead
     */
    export type StocktakeLineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StocktakeLineDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}